{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue","mtime":1607175842072},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB0YXNrUHJldmlldyBmcm9tICcuL3Rhc2stcHJldmlldyc7CmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvYm9hcmQuc2VydmljZSc7CmltcG9ydCBkcmFnZ2FibGUgZnJvbSAndnVlZHJhZ2dhYmxlJzsgLy8gaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICd0YXNrLWxpc3QnLAogIHByb3BzOiB7CiAgICB0YXNrczogQXJyYXksCiAgICBncm91cElkOiBTdHJpbmcsCiAgICB0YXNrQ29sb3I6IFN0cmluZwogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHR4dDogJycsCiAgICAgIGlzQWRkQnRuU2hvd2VuOiBmYWxzZSwKICAgICAgY2xvbmVkVGFza3M6IG51bGwKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgYm9hcmQ6IGZ1bmN0aW9uIGJvYXJkKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5ib2FyZDsKICAgIH0sCiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgICByZXR1cm4gewogICAgICAgIHR4dDogJycsCiAgICAgICAgaXNBZGRCdG5TaG93ZW46IGZhbHNlLAogICAgICAgIGNsb25lZFRhc2tzOiBudWxsCiAgICAgIH07CiAgICB9LAogICAgdGFza0JnYzogZnVuY3Rpb24gdGFza0JnYygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMudGFza0NvbG9yCiAgICAgIH07CiAgICB9LAogICAgdXNlcjogZnVuY3Rpb24gdXNlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMudXNlcjsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGFkZEVtcHR5VGFzazogZnVuY3Rpb24gYWRkRW1wdHlUYXNrKGdyb3VwSWQpIHsKICAgICAgaWYgKHRoaXMuZ3JvdXBJZCAhPT0gZ3JvdXBJZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIG5ld1Rhc2sgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlUYXNrKCk7CiAgICAgIHZhciBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCk7CiAgICAgIHZhciB0eHQgPSAiIi5jb25jYXQodGhpcy51c2VyLmZ1bGxOYW1lLCAiIGFkZCBuZXcgdGFzayBpbiAiKS5jb25jYXQoZ3JvdXAudHh0KTsKICAgICAgdmFyIG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkodHh0LCB0aGlzLnVzZXIpOwogICAgICBuZXdBY3Rpdml0eS5ncm91cElkID0gZ3JvdXBJZDsKICAgICAgdGhpcy5ib2FyZC5hY3Rpdml0aWVzLnVuc2hpZnQobmV3QWN0aXZpdHkpOwogICAgICBncm91cC50YXNrcy5wdXNoKG5ld1Rhc2spOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAndXBkYXRlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pOwogICAgICB0aGlzLiRub3RpZnkoewogICAgICAgIG1lc3NhZ2U6ICdOZXcgdGFzayBhZGRlZCcsCiAgICAgICAgcG9zaXRpb246ICdib3R0b20tbGVmdCcsCiAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgfSk7CiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJyk7CiAgICB9LAogICAgc2hvd0FkZEJ0bjogZnVuY3Rpb24gc2hvd0FkZEJ0bigpIHsKICAgICAgdGhpcy5pc0FkZEJ0blNob3dlbiA9IHRydWU7CiAgICB9LAogICAgZ2V0R3JvdXBCeUlkOiBmdW5jdGlvbiBnZXRHcm91cEJ5SWQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaWR4ID0gdGhpcy5ib2FyZC5ncm91cHMuZmluZEluZGV4KGZ1bmN0aW9uIChncm91cCkgewogICAgICAgIHJldHVybiBncm91cC5pZCA9PT0gX3RoaXMuZ3JvdXBJZDsKICAgICAgfSk7CiAgICAgIHJldHVybiB0aGlzLmJvYXJkLmdyb3Vwc1tpZHhdOwogICAgfSwKICAgIGFkZFRhc2s6IGZ1bmN0aW9uIGFkZFRhc2soKSB7CiAgICAgIHZhciBuZXdUYXNrID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5VGFzaygpOwogICAgICBuZXdUYXNrLnR4dCA9IHRoaXMudHh0OwogICAgICB2YXIgdHh0ID0gIlRhc2sgJyIuY29uY2F0KG5ld1Rhc2sudHh0LCAiJyBhZGRlZCIpOwogICAgICB2YXIgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMudXNlcik7CiAgICAgIG5ld0FjdGl2aXR5Lmdyb3VwSWQgPSB0aGlzLmdyb3VwSWQ7CiAgICAgIHRoaXMuYm9hcmQuYWN0aXZpdGllcy51bnNoaWZ0KG5ld0FjdGl2aXR5KTsKICAgICAgdmFyIGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKTsKICAgICAgZ3JvdXAudGFza3MucHVzaChuZXdUYXNrKTsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgIHR5cGU6ICdzYXZlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3VwZGF0ZUJvYXJkJywKICAgICAgICBib2FyZDogdGhpcy5ib2FyZAogICAgICB9KTsKICAgICAgdGhpcy50eHQgPSAnJzsKICAgICAgdGhpcy5pc0FkZEJ0blNob3dlbiA9IGZhbHNlOwogICAgICB0aGlzLiRub3RpZnkoewogICAgICAgIG1lc3NhZ2U6ICdOZXcgdGFzayBhZGRlZCcsCiAgICAgICAgcG9zaXRpb246ICdib3R0b20tbGVmdCcsCiAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgfSk7CiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJyk7CiAgICB9LAogICAgZGVsZXRlVGFzazogZnVuY3Rpb24gZGVsZXRlVGFzayh0YXNrSWQpIHsKICAgICAgdmFyIGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKTsKICAgICAgdmFyIHRhc2tJZHggPSBncm91cC50YXNrcy5maW5kSW5kZXgoZnVuY3Rpb24gKHRhc2spIHsKICAgICAgICByZXR1cm4gdGFzay5pZCA9PT0gdGFza0lkOwogICAgICB9KTsKICAgICAgZ3JvdXAudGFza3Muc3BsaWNlKHRhc2tJZHgsIDEpOwogICAgICB2YXIgdHh0ID0gIiIuY29uY2F0KHRoaXMudXNlci5mdWxsTmFtZSwgIiByZW1vdmUgYSB0YXNrIGZyb20gIikuY29uY2F0KGdyb3VwLnR4dCk7CiAgICAgIHZhciBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KHR4dCwgdGhpcy51c2VyKTsKICAgICAgbmV3QWN0aXZpdHkuZ3JvdXBJZCA9IHRoaXMuZ3JvdXBJZDsKICAgICAgdGhpcy5ib2FyZC5hY3Rpdml0aWVzLnVuc2hpZnQobmV3QWN0aXZpdHkpOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAndXBkYXRlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pOwogICAgICB0aGlzLiRub3RpZnkoewogICAgICAgIG1lc3NhZ2U6ICdUYXNrIHJlbW92ZWQnLAogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgIH0pOwogICAgICB0aGlzLiRlbWl0KCdmb3JjZVJlbmRlcicpOwogICAgfSwKICAgIHVwZGF0ZVRhc2s6IGZ1bmN0aW9uIHVwZGF0ZVRhc2sobmV3VGFzaywgYWN0aXZpdHkpIHsKICAgICAgaWYgKGFjdGl2aXR5KSB7CiAgICAgICAgdGhpcy5ib2FyZC5hY3Rpdml0aWVzLnVuc2hpZnQoYWN0aXZpdHkpOwogICAgICB9CgogICAgICB2YXIgZ3JvdXAgPSB0aGlzLmdldEdyb3VwQnlJZCgpOwogICAgICB2YXIgdGFza0lkeCA9IGdyb3VwLnRhc2tzLmZpbmRJbmRleChmdW5jdGlvbiAodGFzaykgewogICAgICAgIHJldHVybiB0YXNrLmlkID09PSBuZXdUYXNrLmlkOwogICAgICB9KTsKICAgICAgZ3JvdXAudGFza3Muc3BsaWNlKHRhc2tJZHgsIDEsIG5ld1Rhc2spOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAndXBkYXRlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pOwogICAgICB0aGlzLiRlbWl0KCdmb3JjZVJlbmRlcicpOwogICAgfSwKICAgIHVwZGF0ZVRhc2tzOiBmdW5jdGlvbiB1cGRhdGVUYXNrcygpIHsKICAgICAgdmFyIGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKTsKICAgICAgZ3JvdXAudGFza3MgPSB0aGlzLmNsb25lZFRhc2tzOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAndXBkYXRlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pOwogICAgICB0aGlzLiRlbWl0KCdmb3JjZVJlbmRlcicpOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuY2xvbmVkVGFza3MgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMudGFza3MpKTsKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIHRhc2tQcmV2aWV3OiB0YXNrUHJldmlldywKICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlCiAgfQp9Ow=="},{"version":3,"sources":["task-list.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <section v-if=\"clonedTasks\" class=\"task-list-container width100\">\n    <ul class=\"task-list clean-list flex wrap align-center justify-center gap\">\n      <draggable class=\"width100\" :list=\"clonedTasks\" @end=\"updateTasks\">\n        <task-preview\n          v-for=\"task in clonedTasks\"\n          :user=\"user\"\n          :taskColor=\"taskColor\"\n          :key=\"task.id\"\n          :task=\"task\"\n          :statuses=\"board.statuses\"\n          :priorities=\"board.priorities\"\n          :groupId=\"groupId\"\n          @deleteTask=\"deleteTask\"\n          @updateTask=\"updateTask\"\n          :boardMembers=\"board.members\"\n        />\n      </draggable>\n    </ul>\n    <form class=\"add-task-form flex\" @submit.prevent=\"addTask\">\n      <span class=\"task-color input-color\" :style=\"taskBgc\"></span>\n      <input\n        class=\"add-task-input\"\n        @focus=\"showAddBtn\"\n        v-model=\"txt\"\n        type=\"text\"\n        placeholder=\"+ Add Task\"\n      />\n      <button v-show=\"isAddBtnShowen\" type=\"submit\">Add</button>\n    </form>\n  </section>\n</template>\n\n<script>\nimport taskPreview from './task-preview'\nimport { boardService } from '@/services/board.service'\nimport draggable from 'vuedraggable'\n// import { eventBus } from '@/services/event-bus.service'\n\nexport default {\n  name: 'task-list',\n  props: {\n    tasks: Array,\n    groupId: String,\n    taskColor: String\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShowen: false,\n      clonedTasks: null\n    }\n  },\n\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    data() {\n      return {\n        txt: '',\n        isAddBtnShowen: false,\n        clonedTasks: null\n      }\n    },\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    user() {\n      return this.$store.getters.user\n    }\n  },\n  methods: {\n    addEmptyTask(groupId) {\n      if (this.groupId !== groupId) {\n        return\n      }\n      const newTask = boardService.getEmptyTask()\n      const group = this.getGroupById()\n      const txt = `${this.user.fullName} add new task in ${group.txt}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.groupId = groupId\n      this.board.activities.unshift(newActivity)\n      group.tasks.push(newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$store.dispatch({ type: 'updateBoard', board: this.board })\n\n      this.$notify({\n        message: 'New task added',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    showAddBtn() {\n      this.isAddBtnShowen = true\n    },\n    getGroupById() {\n      const idx = this.board.groups.findIndex(\n        group => group.id === this.groupId\n      )\n      return this.board.groups[idx]\n    },\n    addTask() {\n      const newTask = boardService.getEmptyTask()\n      newTask.txt = this.txt\n      const txt = `Task '${newTask.txt}' added`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.groupId = this.groupId\n      this.board.activities.unshift(newActivity)\n      const group = this.getGroupById()\n      group.tasks.push(newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$store.dispatch({ type: 'updateBoard', board: this.board })\n\n      this.txt = ''\n      this.isAddBtnShowen = false\n      this.$notify({\n        message: 'New task added',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    deleteTask(taskId) {\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === taskId)\n      group.tasks.splice(taskIdx, 1)\n      const txt = `${this.user.fullName} remove a task from ${group.txt}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.groupId = this.groupId\n      this.board.activities.unshift(newActivity)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$store.dispatch({ type: 'updateBoard', board: this.board })\n      this.$notify({\n        message: 'Task removed',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    updateTask(newTask, activity) {\n      if (activity) {\n        this.board.activities.unshift(activity)\n\n      }\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === newTask.id)\n      group.tasks.splice(taskIdx, 1, newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$store.dispatch({ type: 'updateBoard', board: this.board })\n\n      this.$emit('forceRender')\n    },\n    updateTasks() {\n      const group = this.getGroupById()\n      group.tasks = this.clonedTasks\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$store.dispatch({ type: 'updateBoard', board: this.board })\n\n      this.$emit('forceRender')\n    }\n  },\n  created() {\n    this.clonedTasks = JSON.parse(JSON.stringify(this.tasks))\n  },\n  components: {\n    taskPreview,\n    draggable\n  }\n}\n</script>\n"],"sourceRoot":"src/cmps"}]}