{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","mtime":1607175842075},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9vcmVsdmFpem1hbi9EZXNrdG9wL2Rldi9GaW5hbFNwcmludC90YXNrdS1mcm9udGVuZC9UYXNrVS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9vcmVsdmFpem1hbi9EZXNrdG9wL2Rldi9GaW5hbFNwcmludC90YXNrdS1mcm9udGVuZC9UYXNrVS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvYm9hcmQuc2VydmljZS5qcyc7CmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7CmV4cG9ydCB2YXIgYm9hcmRTdG9yZSA9IHsKICBzdGF0ZTogewogICAgYm9hcmRzOiBbXSwKICAgIGN1cnJCb2FyZDogbnVsbCwKICAgIHNlYXJjaEJvYXJkOiBudWxsLAogICAgZmlsdGVyQnk6IHsKICAgICAgc3RhdHVzOiAnQWxsJywKICAgICAgcHJpb3JpdHk6ICdBbGwnLAogICAgICBwZXJzb246ICdBbGwnLAogICAgICBzZWFyY2hUZXJtOiAnJwogICAgfSwKICAgIGRhcmtNb2RlOiBmYWxzZSwKICAgIGRpc3BsYXlNb2RlOiAnQm9hcmQnCiAgfSwKICBnZXR0ZXJzOiB7CiAgICBkaXNwbGF5TW9kZTogZnVuY3Rpb24gZGlzcGxheU1vZGUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmRpc3BsYXlNb2RlOwogICAgfSwKICAgIGJvYXJkczogZnVuY3Rpb24gYm9hcmRzKHN0YXRlKSB7CiAgICAgIGlmICghc3RhdGUuc2VhcmNoQm9hcmQpIHJldHVybiBzdGF0ZS5ib2FyZHM7CiAgICAgIHJldHVybiBzdGF0ZS5ib2FyZHMuZmlsdGVyKGZ1bmN0aW9uIChib2FyZCkgewogICAgICAgIHJldHVybiBib2FyZC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc3RhdGUuc2VhcmNoQm9hcmQudG9Mb3dlckNhc2UoKSk7CiAgICAgIH0pOwogICAgfSwKICAgIGJvYXJkOiBmdW5jdGlvbiBib2FyZChzdGF0ZSkgewogICAgICB2YXIgZmlsdGVyQnkgPSBzdGF0ZS5maWx0ZXJCeTsKICAgICAgdmFyIGZpbHRlcmVkQm9hcmQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlLmN1cnJCb2FyZCkpOwoKICAgICAgaWYgKGZpbHRlckJ5LnN0YXR1cyAhPT0gJ0FsbCcpIHsKICAgICAgICBmaWx0ZXJlZEJvYXJkLmdyb3Vwcy5maWx0ZXIoZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgICBncm91cC50YXNrcyA9IGdyb3VwLnRhc2tzLmZpbHRlcihmdW5jdGlvbiAodGFzaykgewogICAgICAgICAgICByZXR1cm4gdGFzay5zdGF0dXMudHh0ID09PSBmaWx0ZXJCeS5zdGF0dXM7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICBmaWx0ZXJlZEJvYXJkLmdyb3VwcyA9IGZpbHRlcmVkQm9hcmQuZ3JvdXBzLmZpbHRlcihmdW5jdGlvbiAoZ3JvdXApIHsKICAgICAgICAgIHJldHVybiBncm91cCA9IGdyb3VwLnRhc2tzLmxlbmd0aCAhPT0gMDsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKGZpbHRlckJ5LnByaW9yaXR5ICE9PSAnQWxsJykgewogICAgICAgIGZpbHRlcmVkQm9hcmQuZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgICBncm91cC50YXNrcyA9IGdyb3VwLnRhc2tzLmZpbHRlcihmdW5jdGlvbiAodGFzaykgewogICAgICAgICAgICByZXR1cm4gdGFzay5wcmlvcml0eS50eHQgPT09IGZpbHRlckJ5LnByaW9yaXR5OwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgZmlsdGVyZWRCb2FyZC5ncm91cHMgPSBmaWx0ZXJlZEJvYXJkLmdyb3Vwcy5maWx0ZXIoZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgICByZXR1cm4gZ3JvdXAgPSBncm91cC50YXNrcy5sZW5ndGggIT09IDA7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChmaWx0ZXJCeS5wZXJzb24gIT09ICdBbGwnKSB7CiAgICAgICAgZmlsdGVyZWRCb2FyZC5ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHsKICAgICAgICAgIGdyb3VwLnRhc2tzID0gZ3JvdXAudGFza3MuZmlsdGVyKGZ1bmN0aW9uICh0YXNrKSB7CiAgICAgICAgICAgIGlmICh0YXNrLm1lbWJlcnMuc29tZShmdW5jdGlvbiAobWVtYmVyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG1lbWJlci5faWQgPT09IGZpbHRlckJ5LnBlcnNvbjsKICAgICAgICAgICAgfSkpIHsKICAgICAgICAgICAgICByZXR1cm4gdGFzazsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChmaWx0ZXJCeS5zZWFyY2hUZXJtICE9PSAnJykgewogICAgICAgIGZpbHRlcmVkQm9hcmQuZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgICBncm91cC50YXNrcyA9IGdyb3VwLnRhc2tzLmZpbHRlcihmdW5jdGlvbiAodGFzaykgewogICAgICAgICAgICByZXR1cm4gdGFzay50eHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXJCeS5zZWFyY2hUZXJtLnRvTG93ZXJDYXNlKCkpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgZmlsdGVyZWRCb2FyZC5ncm91cHMgPSBmaWx0ZXJlZEJvYXJkLmdyb3Vwcy5maWx0ZXIoZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgICByZXR1cm4gZ3JvdXAgPSBncm91cC50YXNrcy5sZW5ndGggIT09IDA7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmaWx0ZXJlZEJvYXJkOwogICAgfSwKICAgIGRlZmF1bHRCb2FyZElkOiBmdW5jdGlvbiBkZWZhdWx0Qm9hcmRJZChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuYm9hcmRzWzBdLl9pZDsKICAgIH0sCiAgICBmaWx0ZXJCeTogZnVuY3Rpb24gZmlsdGVyQnkoc3RhdGUpIHsKICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUuZmlsdGVyQnkpKTsKICAgIH0sCiAgICBib2FyZEFjdGl2aXRpZXM6IGZ1bmN0aW9uIGJvYXJkQWN0aXZpdGllcyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuY3VyckJvYXJkLmFjdGl2aXRpZXM7CiAgICB9LAogICAgZ2V0RGFya01vZGVUb2dnbGU6IGZ1bmN0aW9uIGdldERhcmtNb2RlVG9nZ2xlKHN0YXRlKSB7CiAgICAgIHZhciBpc0RhcmtNb2RlID0gc3RhdGUuZGFya01vZGU7CiAgICAgIHJldHVybiB7CiAgICAgICAgZGFya01vZGU6IGlzRGFya01vZGUsCiAgICAgICAgJyc6ICFpc0RhcmtNb2RlCiAgICAgIH07CiAgICB9LAogICAgdGFza3NCeVN0YXR1ZXM6IGZ1bmN0aW9uIHRhc2tzQnlTdGF0dWVzKHN0YXRlKSB7CiAgICAgIHZhciBzdGF0dWVzTWFwID0gc3RhdGUuY3VyckJvYXJkLnN0YXR1c2VzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdGF0dXMpIHsKICAgICAgICBhY2NbXy5jYW1lbENhc2Uoc3RhdHVzLnR4dCldID0gewogICAgICAgICAgaWQ6IHN0YXR1cy5pZCwKICAgICAgICAgIGNvbG9yOiBzdGF0dXMuY29sb3IsCiAgICAgICAgICB0eHQ6IHN0YXR1cy50eHQsCiAgICAgICAgICB0YXNrczogW10KICAgICAgICB9OwogICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIHt9KTsKICAgICAgdmFyIGJvYXJkR3JvdXBzID0gc3RhdGUuY3VyckJvYXJkLmdyb3VwczsKICAgICAgYm9hcmRHcm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHsKICAgICAgICBncm91cC50YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXNrKSB7CiAgICAgICAgICB2YXIgbmV3U3RhdHVzID0gXy5jYW1lbENhc2UodGFzay5zdGF0dXMudHh0KTsKCiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc3RhdHVlc01hcCkgewogICAgICAgICAgICBpZiAoa2V5ID09PSBuZXdTdGF0dXMpIHsKICAgICAgICAgICAgICB2YXIgdGFza0RldGFpbHMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRhc2spLCB7fSwgewogICAgICAgICAgICAgICAgZ3JvdXBOYW1lOiBncm91cC5uYW1lLAogICAgICAgICAgICAgICAgZ3JvdXBJZDogZ3JvdXAuaWQKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgc3RhdHVlc01hcFtrZXldLnRhc2tzLnB1c2godGFza0RldGFpbHMpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gc3RhdHVlc01hcDsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgc2V0RGlzcGxheU1vZGU6IGZ1bmN0aW9uIHNldERpc3BsYXlNb2RlKHN0YXRlLCBfcmVmKSB7CiAgICAgIHZhciBkaXNwbGF5TW9kZSA9IF9yZWYuZGlzcGxheU1vZGU7CiAgICAgIHJldHVybiBzdGF0ZS5kaXNwbGF5TW9kZSA9IGRpc3BsYXlNb2RlOwogICAgfSwKICAgIGRhcmtNb2RlOiBmdW5jdGlvbiBkYXJrTW9kZShzdGF0ZSwgX3JlZjIpIHsKICAgICAgdmFyIGRhcmtNb2RlID0gX3JlZjIuZGFya01vZGU7CiAgICAgIHJldHVybiBzdGF0ZS5kYXJrTW9kZSA9IGRhcmtNb2RlOwogICAgfSwKICAgIHNldEJvYXJkczogZnVuY3Rpb24gc2V0Qm9hcmRzKHN0YXRlLCBfcmVmMykgewogICAgICB2YXIgYm9hcmRzID0gX3JlZjMuYm9hcmRzOwogICAgICBzdGF0ZS5ib2FyZHMgPSBib2FyZHM7CiAgICB9LAogICAgc2V0Qm9hcmQ6IGZ1bmN0aW9uIHNldEJvYXJkKHN0YXRlLCBfcmVmNCkgewogICAgICB2YXIgYm9hcmQgPSBfcmVmNC5ib2FyZDsKICAgICAgc3RhdGUuY3VyckJvYXJkID0gYm9hcmQ7CiAgICB9LAogICAgcmVtb3ZlQm9hcmQ6IGZ1bmN0aW9uIHJlbW92ZUJvYXJkKHN0YXRlLCBfcmVmNSkgewogICAgICB2YXIgYm9hcmRJZCA9IF9yZWY1LmJvYXJkSWQ7CiAgICAgIHN0YXRlLmJvYXJkcyA9IHN0YXRlLmJvYXJkcy5maWx0ZXIoZnVuY3Rpb24gKGJvYXJkKSB7CiAgICAgICAgcmV0dXJuIGJvYXJkLl9pZCAhPT0gYm9hcmRJZDsKICAgICAgfSk7CiAgICB9LAogICAgc2V0U2VhcmNoOiBmdW5jdGlvbiBzZXRTZWFyY2goc3RhdGUsIF9yZWY2KSB7CiAgICAgIHZhciBzZWFyY2hCb2FyZCA9IF9yZWY2LnNlYXJjaEJvYXJkOwogICAgICBzdGF0ZS5zZWFyY2hCb2FyZCA9IHNlYXJjaEJvYXJkOwogICAgfSwKICAgIHNldEZpbHRlckJ5OiBmdW5jdGlvbiBzZXRGaWx0ZXJCeShzdGF0ZSwgX3JlZjcpIHsKICAgICAgdmFyIGZpbHRlckJ5ID0gX3JlZjcuZmlsdGVyQnk7CiAgICAgIHN0YXRlLmZpbHRlckJ5ID0gZmlsdGVyQnk7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBsb2FkQm9hcmRzOiBmdW5jdGlvbiBsb2FkQm9hcmRzKF9yZWY4KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcm9vdEdldHRlcnMsIHVzZXJJZCwgYm9hcmRzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY4LmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmOC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIGNvbW1pdCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZXRCb2FyZHMnLAogICAgICAgICAgICAgICAgICBib2FyZHM6IG51bGwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdXNlcklkID0gcm9vdEdldHRlcnMudXNlci5faWQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGJvYXJkU2VydmljZS5xdWVyeSh1c2VySWQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBib2FyZHMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgY29tbWl0KHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ3NldEJvYXJkcycsCiAgICAgICAgICAgICAgICAgIGJvYXJkczogYm9hcmRzCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNDsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEwOwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgzKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjogY2FudCBsb2FkcyBib2FyZHMnLCBfY29udGV4dC50MCk7CiAgICAgICAgICAgICAgICB0aHJvdyBfY29udGV4dC50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMywgMTBdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGxvYWRCb2FyZDogZnVuY3Rpb24gbG9hZEJvYXJkKF9yZWY5LCBfcmVmMTApIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgYm9hcmRJZCwgYm9hcmQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY5LmNvbW1pdDsKICAgICAgICAgICAgICAgIGJvYXJkSWQgPSBfcmVmMTAuYm9hcmRJZDsKICAgICAgICAgICAgICAgIGNvbW1pdCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZXRCb2FyZCcsCiAgICAgICAgICAgICAgICAgIGJvYXJkOiBudWxsCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBib2FyZFNlcnZpY2UuZ2V0QnlJZChib2FyZElkKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgYm9hcmQgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZXRCb2FyZCcsCiAgICAgICAgICAgICAgICAgIGJvYXJkOiBib2FyZAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEwOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDMpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ25vIGxvYWRlZCcpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOiBjYW50IGxvYWQgYm9hcmQnLCBfY29udGV4dDIudDApOwogICAgICAgICAgICAgICAgdGhyb3cgX2NvbnRleHQyLnQwOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzMsIDEwXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICByZW1vdmVCb2FyZDogZnVuY3Rpb24gcmVtb3ZlQm9hcmQoX3JlZjExLCBfcmVmMTIpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgc3RhdGUsIGJvYXJkSWQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMS5jb21taXQsIHN0YXRlID0gX3JlZjExLnN0YXRlOwogICAgICAgICAgICAgICAgYm9hcmRJZCA9IF9yZWYxMi5ib2FyZElkOwoKICAgICAgICAgICAgICAgIGlmICghKHN0YXRlLmJvYXJkcy5sZW5ndGggPD0gMSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gNDsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBib2FyZFNlcnZpY2UucmVtb3ZlKGJvYXJkSWQpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBjb21taXQoewogICAgICAgICAgICAgICAgICB0eXBlOiAncmVtb3ZlQm9hcmQnLAogICAgICAgICAgICAgICAgICBib2FyZElkOiBib2FyZElkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTA7CiAgICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oNCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6IGNhbnQgcmVtb3ZlIGJvYXJkJywgX2NvbnRleHQzLnQwKTsKICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0My50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1s0LCAxMF1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2F2ZUJvYXJkOiBmdW5jdGlvbiBzYXZlQm9hcmQoX3JlZjEzLCBfcmVmMTQpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgZGlzcGF0Y2gsIHJvb3RHZXR0ZXJzLCBib2FyZCwgZ3Vlc3RVc2VyLCB1c2VySWQsIHNhdmVkQm9hcmQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMy5jb21taXQsIGRpc3BhdGNoID0gX3JlZjEzLmRpc3BhdGNoLCByb290R2V0dGVycyA9IF9yZWYxMy5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIGJvYXJkID0gX3JlZjE0LmJvYXJkOwogICAgICAgICAgICAgICAgZ3Vlc3RVc2VyID0gcm9vdEdldHRlcnMuZ3Vlc3RVc2VyOwogICAgICAgICAgICAgICAgdXNlcklkID0gcm9vdEdldHRlcnMudXNlci5faWQ7IC8vQXZvaWRpbmcgZ3Vlc3QgdXNlciBkdXBsaWNhdGlvbiBpbiBtZW1iZXJzIHBhcmFtZXRlcgoKICAgICAgICAgICAgICAgIGlmICh1c2VySWQgIT09IGd1ZXN0VXNlci5faWQgJiYgIWJvYXJkLl9pZCkgewogICAgICAgICAgICAgICAgICBib2FyZC5tZW1iZXJzLnB1c2goZ3Vlc3RVc2VyKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDU7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gYm9hcmRTZXJ2aWNlLnNhdmUoYm9hcmQpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBzYXZlZEJvYXJkID0gX2NvbnRleHQ0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFib2FyZC5faWQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29tbWl0KHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ3NldEJvYXJkJywKICAgICAgICAgICAgICAgICAgYm9hcmQ6IHNhdmVkQm9hcmQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ltIGluIHRoZSBlbHNlJyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2xvYWRCb2FyZHMnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBzYXZlZEJvYXJkLl9pZCk7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDE5OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDUpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOiBjYW50IHNhdmUvdXBkYXRlIGJvYXJkJyk7CiAgICAgICAgICAgICAgICB0aHJvdyBfY29udGV4dDQudDA7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbNSwgMTldXSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js"],"names":["boardService","_","boardStore","state","boards","currBoard","searchBoard","filterBy","status","priority","person","searchTerm","darkMode","displayMode","getters","filter","board","name","toLowerCase","includes","filteredBoard","JSON","parse","stringify","groups","group","tasks","task","txt","length","forEach","members","some","member","_id","defaultBoardId","boardActivities","activities","getDarkModeToggle","isDarkMode","tasksByStatues","statuesMap","statuses","reduce","acc","camelCase","id","color","boardGroups","newStatus","key","taskDetails","groupName","groupId","push","mutations","setDisplayMode","setBoards","setBoard","removeBoard","boardId","setSearch","setFilterBy","actions","loadBoards","commit","rootGetters","type","userId","user","query","console","log","loadBoard","getById","remove","saveBoard","dispatch","guestUser","save","savedBoard"],"mappings":";;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,6BAA7B;AAEA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,EADH;AAELC,IAAAA,SAAS,EAAE,IAFN;AAGLC,IAAAA,WAAW,EAAE,IAHR;AAILC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,QAAQ,EAAE,KAA3B;AAAkCC,MAAAA,MAAM,EAAE,KAA1C;AAAiDC,MAAAA,UAAU,EAAE;AAA7D,KAJL;AAKLC,IAAAA,QAAQ,EAAC,KALJ;AAMLC,IAAAA,WAAW,EAAE;AANR,GADiB;AAUxBC,EAAAA,OAAO,EAAE;AACPD,IAAAA,WADO,uBACKV,KADL,EACY;AACjB,aAAOA,KAAK,CAACU,WAAb;AACD,KAHM;AAIPT,IAAAA,MAJO,kBAIAD,KAJA,EAIO;AACZ,UAAI,CAACA,KAAK,CAACG,WAAX,EAAwB,OAAOH,KAAK,CAACC,MAAb;AACxB,aAAOD,KAAK,CAACC,MAAN,CAAaW,MAAb,CAAoB,UAAAC,KAAK;AAAA,eAC9BA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkChB,KAAK,CAACG,WAAN,CAAkBY,WAAlB,EAAlC,CAD8B;AAAA,OAAzB,CAAP;AAGD,KATM;AAUPF,IAAAA,KAVO,iBAUDb,KAVC,EAUM;AACX,UAAMI,QAAQ,GAAGJ,KAAK,CAACI,QAAvB;AACA,UAAIa,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAepB,KAAK,CAACE,SAArB,CAAX,CAApB;;AACA,UAAIE,QAAQ,CAACC,MAAT,KAAoB,KAAxB,EAA+B;AAC7BY,QAAAA,aAAa,CAACI,MAAd,CAAqBT,MAArB,CAA4B,UAAAU,KAAK,EAAI;AACnCA,UAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYX,MAAZ,CAAmB,UAAAY,IAAI,EAAI;AACvC,mBAAOA,IAAI,CAACnB,MAAL,CAAYoB,GAAZ,KAAoBrB,QAAQ,CAACC,MAApC;AACD,WAFa,CAAd;AAGD,SAJD;AAKAY,QAAAA,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACI,MAAd,CAAqBT,MAArB,CACrB,UAAAU,KAAK;AAAA,iBAAKA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAYG,MAAZ,KAAuB,CAApC;AAAA,SADgB,CAAvB;AAGD;;AACD,UAAItB,QAAQ,CAACE,QAAT,KAAsB,KAA1B,EAAiC;AAC/BW,QAAAA,aAAa,CAACI,MAAd,CAAqBM,OAArB,CAA6B,UAAAL,KAAK,EAAI;AACpCA,UAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYX,MAAZ,CAAmB,UAAAY,IAAI,EAAI;AACvC,mBAAOA,IAAI,CAAClB,QAAL,CAAcmB,GAAd,KAAsBrB,QAAQ,CAACE,QAAtC;AACD,WAFa,CAAd;AAGD,SAJD;AAKAW,QAAAA,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACI,MAAd,CAAqBT,MAArB,CACrB,UAAAU,KAAK;AAAA,iBAAKA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAYG,MAAZ,KAAuB,CAApC;AAAA,SADgB,CAAvB;AAGD;;AACD,UAAItB,QAAQ,CAACG,MAAT,KAAoB,KAAxB,EAA+B;AAC7BU,QAAAA,aAAa,CAACI,MAAd,CAAqBM,OAArB,CAA6B,UAAAL,KAAK,EAAI;AACpCA,UAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYX,MAAZ,CAAmB,UAAAY,IAAI,EAAI;AACvC,gBAAIA,IAAI,CAACI,OAAL,CAAaC,IAAb,CAAkB,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACC,GAAP,KAAe3B,QAAQ,CAACG,MAA5B;AAAA,aAAxB,CAAJ,EAAiE;AAC/D,qBAAOiB,IAAP;AACD;AACF,WAJa,CAAd;AAKD,SAND;AAOD;;AACD,UAAIpB,QAAQ,CAACI,UAAT,KAAwB,EAA5B,EAAgC;AAC9BS,QAAAA,aAAa,CAACI,MAAd,CAAqBM,OAArB,CAA6B,UAAAL,KAAK,EAAI;AACpCA,UAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,CAAYX,MAAZ,CAAmB,UAAAY,IAAI,EAAI;AACvC,mBAAOA,IAAI,CAACC,GAAL,CACJV,WADI,GAEJC,QAFI,CAEKZ,QAAQ,CAACI,UAAT,CAAoBO,WAApB,EAFL,CAAP;AAGD,WAJa,CAAd;AAKD,SAND;AAOAE,QAAAA,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACI,MAAd,CAAqBT,MAArB,CACrB,UAAAU,KAAK;AAAA,iBAAKA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAYG,MAAZ,KAAuB,CAApC;AAAA,SADgB,CAAvB;AAGD;;AACD,aAAOT,aAAP;AACD,KAvDM;AAwDPe,IAAAA,cAxDO,0BAwDQhC,KAxDR,EAwDe;AACpB,aAAOA,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgB8B,GAAvB;AACD,KA1DM;AA2DP3B,IAAAA,QA3DO,oBA2DEJ,KA3DF,EA2DS;AACd,aAAOkB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAepB,KAAK,CAACI,QAArB,CAAX,CAAP;AACD,KA7DM;AA8DP6B,IAAAA,eA9DO,2BA8DSjC,KA9DT,EA8DgB;AACrB,aAAOA,KAAK,CAACE,SAAN,CAAgBgC,UAAvB;AACD,KAhEM;AAiEPC,IAAAA,iBAjEO,6BAiEWnC,KAjEX,EAiEiB;AACtB,UAAMoC,UAAU,GAAGpC,KAAK,CAACS,QAAzB;AACA,aAAQ;AAACA,QAAAA,QAAQ,EAAC2B,UAAV;AAAyB,YAAG,CAACA;AAA7B,OAAR;AAED,KArEM;AAsEPC,IAAAA,cAtEO,0BAsEQrC,KAtER,EAsEc;AAClB,UAAIsC,UAAU,GAAEtC,KAAK,CAACE,SAAN,CAAgBqC,QAAhB,CAAyBC,MAAzB,CAAgC,UAACC,GAAD,EAAKpC,MAAL,EAAc;AAC7DoC,QAAAA,GAAG,CAAC3C,CAAC,CAAC4C,SAAF,CAAYrC,MAAM,CAACoB,GAAnB,CAAD,CAAH,GAA+B;AAACkB,UAAAA,EAAE,EAACtC,MAAM,CAACsC,EAAX;AAAcC,UAAAA,KAAK,EAACvC,MAAM,CAACuC,KAA3B;AAAiCnB,UAAAA,GAAG,EAACpB,MAAM,CAACoB,GAA5C;AAAgDF,UAAAA,KAAK,EAAC;AAAtD,SAA/B;AACA,eAAOkB,GAAP;AACD,OAHgB,EAGf,EAHe,CAAhB;AAID,UAAMI,WAAW,GAAG7C,KAAK,CAACE,SAAN,CAAgBmB,MAApC;AACAwB,MAAAA,WAAW,CAAClB,OAAZ,CAAoB,UAAAL,KAAK,EAAE;AACzBA,QAAAA,KAAK,CAACC,KAAN,CAAYI,OAAZ,CAAoB,UAAAH,IAAI,EAAE;AACzB,cAAIsB,SAAS,GAAGhD,CAAC,CAAC4C,SAAF,CAAYlB,IAAI,CAACnB,MAAL,CAAYoB,GAAxB,CAAhB;;AACA,eAAI,IAAIsB,GAAR,IAAeT,UAAf,EAA0B;AACxB,gBAAGS,GAAG,KAAKD,SAAX,EAAqB;AACnB,kBAAME,WAAW,mCAAOxB,IAAP;AAAYyB,gBAAAA,SAAS,EAAC3B,KAAK,CAACR,IAA5B;AAAiCoC,gBAAAA,OAAO,EAAC5B,KAAK,CAACqB;AAA/C,gBAAjB;;AACAL,cAAAA,UAAU,CAACS,GAAD,CAAV,CAAgBxB,KAAhB,CAAsB4B,IAAtB,CAA2BH,WAA3B;AACD;AACF;AACD,SARD;AASD,OAVD;AAWA,aAAOV,UAAP;AACD;AAxFM,GAVe;AAqGxBc,EAAAA,SAAS,EAAE;AACTC,IAAAA,cADS,0BACMrD,KADN,QAC4B;AAAA,UAAdU,WAAc,QAAdA,WAAc;AACnC,aAAOV,KAAK,CAACU,WAAN,GAAoBA,WAA3B;AAED,KAJQ;AAKTD,IAAAA,QALS,oBAKAT,KALA,SAKiB;AAAA,UAAVS,QAAU,SAAVA,QAAU;AACxB,aAAOT,KAAK,CAACS,QAAN,GAAiBA,QAAxB;AACD,KAPQ;AAQT6C,IAAAA,SARS,qBAQCtD,KARD,SAQoB;AAAA,UAAVC,MAAU,SAAVA,MAAU;AAE3BD,MAAAA,KAAK,CAACC,MAAN,GAAeA,MAAf;AACD,KAXQ;AAYTsD,IAAAA,QAZS,oBAYAvD,KAZA,SAYkB;AAAA,UAATa,KAAS,SAATA,KAAS;AACzBb,MAAAA,KAAK,CAACE,SAAN,GAAkBW,KAAlB;AACD,KAdQ;AAeT2C,IAAAA,WAfS,uBAeGxD,KAfH,SAeuB;AAAA,UAAXyD,OAAW,SAAXA,OAAW;AAC9BzD,MAAAA,KAAK,CAACC,MAAN,GAAeD,KAAK,CAACC,MAAN,CAAaW,MAAb,CAAoB,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACkB,GAAN,KAAc0B,OAAlB;AAAA,OAAzB,CAAf;AACD,KAjBQ;AAkBTC,IAAAA,SAlBS,qBAkBC1D,KAlBD,SAkByB;AAAA,UAAfG,WAAe,SAAfA,WAAe;AAChCH,MAAAA,KAAK,CAACG,WAAN,GAAoBA,WAApB;AACD,KApBQ;AAqBTwD,IAAAA,WArBS,uBAqBG3D,KArBH,SAqBwB;AAAA,UAAZI,QAAY,SAAZA,QAAY;AAC/BJ,MAAAA,KAAK,CAACI,QAAN,GAAiBA,QAAjB;AACD;AAvBQ,GArGa;AA8HxBwD,EAAAA,OAAO,EAAE;AACDC,IAAAA,UADC,6BACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvBC,gBAAAA,MAAuB,SAAvBA,MAAuB,EAAfC,WAAe,SAAfA,WAAe;AACxCD,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,WAAR;AAAqB/D,kBAAAA,MAAM,EAAE;AAA7B,iBAAD,CAAN;AACMgE,gBAAAA,MAFkC,GAEzBF,WAAW,CAACG,IAAZ,CAAiBnC,GAFQ;AAAA;AAAA;AAAA,uBAIjBlC,YAAY,CAACsE,KAAb,CAAmBF,MAAnB,CAJiB;;AAAA;AAIhChE,gBAAAA,MAJgC;AAKtC6D,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,WAAR;AAAqB/D,kBAAAA,MAAM,EAANA;AAArB,iBAAD,CAAN;AALsC;AAAA;;AAAA;AAAA;AAAA;AAOtCmE,gBAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAPsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUzC,KAXM;AAYDC,IAAAA,SAZC,oCAYkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvBR,gBAAAA,MAAuB,SAAvBA,MAAuB;AAAXL,gBAAAA,OAAW,UAAXA,OAAW;AACvCK,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,UAAR;AAAoBnD,kBAAAA,KAAK,EAAE;AAA3B,iBAAD,CAAN;AADuC;AAAA;AAAA,uBAGnBhB,YAAY,CAAC0E,OAAb,CAAqBd,OAArB,CAHmB;;AAAA;AAGjC5C,gBAAAA,KAHiC;AAIvCiD,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,UAAR;AAAoBnD,kBAAAA,KAAK,EAALA;AAApB,iBAAD,CAAN;AAJuC;AAAA;;AAAA;AAAA;AAAA;AAMrCuD,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAPqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUxC,KAtBM;AAuBDb,IAAAA,WAvBC,uCAuB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9BM,gBAAAA,MAA8B,UAA9BA,MAA8B,EAAtB9D,KAAsB,UAAtBA,KAAsB;AAAXyD,gBAAAA,OAAW,UAAXA,OAAW;;AAAA,sBAC5CzD,KAAK,CAACC,MAAN,CAAayB,MAAb,IAAuB,CADqB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,uBAGxC7B,YAAY,CAAC2E,MAAb,CAAoBf,OAApB,CAHwC;;AAAA;AAI9CK,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,aAAR;AAAuBP,kBAAAA,OAAO,EAAPA;AAAvB,iBAAD,CAAN;AAJ8C;AAAA;;AAAA;AAAA;AAAA;AAM9CW,gBAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAN8C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASjD,KAhCM;AAiCDI,IAAAA,SAjCC,qCAiCuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5CX,gBAAAA,MAA4C,UAA5CA,MAA4C,EAApCY,QAAoC,UAApCA,QAAoC,EAA1BX,WAA0B,UAA1BA,WAA0B;AAATlD,gBAAAA,KAAS,UAATA,KAAS;AACtD8D,gBAAAA,SADsD,GAC1CZ,WAAW,CAACY,SAD8B;AAEtDV,gBAAAA,MAFsD,GAE7CF,WAAW,CAACG,IAAZ,CAAiBnC,GAF4B,EAG5D;;AACA,oBAAIkC,MAAM,KAAKU,SAAS,CAAC5C,GAArB,IAA4B,CAAClB,KAAK,CAACkB,GAAvC,EAA4C;AAC1ClB,kBAAAA,KAAK,CAACe,OAAN,CAAcuB,IAAd,CAAmBwB,SAAnB;AACD;;AAN2D;AAAA;AAAA,uBAQjC9E,YAAY,CAAC+E,IAAb,CAAkB/D,KAAlB,CARiC;;AAAA;AAQpDgE,gBAAAA,UARoD;;AAAA,qBAStDhE,KAAK,CAACkB,GATgD;AAAA;AAAA;AAAA;;AAUxD+B,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,UAAR;AAAoBnD,kBAAAA,KAAK,EAAEgE;AAA3B,iBAAD,CAAN;AAVwD;AAAA;;AAAA;AAYxDT,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAZwD;AAAA,uBAalDK,QAAQ,CAAC;AAAEV,kBAAAA,IAAI,EAAE;AAAR,iBAAD,CAb0C;;AAAA;AAAA,kDAenDa,UAAU,CAAC9C,GAfwC;;AAAA;AAAA;AAAA;AAiB1DqC,gBAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AAjB0D;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoB7D;AArDM;AA9He,CAAnB","sourcesContent":["import { boardService } from '@/services/board.service.js'\n\nimport _ from 'lodash'\n\nexport const boardStore = {\n  state: {\n    boards: [],\n    currBoard: null,\n    searchBoard: null,\n    filterBy: { status: 'All', priority: 'All', person: 'All', searchTerm: '' },\n    darkMode:false,\n    displayMode: 'Board'\n    \n  },\n  getters: {\n    displayMode(state) {\n      return state.displayMode\n    },\n    boards(state) {\n      if (!state.searchBoard) return state.boards\n      return state.boards.filter(board =>\n        board.name.toLowerCase().includes(state.searchBoard.toLowerCase())\n      )\n    },\n    board(state) {\n      const filterBy = state.filterBy\n      let filteredBoard = JSON.parse(JSON.stringify(state.currBoard))\n      if (filterBy.status !== 'All') {\n        filteredBoard.groups.filter(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.status.txt === filterBy.status\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.priority !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.priority.txt === filterBy.priority\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.person !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            if (task.members.some(member => member._id === filterBy.person)) {\n              return task\n            }\n          })\n        })\n      }\n      if (filterBy.searchTerm !== '') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.txt\n              .toLowerCase()\n              .includes(filterBy.searchTerm.toLowerCase())\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      return filteredBoard\n    },\n    defaultBoardId(state) {\n      return state.boards[0]._id;\n    },\n    filterBy(state) {\n      return JSON.parse(JSON.stringify(state.filterBy))\n    },\n    boardActivities(state) {\n      return state.currBoard.activities\n    },\n    getDarkModeToggle(state){\n      const isDarkMode = state.darkMode\n      return  {darkMode:isDarkMode   , '':!isDarkMode }\n     \n    },\n    tasksByStatues(state){\n       let statuesMap =state.currBoard.statuses.reduce((acc,status)=>{\n        acc[_.camelCase(status.txt)] = {id:status.id,color:status.color,txt:status.txt,tasks:[]}\n        return acc\n      },{})\n      const boardGroups = state.currBoard.groups\n      boardGroups.forEach(group=>{\n        group.tasks.forEach(task=>{\n         var newStatus = _.camelCase(task.status.txt)\n         for(let key in statuesMap){\n           if(key === newStatus){\n             const taskDetails = {...task,groupName:group.name,groupId:group.id}\n             statuesMap[key].tasks.push(taskDetails)\n           }\n         }\n        })\n      })\n      return statuesMap \n    }\n\n  },\n  mutations: {\n    setDisplayMode(state, {displayMode}) {\n      return state.displayMode = displayMode\n\n    },\n    darkMode(state,{darkMode}){\n      return state.darkMode = darkMode\n    },\n    setBoards(state, { boards }) {\n\n      state.boards = boards\n    },\n    setBoard(state, { board }) {\n      state.currBoard = board\n    },\n    removeBoard(state, { boardId }) {\n      state.boards = state.boards.filter(board => board._id !== boardId)\n    },\n    setSearch(state, { searchBoard }) {\n      state.searchBoard = searchBoard\n    },\n    setFilterBy(state, { filterBy }) {\n      state.filterBy = filterBy\n    }\n  },\n  actions: {\n    async loadBoards({ commit, rootGetters }) {\n      commit({ type: 'setBoards', boards: null })\n      const userId = rootGetters.user._id\n      try {\n        const boards = await boardService.query(userId)\n        commit({ type: 'setBoards', boards })\n      } catch (err) {\n        console.log('ERROR: cant loads boards',err);\n        throw err\n      }\n    },\n    async loadBoard({ commit }, { boardId }) {\n      commit({ type: 'setBoard', board: null })\n      try {\n      const board = await boardService.getById(boardId)\n      commit({ type: 'setBoard', board })\n      } catch (err){\n        console.log('no loaded');\n        console.log('ERROR: cant load board',err);\n        throw err\n      }\n    },\n    async removeBoard({ commit, state }, { boardId }) {\n      if (state.boards.length <= 1) return\n      try {\n        await boardService.remove(boardId)\n        commit({ type: 'removeBoard', boardId })\n      } catch (err) {\n        console.log('ERROR: cant remove board', err)\n        throw err\n      }\n    },\n    async saveBoard({ commit, dispatch, rootGetters }, { board }) {\n      const guestUser = rootGetters.guestUser\n      const userId = rootGetters.user._id\n      //Avoiding guest user duplication in members parameter\n      if (userId !== guestUser._id && !board._id) {\n        board.members.push(guestUser)\n      }\n      try{\n        const savedBoard = await boardService.save(board)\n        if (board._id) {\n          commit({ type: 'setBoard', board: savedBoard })\n        } else {\n          console.log('im in the else')\n          await dispatch({ type: 'loadBoards' })\n        }\n        return savedBoard._id\n      } catch (err){\n        console.log('ERROR: cant save/update board');\n        throw err\n      }\n    }\n  }\n}\n"]}]}