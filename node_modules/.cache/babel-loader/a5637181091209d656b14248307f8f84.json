{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js","mtime":1607362588920},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js"],"names":["userService","localLoggedinUser","sessionStorage","user","JSON","parse","userStore","state","users","loggedInUser","getters","stringify","miniUsers","copiedUsers","map","_id","email","fullName","imgUrl","miniUser","guestUser","isAdmin","mutations","insertUserNotif","notif","notifications","unshift","setUsers","setUser","updateUser","idx","findIndex","currUser","splice","deleteUser","userId","addUser","actions","loadUsers","commit","getUsers","type","console","log","loadUser","getById","removeUser","remove","save","savedUser","login","context","userCred","guestCred","password","response","status","logout","dispatch","signup","sendNotif"],"mappings":"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","sourcesContent":["import { userService } from '@/services/user.service.js'\n\nvar localLoggedinUser = null\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user)\n\nexport const userStore = {\n  state: {\n    users: [],\n    loggedInUser: localLoggedinUser\n  },\n  getters: {\n    users(state) {\n      return JSON.parse(JSON.stringify(state.users))\n    },\n    user(state) {\n      return JSON.parse(JSON.stringify(state.loggedInUser))\n    },\n    miniUsers(state) {\n      let copiedUsers = JSON.parse(JSON.stringify(state.users)).map(user => {\n        return {\n          _id: user._id,\n          email: user.email,\n          fullName: user.fullName,\n          imgUrl: user.imgUrl\n        }\n      })\n      return copiedUsers\n    },\n    miniUser(state) {\n      let user = JSON.parse(JSON.stringify(state.loggedInUser))\n      user = {\n        _id: user._id,\n        email: user.email,\n        fullName: user.fullName,\n        imgUrl: user.imgUrl\n      }\n      return user\n    },\n    guestUser() {\n      return {\n        _id: '5fcd158fc62d98cb13fef265',\n        email: 'guestUser@tasku.com',\n        fullName: 'Guest',\n        isAdmin: false\n      }\n    }\n  },\n  mutations: {\n    insertUserNotif(state, { notif }) {\n      state.loggedInUser.notifications.unshift(notif)\n    },\n    setUsers(state, { users }) {\n      state.users = users\n    },\n\n    setUser(state, { user }) {\n      state.loggedInUser = user\n    },\n    updateUser(state, { user }) {\n      const idx = state.users.findIndex(currUser => currUser._id === user._id)\n      state.users.splice(idx, 1, user)\n      if (state.loggedInUser._id === user._id) state.loggedInUser = user\n    },\n    deleteUser(state, { userId }) {\n      const idx = state.users.findIndex(user => user._id === userId)\n      state.users.splice(idx, 1)\n    },\n    addUser(state, { user }) {\n      state.users.unshift(user)\n    }\n  },\n  actions: {\n    async loadUsers({ commit }) {\n      try {\n        const users = await userService.getUsers()\n        commit({ type: 'setUsers', users })\n      } catch (err) {\n        console.log('ERROR:cant find users')\n        throw err\n      }\n    },\n    async loadUser({ commit }, { userId }) {\n      try {\n        const user = await userService.getById(userId)\n        commit({ type: 'setUser', user })\n      } catch (err) {\n        console.log('ERROR:cant find user')\n        throw err\n      }\n    },\n    async removeUser({ commit }, { userId }) {\n      try {\n        await userService.remove(userId)\n        commit({ type: 'removeUser', userId })\n      } catch (err) {\n        console.log('ERROR: cant remove user')\n        throw err\n      }\n    },\n    async updateUser({ commit }, { user }) {\n      console.log('user store:', user)\n      try {\n        const savedUser = await userService.save(user)\n        commit({ type: 'updateUser', user: savedUser })\n        console.log('user after update:', savedUser)\n        return savedUser\n      } catch (err) {\n        console.log('ERROR:cant updated user!')\n        throw err\n      }\n    },\n    async addUser({ commit }, { user }) {\n      try {\n        const savedUser = await userService.save(user)\n        commit({ type: 'addUser', user: savedUser })\n        return savedUser\n      } catch (err) {\n        console.log('ERROR:cant add user')\n        throw err\n      }\n    },\n    async login(context, { userCred }) {\n      try {\n        if (userCred === 'guest') {\n          const guestCred = {\n            email: 'guestUser@tasku.com',\n            password: 'guestpassword',\n            isAdmin: false\n          }\n          const user = await userService.login(guestCred)\n          context.commit({ type: 'setUser', user })\n          return user\n        } else {\n          const user = await userService.login(userCred)\n          context.commit({ type: 'setUser', user })\n          return user\n        }\n      } catch (err) {\n        console.log('USER STORE ERROR TYPE:', err.response.status)\n        throw err\n      }\n    },\n    async logout(context) {\n      context.dispatch({ type: 'deletePrivateSocket' })\n      try {\n        await userService.logout()\n        context.commit({ type: 'setUsers', users: [] })\n        context.commit({ type: 'setUser', user: null })\n      } catch (err) {\n        console.log('ERROR:cant logout')\n        throw err\n      }\n    },\n    async signup(context, { userCred }) {\n      console.log('store got the user cred', userCred)\n      try {\n        const user = await userService.signup(userCred)\n        context.commit({ type: 'setUser', user })\n        return user\n      } catch (err) {\n        console.log('CANT SIGN UP ')\n        throw err\n      }\n    },\n    // async uploadUserImg(context, { img }) {\n    //   console.log('the image',img, context, 'context')\n    // }\n    async sendNotif(context, { notif }) {\n      console.log('notif in store:', notif)\n      await userService.sendNotif(notif)\n\n      // context.commit({ type: 'setUser', user })\n    }\n  }\n}\n"]}]}