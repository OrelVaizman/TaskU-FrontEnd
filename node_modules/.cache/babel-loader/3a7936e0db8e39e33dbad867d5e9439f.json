{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-preview.vue","mtime":1606840402894},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBwcm9ncmVzc0JhciBmcm9tICdAL2NtcHMvcHJvZ3Jlc3MtYmFyJzsKaW1wb3J0IHRhc2tMaXN0IGZyb20gJy4vdGFzay1saXN0LnZ1ZSc7CmltcG9ydCBwb3B1cE1lbnUgZnJvbSAnLi9wb3B1cC1tZW51JzsKaW1wb3J0IGNvbG9yc01lbnUgZnJvbSAnLi9jb2xvcnMtbWVudSc7IC8vIGltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnQC9zZXJ2aWNlcy9ldmVudC1idXMuc2VydmljZScKCmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2JvYXJkLnNlcnZpY2UnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ2dyb3VwLXByZXZpZXcnLAogIHByb3BzOiB7CiAgICBncm91cDogT2JqZWN0LAogICAgZGVsZXRlR3JvdXA6IEZ1bmN0aW9uCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaXNFeHBhbmRlZDogdHJ1ZSwKICAgICAgZ3JvdXBDb3B5OiBudWxsLAogICAgICBpc0FjdGlvbnNTaG93ZW46IGZhbHNlLAogICAgICBpc0NvbG9yc1Nob3dlbjogZmFsc2UsCiAgICAgIHBvcHVwT3B0aW9uczogW3sKICAgICAgICB0eHQ6ICdFeHBhbmQnLAogICAgICAgIGZ1bmM6IHRoaXMuZXhwYW5kR3JvdXAsCiAgICAgICAgaWNvblN0cjogJ2V4cGFuZC1hbHQnCiAgICAgIH0sIHsKICAgICAgICB0eHQ6ICdOZXcgVGFzaycsCiAgICAgICAgZnVuYzogdGhpcy5hZGROZXdUYXNrLAogICAgICAgIGljb25TdHI6ICdwbHVzJwogICAgICB9LCB7CiAgICAgICAgdHh0OiAnRGVsZXRlJywKICAgICAgICBmdW5jOiB0aGlzLmRlbGV0ZUdyb3VwLAogICAgICAgIGljb25TdHI6ICd0cmFzaCcKICAgICAgfSwgewogICAgICAgIHR4dDogJ0NoYW5nZSBDb2xvcicsCiAgICAgICAgZnVuYzogdGhpcy50b2dnbGVDb2xvcnNNZW51LAogICAgICAgIGljb25TdHI6ICdwYWludC1icnVzaCcKICAgICAgfSwgewogICAgICAgIHR4dDogJ0R1cGxpY2F0ZScsCiAgICAgICAgZnVuYzogdGhpcy5kdXBsaWNhdGVHcm91cCwKICAgICAgICBpY29uU3RyOiAnY29weScKICAgICAgfV0KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBjbG9zZVBvcFVwczogZnVuY3Rpb24gY2xvc2VQb3BVcHMoKSB7CiAgICAgIHRoaXMuaXNBY3Rpb25zU2hvd2VuID0gZmFsc2U7CiAgICAgIHRoaXMuaXNDb2xvcnNTaG93ZW4gPSBmYWxzZTsKICAgIH0sCiAgICBhZGROZXdUYXNrOiBmdW5jdGlvbiBhZGROZXdUYXNrKCkgewogICAgICB2YXIgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKTsKICAgICAgdGhpcy5ncm91cENvcHkudGFza3MucHVzaChuZXdUYXNrKTsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlR3JvdXAnLCB0aGlzLmdyb3VwQ29weSk7CiAgICB9LAogICAgZm9jdXNHcm91cE5hbWU6IGZ1bmN0aW9uIGZvY3VzR3JvdXBOYW1lKCkgewogICAgICB0aGlzLiRyZWZzLmdyb3VwTmFtZS5mb2N1cygpOwogICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9IGZhbHNlOwogICAgfSwKICAgIGdldFN0eWxlU3RyOiBmdW5jdGlvbiBnZXRTdHlsZVN0cihjb2xvclN0cikgewogICAgICByZXR1cm4gImJhY2tncm91bmRDb2xvcjoiLmNvbmNhdChjb2xvclN0cik7CiAgICB9LAogICAgZHVwbGljYXRlR3JvdXA6IGZ1bmN0aW9uIGR1cGxpY2F0ZUdyb3VwKCkgewogICAgICB0aGlzLiRlbWl0KCdkdXBsaWNhdGVHcm91cCcsIHRoaXMuZ3JvdXBDb3B5KTsKICAgIH0sCiAgICBlbWl0Rm9yY2VSZW5kZXI6IGZ1bmN0aW9uIGVtaXRGb3JjZVJlbmRlcigpIHsKICAgICAgdGhpcy4kZW1pdCgnZW1pdEZvcmNlUmVuZGVyJyk7CiAgICB9LAogICAgdG9nZ2xlQ29sb3JzTWVudTogZnVuY3Rpb24gdG9nZ2xlQ29sb3JzTWVudSgpIHsKICAgICAgdGhpcy5pc0NvbG9yc1Nob3dlbiA9ICF0aGlzLmlzQ29sb3JzU2hvd2VuOwogICAgfSwKICAgIHRvZ2dsZUdyb3VwQWN0aW9uczogZnVuY3Rpb24gdG9nZ2xlR3JvdXBBY3Rpb25zKCkgewogICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9ICF0aGlzLmlzQWN0aW9uc1Nob3dlbjsKICAgIH0sCiAgICBlbWl0RGVsZXRlOiBmdW5jdGlvbiBlbWl0RGVsZXRlKGdyb3VwSWQpIHsKICAgICAgdGhpcy4kZW1pdCgnZGVsZXRlR3JvdXAnLCBncm91cElkKTsKICAgICAgdGhpcy5pc0V4cGFuZGVkID0gZmFsc2U7CiAgICB9LAogICAgdG9nZ2xlR3JvdXA6IGZ1bmN0aW9uIHRvZ2dsZUdyb3VwKCkgewogICAgICB0aGlzLmlzRXhwYW5kZWQgPSAhdGhpcy5pc0V4cGFuZGVkOwogICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9IGZhbHNlOwogICAgfSwKICAgIGV4cGFuZEdyb3VwOiBmdW5jdGlvbiBleHBhbmRHcm91cCgpIHsKICAgICAgdGhpcy5pc0V4cGFuZGVkID0gdHJ1ZTsKICAgICAgdGhpcy5pc0FjdGlvbnNTaG93ZW4gPSBmYWxzZTsKICAgIH0sCiAgICBzZXRHcm91cENvbG9yOiBmdW5jdGlvbiBzZXRHcm91cENvbG9yKGNvbG9yKSB7CiAgICAgIHRoaXMuaXNBY3Rpb25zU2hvd2VuID0gZmFsc2U7CiAgICAgIHRoaXMuZ3JvdXBDb3B5LmNvbG9yID0gY29sb3I7CiAgICAgIHRoaXMuaXNDb2xvcnNTaG93ZW4gPSBmYWxzZTsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlR3JvdXAnLCB0aGlzLmdyb3VwQ29weSk7CiAgICB9LAogICAgdXBkYXRlR3JvdXBOYW1lOiBmdW5jdGlvbiB1cGRhdGVHcm91cE5hbWUoZXYpIHsKICAgICAgdGhpcy5ncm91cENvcHkubmFtZSA9IGV2LnRhcmdldC5pbm5lclRleHQ7CiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZUdyb3VwJywgdGhpcy5ncm91cENvcHkpOwogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHByb2dyZXNzQmFyRGF0YTogZnVuY3Rpb24gcHJvZ3Jlc3NCYXJEYXRhKCkgewogICAgICB2YXIgc3RhdHVzUGVyY2VudGFnZU1hcCA9IHRoaXMuZ3JvdXAudGFza3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHRhc2spIHsKICAgICAgICBpZiAoIWFjY1t0YXNrLnN0YXR1cy50eHRdKSBhY2NbdGFzay5zdGF0dXMudHh0XSA9IHsKICAgICAgICAgIGNvdW50OiAwLAogICAgICAgICAgc3RhdHVzQ29sb3I6IHRhc2suc3RhdHVzLmNvbG9yCiAgICAgICAgfTsKICAgICAgICBhY2NbdGFzay5zdGF0dXMudHh0XS5jb3VudCsrOwogICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIHt9KTsKICAgICAgdmFyIHRvdGFsU3VtID0gdGhpcy5ncm91cC50YXNrcy5sZW5ndGg7CgogICAgICBmb3IgKHZhciBrZXkgaW4gc3RhdHVzUGVyY2VudGFnZU1hcCkgewogICAgICAgIHN0YXR1c1BlcmNlbnRhZ2VNYXBba2V5XS5mcmFjdGlvbiA9ICIiLmNvbmNhdChzdGF0dXNQZXJjZW50YWdlTWFwW2tleV0uY291bnQsICIgLyAiKS5jb25jYXQodG90YWxTdW0pOwogICAgICAgIHN0YXR1c1BlcmNlbnRhZ2VNYXBba2V5XS5wZXJjZW50YWdlID0gc3RhdHVzUGVyY2VudGFnZU1hcFtrZXldLmNvdW50IC8gdG90YWxTdW0gKiAxMDA7CiAgICAgICAgc3RhdHVzUGVyY2VudGFnZU1hcFtrZXldLm5hbWUgPSBrZXk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzdGF0dXNQZXJjZW50YWdlTWFwOwogICAgfSwKICAgIHByb2dyZXNzQmFyUHJpbzogZnVuY3Rpb24gcHJvZ3Jlc3NCYXJQcmlvKCkgewogICAgICB2YXIgcHJpb3JpdHlQZXJjZW50YWdlTWFwID0gdGhpcy5ncm91cC50YXNrcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdGFzaykgewogICAgICAgIGlmICghYWNjW3Rhc2sucHJpb3JpdHkudHh0XSkgYWNjW3Rhc2sucHJpb3JpdHkudHh0XSA9IHsKICAgICAgICAgIGNvdW50OiAwLAogICAgICAgICAgc3RhdHVzQ29sb3I6IHRhc2sucHJpb3JpdHkuY29sb3IKICAgICAgICB9OwogICAgICAgIGFjY1t0YXNrLnByaW9yaXR5LnR4dF0uY291bnQrKzsKICAgICAgICByZXR1cm4gYWNjOwogICAgICB9LCB7fSk7CiAgICAgIHZhciB0b3RhbFN1bSA9IHRoaXMuZ3JvdXAudGFza3MubGVuZ3RoOwoKICAgICAgZm9yICh2YXIga2V5IGluIHByaW9yaXR5UGVyY2VudGFnZU1hcCkgewogICAgICAgIHByaW9yaXR5UGVyY2VudGFnZU1hcFtrZXldLmZyYWN0aW9uID0gIiIuY29uY2F0KHByaW9yaXR5UGVyY2VudGFnZU1hcFtrZXldLmNvdW50LCAiIC8gIikuY29uY2F0KHRvdGFsU3VtKTsKICAgICAgICBwcmlvcml0eVBlcmNlbnRhZ2VNYXBba2V5XS5wZXJjZW50YWdlID0gcHJpb3JpdHlQZXJjZW50YWdlTWFwW2tleV0uY291bnQgLyB0b3RhbFN1bSAqIDEwMDsKICAgICAgICBwcmlvcml0eVBlcmNlbnRhZ2VNYXBba2V5XS5uYW1lID0ga2V5OwogICAgICB9CgogICAgICByZXR1cm4gcHJpb3JpdHlQZXJjZW50YWdlTWFwOwogICAgfSwKICAgIHRhc2tzQ291bnQ6IGZ1bmN0aW9uIHRhc2tzQ291bnQoKSB7CiAgICAgIHJldHVybiAiIi5jb25jYXQodGhpcy5ncm91cENvcHkudGFza3MubGVuZ3RoLCAiIGl0ZW1zIik7CiAgICB9LAogICAgZXhwYW5kZWQ6IGZ1bmN0aW9uIGV4cGFuZGVkKCkgewogICAgICByZXR1cm4gdGhpcy5pc0V4cGFuZGVkID8gdHJ1ZSA6IGZhbHNlOwogICAgfSwKICAgIGdyb3VwQ29sb3I6IGZ1bmN0aW9uIGdyb3VwQ29sb3IoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgY29sb3I6IHRoaXMuZ3JvdXBDb3B5LmNvbG9yCiAgICAgIH07CiAgICB9LAogICAgYm9hcmQ6IGZ1bmN0aW9uIGJvYXJkKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5ib2FyZDsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdyb3VwQ29weSA9IHRoaXMuZ3JvdXA7CiAgfSwKICBjb21wb25lbnRzOiB7CiAgICB0YXNrTGlzdDogdGFza0xpc3QsCiAgICBjb2xvcnNNZW51OiBjb2xvcnNNZW51LAogICAgcHJvZ3Jlc3NCYXI6IHByb2dyZXNzQmFyLAogICAgcG9wdXBNZW51OiBwb3B1cE1lbnUKICB9Cn07"},{"version":3,"sources":["group-preview.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <section class=\"group-preview-container relative\">\n        <div class=\"expand-btn-container\">\n            <button\n                :style=\"getStyleStr(group.color)\"\n                class=\"expand-btn\"\n                @click.stop=\"toggleGroupActions\"\n            >\n                <i class=\"expand-arrow fas fa-arrow-down\"></i>\n            </button>\n        </div>\n        <li\n            :class=\"{\n                'group-preview width100 flex space-between align-center ': true,\n                expanded: expanded,\n            }\"\n            @click=\"expandGroup\"\n        >\n            <h4\n                class=\"group-headers group-name editable\"\n                ref=\"groupName\"\n                :style=\"groupColor\"\n                @blur=\"updateGroupName\"\n                @keydown.enter=\"updateGroupName\"\n                contenteditable\n            >\n                {{ groupCopy.name }}\n            </h4>\n\n            <popup-menu\n                v-if=\"isActionsShowen\"\n                @closePopup=\"toggleGroupActions\"\n                :menuItems=\"popupOptions\"\n            />\n            <colors-menu v-if=\"isColorsShowen\" @setColor=\"setGroupColor\" />\n            <span v-if=\"!isExpanded\">{{ tasksCount }}</span>\n            <div v-if=\"isExpanded\" class=\"flex space-between align-center\">\n                <div class=\"group-headers headers flex\">\n                    <h4 class=\"list-title\">Members</h4>\n                    <h4 class=\"list-title\">Status</h4>\n                    <h4 class=\"list-title\">Priority</h4>\n                    <h4 class=\"list-title date\">Due Date</h4>\n                </div>\n            </div>\n            <task-list\n                :taskColor=\"group.color\"\n                v-if=\"isExpanded && groupCopy.tasks && groupCopy.id\"\n                :tasks=\"groupCopy.tasks\"\n                :groupId=\"groupCopy.id\"\n                @forceRender=\"emitForceRender\"\n            />\n            <div class=\"progress-bar-section flex\">\n                <!-- <h2> -->\n                <!-- {{progressBarPrio}} -->\n\n                <!-- </h2>  -->\n                <progress-bar :progressBarData=\"progressBarData\" />\n\n                <progress-bar :progressBarData=\"progressBarPrio\" />\n            </div>\n        </li>\n        <div\n            class=\"back-drop-layer\"\n            v-if=\"isActionsShowen || isColorsShowen\"\n            @click.stop=\"closePopUps\"\n        ></div>\n    </section>\n</template>\n\n<script>\nimport progressBar from '@/cmps/progress-bar'\nimport taskList from './task-list.vue'\nimport popupMenu from './popup-menu'\nimport colorsMenu from './colors-menu'\n// import { eventBus } from '@/services/event-bus.service'\nimport { boardService } from '../services/board.service'\n\nexport default {\n    name: 'group-preview',\n    props: {\n        group: Object,\n        deleteGroup: Function,\n    },\n    data() {\n        return {\n            isExpanded: true,\n            groupCopy: null,\n            isActionsShowen: false,\n            isColorsShowen: false,\n            popupOptions: [\n                {\n                    txt: 'Expand',\n                    func: this.expandGroup,\n                    iconStr: 'expand-alt',\n                },\n                {\n                    txt: 'New Task',\n                    func: this.addNewTask,\n                    iconStr: 'plus',\n                },\n                {\n                    txt: 'Delete',\n                    func: this.deleteGroup,\n                    iconStr: 'trash',\n                },\n                {\n                    txt: 'Change Color',\n                    func: this.toggleColorsMenu,\n                    iconStr: 'paint-brush',\n                },\n                {\n                    txt: 'Duplicate',\n                    func: this.duplicateGroup,\n                    iconStr: 'copy',\n                },\n            ],\n        }\n    },\n    methods: {\n        closePopUps() {\n            this.isActionsShowen = false\n            this.isColorsShowen = false\n        },\n        addNewTask() {\n            const newTask = boardService.getEmptyTask()\n            this.groupCopy.tasks.push(newTask)\n            this.$emit('updateGroup', this.groupCopy)\n        },\n        focusGroupName() {\n            this.$refs.groupName.focus()\n            this.isActionsShowen = false\n        },\n        getStyleStr(colorStr) {\n            return `backgroundColor:${colorStr}`\n        },\n        duplicateGroup() {\n            this.$emit('duplicateGroup', this.groupCopy)\n        },\n        emitForceRender() {\n            this.$emit('emitForceRender')\n        },\n        toggleColorsMenu() {\n            this.isColorsShowen = !this.isColorsShowen\n        },\n        toggleGroupActions() {\n            this.isActionsShowen = !this.isActionsShowen\n        },\n        emitDelete(groupId) {\n            this.$emit('deleteGroup', groupId)\n            this.isExpanded = false\n        },\n        toggleGroup() {\n            this.isExpanded = !this.isExpanded\n            this.isActionsShowen = false\n        },\n        expandGroup() {\n            this.isExpanded = true\n            this.isActionsShowen = false\n        },\n        setGroupColor(color) {\n            this.isActionsShowen = false\n            this.groupCopy.color = color\n            this.isColorsShowen = false\n            this.$emit('updateGroup', this.groupCopy)\n        },\n        updateGroupName(ev) {\n            this.groupCopy.name = ev.target.innerText\n            this.$emit('updateGroup', this.groupCopy)\n        },\n    },\n    computed: {\n        progressBarData() {\n            let statusPercentageMap = this.group.tasks.reduce((acc, task) => {\n                if (!acc[task.status.txt])\n                    acc[task.status.txt] = {\n                        count: 0,\n                        statusColor: task.status.color,\n                    }\n                acc[task.status.txt].count++\n                return acc\n            }, {})\n            const totalSum = this.group.tasks.length\n            for (let key in statusPercentageMap) {\n                statusPercentageMap[\n                    key\n                ].fraction = `${statusPercentageMap[key].count} / ${totalSum}`\n                statusPercentageMap[key].percentage =\n                    (statusPercentageMap[key].count / totalSum) * 100\n                statusPercentageMap[key].name = key\n            }\n            return statusPercentageMap\n        },\n        progressBarPrio() {\n            let priorityPercentageMap = this.group.tasks.reduce((acc, task) => {\n                if (!acc[task.priority.txt])\n                    acc[task.priority.txt] = {\n                        count: 0,\n                        statusColor: task.priority.color,\n                    }\n                acc[task.priority.txt].count++\n                return acc\n            }, {})\n            const totalSum = this.group.tasks.length\n            for (let key in priorityPercentageMap) {\n                priorityPercentageMap[\n                    key\n                ].fraction = `${priorityPercentageMap[key].count} / ${totalSum}`\n                priorityPercentageMap[key].percentage =\n                    (priorityPercentageMap[key].count / totalSum) * 100\n                priorityPercentageMap[key].name = key\n            }\n            return priorityPercentageMap\n        },\n        tasksCount() {\n            return `${this.groupCopy.tasks.length} items`\n        },\n        expanded() {\n            return this.isExpanded ? true : false\n        },\n        groupColor() {\n            return { color: this.groupCopy.color }\n        },\n        board() {\n            return this.$store.getters.board\n        },\n    },\n    created() {\n        this.groupCopy = this.group\n    },\n    components: {\n        taskList,\n        colorsMenu,\n        progressBar,\n        popupMenu,\n    },\n}\n</script>\n"],"sourceRoot":"src/cmps"}]}