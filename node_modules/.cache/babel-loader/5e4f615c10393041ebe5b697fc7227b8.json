{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","mtime":1609778254085},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js"],"names":["boardService","_","boardStore","state","boards","currBoard","searchBoard","filterBy","status","priority","person","searchTerm","darkMode","displayMode","getters","filteredBoard","filter","board","name","toLowerCase","includes","JSON","parse","stringify","groups","group","tasks","task","txt","length","forEach","members","some","member","_id","defaultBoardId","boardActivities","activities","getDarkModeToggle","isDarkMode","tasksByStatues","statuesMap","statuses","reduce","acc","camelCase","id","color","boardGroups","newStatus","key","taskDetails","groupName","groupId","push","statusArray","Object","values","mutations","setBoardById","boardIdx","findIndex","splice","setDisplayMode","setBoards","setBoard","removeBoard","boardId","setSearch","setFilterBy","actions","loadBoards","commit","rootGetters","userId","user","query","type","console","log","loadBoard","getById","remove","saveBoard","dispatch","guestUser","save","savedBoard"],"mappings":"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","sourcesContent":["import { boardService } from '@/services/board.service.js'\nimport _ from 'lodash'\n\nexport const boardStore = {\n  state: {\n    boards: [],\n    currBoard: null,\n    searchBoard: null,\n    filterBy: { status: 'All', priority: 'All', person: 'All', searchTerm: '' },\n    darkMode: false,\n    displayMode: 'Board'\n  },\n  getters: {\n    displayMode(state) {\n      return state.displayMode\n    },\n    boards(state) {\n      if (!state.searchBoard) return state.boards\n      if (state.searchBoard && state.boards !== null) {\n        const filteredBoard = state.boards.filter(board => {\n          return board.name\n            .toLowerCase()\n            .includes(state.searchBoard.toLowerCase())\n        })\n        return filteredBoard\n      }\n    },\n    board(state) {\n      const filterBy = state.filterBy\n      let filteredBoard = JSON.parse(JSON.stringify(state.currBoard))\n      if (filterBy.status !== 'All') {\n        filteredBoard.groups.filter(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.status.txt === filterBy.status\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.priority !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.priority.txt === filterBy.priority\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.person !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            if (task.members.some(member => member._id === filterBy.person)) {\n              return task\n            }\n          })\n        })\n      }\n      if (filterBy.searchTerm !== '') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.txt\n              .toLowerCase()\n              .includes(filterBy.searchTerm.toLowerCase())\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      return filteredBoard\n    },\n    defaultBoardId(state) {\n      return state.boards[0]._id\n    },\n    filterBy(state) {\n      return JSON.parse(JSON.stringify(state.filterBy))\n    },\n    boardActivities(state) {\n      return state.currBoard.activities \n    },\n    getDarkModeToggle(state) {\n      const isDarkMode = state.darkMode\n      return { darkMode: isDarkMode, '': !isDarkMode }\n    },\n    tasksByStatues(state) {\n      let statuesMap = state.currBoard.statuses.reduce((acc, status) => {\n        acc[_.camelCase(status.txt)] = {\n          id: status.id,\n          color: status.color,\n          txt: status.txt,\n          tasks: []\n        }\n        return acc\n      }, {})\n      const boardGroups = state.currBoard.groups\n      boardGroups.forEach(group => {\n        group.tasks.forEach(task => {\n          var newStatus = _.camelCase(task.status.txt)\n          for (let key in statuesMap) {\n            if (key === newStatus) {\n              const taskDetails = {\n                ...task,\n                groupName: group.name,\n                groupId: group.id\n              }\n              statuesMap[key].tasks.push(taskDetails)\n            }\n          }\n        })\n      })\n      const statusArray = Object.values(statuesMap)\n      return statusArray\n    }\n  },\n  mutations: {\n    setBoardById(state, { board }) {\n      const boardIdx = state.boards.findIndex(\n        currBoard => currBoard._id === board._id\n      )\n      state.boards.splice(boardIdx, 1, board)\n      if (board._id === state.currBoard._id) {\n        state.currBoard = board\n      }\n    },\n    setDisplayMode(state, { displayMode }) {\n      state.displayMode = displayMode\n    },\n    darkMode(state, { darkMode }) {\n      state.darkMode = darkMode\n    },\n    setBoards(state, { boards }) {\n      state.boards = boards\n    },\n    setBoard(state, { board }) {\n      state.currBoard = board\n    },\n    removeBoard(state, { boardId }) {\n      state.boards = state.boards.filter(board => board._id !== boardId)\n    },\n    setSearch(state, { searchBoard }) {\n      state.searchBoard = searchBoard\n    },\n    setFilterBy(state, { filterBy }) {\n      state.filterBy = filterBy\n    }\n  },\n  actions: {\n    async loadBoards({ commit, rootGetters }) {\n      const userId = rootGetters.user._id\n      try {\n        const boards = await boardService.query(userId)\n        commit({ type: 'setBoards', boards })\n      } catch (err) {\n        console.log('ERROR: cant loads boards', err)\n        throw err\n      }\n    },\n    async loadBoard({ commit }, { boardId }) {\n      commit({ type: 'setBoard', board: null })\n      console.log('board: set board')\n      try {\n        const board = await boardService.getById(boardId)\n        commit({ type: 'setBoard', board })\n      } catch (err) {\n        console.log('no loaded')\n        console.log('ERROR: cant load board', err)\n        throw err\n      }\n    },\n    async removeBoard({ commit, state }, { boardId }) {\n      if (state.boards.length <= 1) return\n      try {\n        await boardService.remove(boardId)\n        commit({ type: 'removeBoard', boardId })\n      } catch (err) {\n        console.log('ERROR: cant remove board', err)\n        throw err\n      }\n    },\n    async saveBoard({ commit, dispatch, rootGetters }, { board }) {\n      const guestUser = rootGetters.guestUser\n      const userId = rootGetters.user._id\n      //Avoiding guest user duplication in members parameter\n      if (userId !== guestUser._id && !board._id) {\n        board.members.push(guestUser)\n      }\n      try {\n        console.log('saving!!!!')\n        const savedBoard = await boardService.save(board)\n        if (board._id) {\n          commit({ type: 'setBoard', board: savedBoard })\n        } else {\n          await dispatch({ type: 'loadBoards' })\n        }\n        return savedBoard._id\n      } catch (err) {\n        console.log('ERROR: cant save/update board')\n        throw err\n      }\n    }\n  }\n}\n"]}]}