{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js","mtime":1607212899174},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js"],"names":["userService","localLoggedinUser","sessionStorage","user","JSON","parse","userStore","state","users","loggedInUser","getters","stringify","guestUser","_id","email","fullName","isAdmin","mutations","insertUserNotif","notif","notifications","unshift","console","log","setUsers","setUser","updateUser","idx","findIndex","splice","deleteUser","userId","addUser","actions","loadUsers","commit","getUsers","type","loadUser","getById","removeUser","remove","save","savedUser","login","context","userCred","guestCred","password","response","status","logout","dispatch","signup","sendNotif"],"mappings":"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","sourcesContent":["import { userService } from '@/services/user.service.js'\n\nvar localLoggedinUser = null\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user)\n\nexport const userStore = {\n  state: {\n    users: [],\n    loggedInUser: localLoggedinUser\n  },\n  getters: {\n    users(state) {\n      return JSON.parse(JSON.stringify(state.users))\n    },\n    user(state) {\n      return JSON.parse(JSON.stringify(state.loggedInUser))\n    },\n    guestUser() {\n      return {\n        _id: '5fcc0bad7f43ed9b6a6da85a',\n        email: 'guestUser@tasku.com',\n        fullName: 'Guest',\n        isAdmin: false\n      }\n    }\n  },\n  mutations: {\n    insertUserNotif(state, { notif }) {\n      state.loggedInUser.notifications.unshift(notif)\n      console.log('Notif got here', notif);\n    },\n    setUsers(state, { users }) {\n      state.users = users\n    },\n    setUser(state, { user }) {\n      console.log('user:', user)\n      state.loggedInUser = user\n    },\n    updateUser(state, { user }) {\n      const idx = state.users.findIndex(\n        loggedInUser => user._id === loggedInUser._id\n      )\n      state.users.splice(idx, 1, user)\n    },\n    deleteUser(state, { userId }) {\n      const idx = state.users.findIndex(user => user._id === userId)\n      state.users.splice(idx, 1)\n    },\n    addUser(state, { user }) {\n      state.users.unshift(user)\n    }\n  },\n  actions: {\n    async loadUsers({ commit }) {\n      try {\n        const users = await userService.getUsers()\n        commit({ type: 'setUsers', users })\n      } catch (err) {\n        console.log('ERROR:cant find users')\n        throw err\n      }\n    },\n    async loadUser({ commit }, { userId }) {\n      console.log('userId:', userId)\n      try {\n        const user = await userService.getById(userId)\n        console.log('try')\n        commit({ type: 'setUser', user })\n      } catch (err) {\n        console.log('ERROR:cant find user')\n        throw err\n      }\n    },\n    async removeUser({ commit }, { userId }) {\n      try {\n        await userService.remove(userId)\n        commit({ type: 'removeUser', userId })\n      } catch (err) {\n        console.log('ERROR: cant remove user')\n        throw err\n      }\n    },\n    async updateUser({ commit }, { user }) {\n      console.log('user store:', user)\n      try {\n        const savedUser = await userService.save(user)\n        commit({ type: 'updateUser', user: savedUser })\n        return savedUser\n      } catch (err) {\n        console.log('ERROR:cant updated user!')\n        throw err\n      }\n    },\n    async addUser({ commit }, { user }) {\n      try {\n        const savedUser = await userService.save(user)\n        commit({ type: 'addUser', user: savedUser })\n        return savedUser\n      } catch (err) {\n        console.log('ERROR:cant add user')\n        throw err\n      }\n    },\n    async login(context, { userCred }) {\n      try {\n        if (userCred === 'guest') {\n          const guestCred = {\n            email: 'guestUser@tasku.com',\n            password: 'guestpassword',\n            isAdmin: false\n          }\n          const user = await userService.login(guestCred)\n          context.commit({ type: 'setUser', user })\n          return user\n        } else {\n          const user = await userService.login(userCred)\n          context.commit({ type: 'setUser', user })\n          return user\n        }\n      } catch (err) {\n        console.log('USER STORE ERROR TYPE:', err.response.status)\n        throw err\n      }\n    },\n    async logout(context) {\n      context.dispatch({type:'deletePrivateSocket'})\n      try {\n        await userService.logout()\n        context.commit({ type: 'setUsers', users: [] })\n        context.commit({ type: 'setUser', user: null })\n      } catch (err) {\n        console.log('ERROR:cant logout')\n        throw err\n      }\n    },\n    async signup(context, { userCred }) {\n      console.log('store got the user cred', userCred)\n      try {\n        const user = await userService.signup(userCred)\n        context.commit({ type: 'setUser', user })\n        return user\n      } catch (err) {\n        console.log('CANT SIGN UP ')\n        throw err\n      }\n    },\n    // async uploadUserImg(context, { img }) {\n    //   console.log('the image',img, context, 'context')\n    // }\n    async sendNotif(context, { notif }) {\n      console.log('notif in store:', notif)\n      await userService.sendNotif(notif)\n\n      // context.commit({ type: 'setUser', user })\n    }\n  }\n}\n"]}]}