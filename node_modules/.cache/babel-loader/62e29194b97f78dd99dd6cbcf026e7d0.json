{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","mtime":1607329724851},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js"],"names":["boardService","_","boardStore","state","boards","currBoard","searchBoard","filterBy","status","priority","person","searchTerm","darkMode","displayMode","getters","console","log","filteredBoard","filter","board","name","toLowerCase","includes","JSON","parse","stringify","groups","group","tasks","task","txt","length","forEach","members","some","member","_id","defaultBoardId","boardActivities","activities","getDarkModeToggle","isDarkMode","tasksByStatues","statuesMap","statuses","reduce","acc","camelCase","id","color","boardGroups","newStatus","key","taskDetails","groupName","groupId","push","statusArray","Object","values","mutations","setBoardById","boardIdx","findIndex","splice","setDisplayMode","setBoards","miniBoards","map","setBoard","removeBoard","boardId","setSearch","setFilterBy","actions","loadBoards","commit","rootGetters","userId","user","query","type","loadBoard","getById","remove","saveBoard","dispatch","guestUser","save","savedBoard"],"mappings":"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","sourcesContent":["import { boardService } from '@/services/board.service.js'\nimport _ from 'lodash'\n\nexport const boardStore = {\n  state: {\n    boards: [],\n    currBoard: null,\n    searchBoard: null,\n    filterBy: { status: 'All', priority: 'All', person: 'All', searchTerm: '' },\n    darkMode: false,\n    displayMode: 'Board'\n  },\n  getters: {\n    displayMode(state) {\n      return state.displayMode\n    },\n    boards(state) {\n      if (!state.searchBoard) return state.boards\n      console.log('state.searchBoard:', state.searchBoard)\n      if (state.searchBoard && state.boards !== null) {\n        console.log(state.boards)\n        const filteredBoard = state.boards.filter(board => {\n          return board.name\n            .toLowerCase()\n            .includes(state.searchBoard.toLowerCase())\n        })\n        return filteredBoard\n      }\n    },\n    board(state) {\n      const filterBy = state.filterBy\n      let filteredBoard = JSON.parse(JSON.stringify(state.currBoard))\n      if (filterBy.status !== 'All') {\n        filteredBoard.groups.filter(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.status.txt === filterBy.status\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.priority !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.priority.txt === filterBy.priority\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.person !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            if (task.members.some(member => member._id === filterBy.person)) {\n              return task\n            }\n          })\n        })\n      }\n      if (filterBy.searchTerm !== '') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.txt\n              .toLowerCase()\n              .includes(filterBy.searchTerm.toLowerCase())\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      return filteredBoard\n    },\n    defaultBoardId(state) {\n      return state.boards[0]._id\n    },\n    filterBy(state) {\n      return JSON.parse(JSON.stringify(state.filterBy))\n    },\n    boardActivities(state) {\n      return state.currBoard.activities\n    },\n    getDarkModeToggle(state) {\n      const isDarkMode = state.darkMode\n      return { darkMode: isDarkMode, '': !isDarkMode }\n    },\n    tasksByStatues(state) {\n      let statuesMap = state.currBoard.statuses.reduce((acc, status) => {\n        acc[_.camelCase(status.txt)] = {\n          id: status.id,\n          color: status.color,\n          txt: status.txt,\n          tasks: []\n        }\n        return acc\n      }, {})\n      const boardGroups = state.currBoard.groups\n      boardGroups.forEach(group => {\n        group.tasks.forEach(task => {\n          var newStatus = _.camelCase(task.status.txt)\n          for (let key in statuesMap) {\n            if (key === newStatus) {\n              const taskDetails = {\n                ...task,\n                groupName: group.name,\n                groupId: group.id\n              }\n              statuesMap[key].tasks.push(taskDetails)\n            }\n          }\n        })\n      })\n      const statusArray = Object.values(statuesMap)\n      return statusArray\n    }\n  },\n  mutations: {\n    setBoardById(state, { board }) {\n      const boardIdx = state.boards.findIndex(\n        currBoard => currBoard._id === board._id\n      )\n      state.boards.splice(boardIdx, 1, board)\n      if (board._id === state.currBoard._id) {\n        console.log('replacing curr board')\n        state.currBoard = board\n      }\n    },\n    setDisplayMode(state, { displayMode }) {\n      state.displayMode = displayMode\n    },\n    darkMode(state, { darkMode }) {\n      state.darkMode = darkMode\n    },\n    setBoards(state, { boards }) {\n           const miniBoards = boards.map(board => {\n        board = { _id: board._id, name: board.name }\n        return board\n      })\n      state.boards = miniBoards\n    },\n    setBoard(state, { board }) {\n      state.currBoard = board\n    },\n    removeBoard(state, { boardId }) {\n      state.boards = state.boards.filter(board => board._id !== boardId)\n    },\n    setSearch(state, { searchBoard }) {\n      state.searchBoard = searchBoard\n      console.log('state.searchBoard mutation:', state.searchBoard)\n    },\n    setFilterBy(state, { filterBy }) {\n      state.filterBy = filterBy\n    }\n  },\n  actions: {\n    async loadBoards({ commit, rootGetters }) {\n      const userId = rootGetters.user._id\n      try {\n        const boards = await boardService.query(userId)\n        commit({ type: 'setBoards', boards })\n      } catch (err) {\n        console.log('ERROR: cant loads boards', err)\n        throw err\n      }\n    },\n    async loadBoard({ commit }, { boardId }) {\n      commit({ type: 'setBoard', board: null })\n      console.log('board: set board')\n      try {\n        const board = await boardService.getById(boardId)\n        commit({ type: 'setBoard', board })\n      } catch (err) {\n        console.log('no loaded')\n        console.log('ERROR: cant load board', err)\n        throw err\n      }\n    },\n    async removeBoard({ commit, state }, { boardId }) {\n      if (state.boards.length <= 1) return\n      try {\n        await boardService.remove(boardId)\n        commit({ type: 'removeBoard', boardId })\n      } catch (err) {\n        console.log('ERROR: cant remove board', err)\n        throw err\n      }\n    },\n    async saveBoard({ commit, dispatch, rootGetters }, { board }) {\n      const guestUser = rootGetters.guestUser\n      const userId = rootGetters.user._id\n      //Avoiding guest user duplication in members parameter\n      if (userId !== guestUser._id && !board._id) {\n        board.members.push(guestUser)\n      }\n      try {\n        const savedBoard = await boardService.save(board)\n        if (board._id) {\n          commit({ type: 'setBoard', board: savedBoard })\n        } else {\n          console.log('im in the else')\n          await dispatch({ type: 'loadBoards' })\n        }\n        return savedBoard._id\n      } catch (err) {\n        console.log('ERROR: cant save/update board')\n        throw err\n      }\n    }\n  }\n}\n"]}]}