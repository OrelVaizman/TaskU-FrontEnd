{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue","mtime":1606595400643},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGFkZE1lbWJlcnMgZnJvbSAnQC9jbXBzL2FkZC1tZW1iZXJzJzsKaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJzsKaW1wb3J0IGxhYmVsUGlja2VyIGZyb20gJy4vbGFiZWwtcGlja2VyJzsKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9ib2FyZC5zZXJ2aWNlJzsKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIGxhYmVsUGlja2VyOiBsYWJlbFBpY2tlciwKICAgIGFkZE1lbWJlcnM6IGFkZE1lbWJlcnMKICB9LAogIG5hbWU6ICd0YXNrLXByZXZpZXcnLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0YXNrQ29weTogbnVsbCwKICAgICAgaXNTdGF0dXNlc1Nob3dlbjogZmFsc2UsCiAgICAgIGlzUHJpb3JzU2hvd2VuOiBmYWxzZSwKICAgICAgaXNUYXNrTWVtYmVyc1Nob3dlbjogZmFsc2UKICAgIH07CiAgfSwKICBwcm9wczogewogICAgdGFza0NvbG9yOiBTdHJpbmcsCiAgICB0YXNrOiBPYmplY3QsCiAgICBzdGF0dXNlczogQXJyYXksCiAgICBwcmlvcml0aWVzOiBBcnJheSwKICAgIGdyb3VwSWQ6IFN0cmluZywKICAgIGJvYXJkTWVtYmVyczogW0FycmF5LCBPYmplY3RdLAogICAgYWN0aXZpdHk6IE9iamVjdCwKICAgIHVzZXI6IE9iamVjdAogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHRhc2tCZ2M6IGZ1bmN0aW9uIHRhc2tCZ2MoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLnRhc2tDb2xvcgogICAgICB9OwogICAgfSwKICAgIGZpbHRlcmVkQm9hcmRNZW1iZXJzOiBmdW5jdGlvbiBmaWx0ZXJlZEJvYXJkTWVtYmVycygpIHsKICAgICAgdmFyIGJvYXJkTWVtYmVycyA9IHRoaXMuYm9hcmRNZW1iZXJzOwogICAgICB2YXIgdGFza01lbWJlcnMgPSB0aGlzLnRhc2tDb3B5Lm1lbWJlcnM7CgogICAgICBpZiAodGFza01lbWJlcnMpIHsKICAgICAgICB2YXIgZmlsdGVyZWRCb2FyZE1lbWJlcnMgPSBib2FyZE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChiTWVtYmVyKSB7CiAgICAgICAgICByZXR1cm4gdGFza01lbWJlcnMuZXZlcnkoZnVuY3Rpb24gKHRNZW1iZXIpIHsKICAgICAgICAgICAgcmV0dXJuIHRNZW1iZXIuX2lkICE9PSBiTWVtYmVyLl9pZDsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBmaWx0ZXJlZEJvYXJkTWVtYmVyczsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gYm9hcmRNZW1iZXJzOwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICB0b2dnbGVNZW1iZXI6IGZ1bmN0aW9uIHRvZ2dsZU1lbWJlcigpIHsKICAgICAgdGhpcy5pc1Rhc2tNZW1iZXJzU2hvd2VuID0gIXRoaXMuaXNUYXNrTWVtYmVyc1Nob3dlbjsKICAgIH0sCiAgICBhZGRUYXNrTWVtYmVyOiBmdW5jdGlvbiBhZGRUYXNrTWVtYmVyKG1lbWJlcikgewogICAgICB2YXIgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSgpOwogICAgICBjb25zb2xlLmxvZygnbWVtYmVyOicsIG1lbWJlcik7CiAgICAgIHRoaXMudGFza0NvcHkubWVtYmVycy51bnNoaWZ0KG1lbWJlcik7CiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9ICJNZW1iZXIgIi5jb25jYXQobWVtYmVyLmZ1bGxOYW1lLCAiIHdhcyBhZGRlZCB0byB0YXNrIik7CiAgICAgIG5ld0FjdGl2aXR5LmJ5VXNlciA9IHRoaXMudXNlcjsKICAgICAgdGhpcy50YXNrQ29weS5hY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpOwogICAgICB0aGlzLnVwZGF0ZVRhc2soKTsKICAgIH0sCiAgICByZW1vdmVUYXNrTWVtYmVyOiBmdW5jdGlvbiByZW1vdmVUYXNrTWVtYmVyKG1lbWJlcikgewogICAgICB2YXIgaWR4ID0gdGhpcy50YXNrQ29weS5tZW1iZXJzLmZpbmRJbmRleChmdW5jdGlvbiAodE1lbWJlcikgewogICAgICAgIHJldHVybiB0TWVtYmVyLl9pZCA9PT0gbWVtYmVyLl9pZDsKICAgICAgfSk7CiAgICAgIHZhciBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KCk7CiAgICAgIHRoaXMudGFza0NvcHkubWVtYmVycy5zcGxpY2UoaWR4LCAxKTsKICAgICAgbmV3QWN0aXZpdHkudHh0ID0gIk1lbWJlciAiLmNvbmNhdChtZW1iZXIuZnVsbE5hbWUsICIgd2FzIHJlbW92ZWQgZnJvbSB0YXNrIik7CiAgICAgIG5ld0FjdGl2aXR5LmJ5VXNlciA9IHRoaXMudXNlcjsKICAgICAgdGhpcy50YXNrQ29weS5hY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpOwogICAgICB0aGlzLnVwZGF0ZVRhc2soKTsKICAgIH0sCiAgICBnZXRTdHlsZVN0cjogZnVuY3Rpb24gZ2V0U3R5bGVTdHIoY29sb3JTdHIpIHsKICAgICAgcmV0dXJuICJiYWNrZ3JvdW5kQ29sb3I6Ii5jb25jYXQoY29sb3JTdHIpOwogICAgfSwKICAgIHRvZ2dsZVN0YXR1c2VzOiBmdW5jdGlvbiB0b2dnbGVTdGF0dXNlcygpIHsKICAgICAgdGhpcy5pc1N0YXR1c2VzU2hvd2VuID0gIXRoaXMuaXNTdGF0dXNlc1Nob3dlbjsKICAgIH0sCiAgICB0b2dnbGVQcmlvcnM6IGZ1bmN0aW9uIHRvZ2dsZVByaW9ycygpIHsKICAgICAgdGhpcy5pc1ByaW9yc1Nob3dlbiA9ICF0aGlzLmlzUHJpb3JzU2hvd2VuOwogICAgfSwKICAgIGRlbGV0ZVRhc2s6IGZ1bmN0aW9uIGRlbGV0ZVRhc2soKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0ZVRhc2snLCB0aGlzLnRhc2tDb3B5LmlkKTsKICAgIH0sCiAgICB1cGRhdGVUYXNrVHh0OiBmdW5jdGlvbiB1cGRhdGVUYXNrVHh0KGV2KSB7CiAgICAgIGNvbnNvbGUubG9nKGV2LnRhcmdldC5pbm5lclRleHQpOwogICAgICB2YXIgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSgpOwogICAgICB2YXIgcHJldlR4dCA9IHRoaXMudGFza0NvcHkudHh0OwogICAgICB0aGlzLnRhc2tDb3B5LnR4dCA9IGV2LnRhcmdldC5pbm5lclRleHQ7CiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9ICJUYXNrICciLmNvbmNhdChwcmV2VHh0LCAiJyB3YXMgY2hhbmdlZCB0byAnIikuY29uY2F0KGV2LnRhcmdldC5pbm5lclRleHQsICInIik7CiAgICAgIG5ld0FjdGl2aXR5LmJ5VXNlciA9IHRoaXMudXNlcjsKICAgICAgdGhpcy50YXNrQ29weS5hY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpOwogICAgICB0aGlzLnVwZGF0ZVRhc2soKTsKICAgIH0sCiAgICB1cGRhdGVUYXNrOiBmdW5jdGlvbiB1cGRhdGVUYXNrKCkgewogICAgICB0aGlzLiRlbWl0KCd1cGRhdGVUYXNrJywgdGhpcy50YXNrQ29weSk7CiAgICB9LAogICAgc2VuZFRvVGFza0RldGFpbHM6IGZ1bmN0aW9uIHNlbmRUb1Rhc2tEZXRhaWxzKCkgewogICAgICBpZiAodGhpcy4kcm91dGUucGFyYW1zLnRhc2tJZCAmJiB0aGlzLiRyb3V0ZS5wYXJhbXMudGFza0lkID09PSB0aGlzLnRhc2suaWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGV2ZW50QnVzLiRlbWl0KCd0YXNrRGV0YWlscycsIHsKICAgICAgICB0YXNrOiB0aGlzLnRhc2tDb3B5LAogICAgICAgIGdyb3VwSWQ6IHRoaXMuZ3JvdXBJZAogICAgICB9KTsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goIi9ib2FyZC8iLmNvbmNhdCh0aGlzLiRyb3V0ZS5wYXJhbXMuYm9hcmRJZCwgIi90YXNrLyIpLmNvbmNhdCh0aGlzLnRhc2suaWQpKTsKICAgIH0sCiAgICB1cGRhdGVUYXNrUHJpb3JpdHk6IGZ1bmN0aW9uIHVwZGF0ZVRhc2tQcmlvcml0eShvcHQpIHsKICAgICAgdmFyIG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkoKTsKICAgICAgdmFyIHByZXZQcmlvciA9IHRoaXMudGFza0NvcHkucHJpb3JpdHk7CiAgICAgIHRoaXMudGFza0NvcHkucHJpb3JpdHkgPSBvcHQ7CiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9ICJUYXNrIHByaW9yaXR5IHdhcyB1cGRhdGVkIGZyb20gJyIuY29uY2F0KHByZXZQcmlvciwgIicgdG8gJyIpLmNvbmNhdChvcHQpOwogICAgICBuZXdBY3Rpdml0eS5ieVVzZXIgPSB0aGlzLnVzZXI7CiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KTsKICAgICAgdGhpcy51cGRhdGVUYXNrKCk7CiAgICAgIHRoaXMuaXNTdGF0dXNlc1Nob3dlbiA9IGZhbHNlOwogICAgfSwKICAgIHVwZGF0ZVRhc2tTdGF0dXM6IGZ1bmN0aW9uIHVwZGF0ZVRhc2tTdGF0dXMob3B0KSB7CiAgICAgIHZhciBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KCk7CiAgICAgIHZhciBwcmV2U3RhdHVzID0gdGhpcy50YXNrQ29weS5zdGF0dXM7CiAgICAgIHRoaXMudGFza0NvcHkuc3RhdHVzID0gb3B0OwogICAgICBuZXdBY3Rpdml0eS50eHQgPSAiVGFzayBzdGF0dXMgd2FzIHVwZGF0ZWQgZnJvbSAnIi5jb25jYXQocHJldlN0YXR1cywgIicgdG8gJyIpLmNvbmNhdChvcHQpOwogICAgICBuZXdBY3Rpdml0eS5ieVVzZXIgPSB0aGlzLnVzZXI7CiAgICAgIGNvbnNvbGUubG9nKCduZXdBY3Rpdml0eTonLCBuZXdBY3Rpdml0eSk7CiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KTsKICAgICAgdGhpcy51cGRhdGVUYXNrKCk7CiAgICAgIHRoaXMuaXNQcmlvcnNTaG93ZW4gPSBmYWxzZTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICBjb25zb2xlLmxvZygnaGVyZWVlZWVlZWVlZWUnKTsKICAgIHRoaXMudGFza0NvcHkgPSB0aGlzLnRhc2s7CiAgICBjb25zb2xlLmxvZygndGFza0NvcHkgaW4gdGFzayBwcmV2aWV3OicsIHRoaXMudGFza0NvcHkpOwogIH0KfTs="},{"version":3,"sources":["task-preview.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <li\n        @click=\"isTaskMembersShowen = false\"\n        v-if=\"taskCopy\"\n        class=\"task-preview flex space-between align-center width100\"\n    >\n        <div class=\"flex space-between width100\">\n            <span class=\"task-color\" :style=\"taskBgc\"></span>\n                  <button @click=\"deleteTask\">X</button>\n\n            <div class=\"task-txt\">\n                <span\n                    @blur=\"updateTaskTxt\"\n                    @keyup.enter=\"updateTaskTxt\"\n                    contenteditable\n                    >{{ taskCopy.txt }}</span\n                >\n            </div>\n            <span @click=\"sendToTaskDetails\"\n                ><i class=\"far fa-comment fa-icon\"></i\n            ></span>\n        </div>\n        <div class=\"task-details flex\">\n            <div class=\"headers flex\">\n                <span\n                    ><i\n                        @click.stop=\"toggleMember\"\n                        class=\"far fa-user-circle fa-icon\"\n                    ></i\n                ></span>\n                <add-members\n                    v-if=\"isTaskMembersShowen\"\n                    firstTitle=\"Task Members\"\n                    secondTitle=\"Board Members\"\n                    :members=\"taskCopy.members\"\n                    :allMembers=\"filteredBoardMembers\"\n                    @addMember=\"addTaskMember\"\n                    @removeMember=\"removeTaskMember\"\n                />\n                <span\n                    @click=\"toggleStatuses\"\n                    class=\"status relative\"\n                    :style=\"getStyleStr(taskCopy.status.color)\"\n                    >{{ taskCopy.status.txt }}\n                    <label-picker\n                        v-if=\"isStatusesShowen\"\n                        :opts=\"statuses\"\n                        type=\"status\"\n                        @updateTaskStatus=\"updateTaskStatus\"\n                /></span>\n                <span\n                    @click=\"togglePriors\"\n                    class=\"priority relative\"\n                    :style=\"getStyleStr(taskCopy.priority.color)\"\n                    >{{ taskCopy.priority.txt }}\n                    <label-picker\n                        v-if=\"isPriorsShowen\"\n                        :opts=\"priorities\"\n                        type=\"priority\"\n                        @updateTaskPriority=\"updateTaskPriority\"\n                /></span>\n                <span class=\"date-picker\">\n                    <el-date-picker\n                        class=\"date-input\"\n                        @change=\"updateTask\"\n                        v-model=\"taskCopy.dueDate\"\n                        type=\"date\"\n                        placeholder=\"Pick a date\"\n                    >\n                    </el-date-picker>\n                </span>\n            </div>\n        </div>\n    </li>\n</template>\n<script>\nimport addMembers from '@/cmps/add-members'\nimport { eventBus } from '@/services/event-bus.service'\nimport labelPicker from './label-picker'\nimport { boardService } from '@/services/board.service'\n\nexport default {\n  components: { labelPicker, addMembers },\n  name: 'task-preview',\n  data() {\n    return {\n      taskCopy: null,\n      isStatusesShowen: false,\n      isPriorsShowen: false,\n      isTaskMembersShowen: false\n    }\n  },\n  props: {\n    taskColor: String,\n    task: Object,\n    statuses: Array,\n    priorities: Array,\n    groupId: String,\n    boardMembers: [Array, Object],\n    activity: Object,\n    user: Object\n  },\n  computed: {\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    filteredBoardMembers() {\n      const boardMembers = this.boardMembers\n      const taskMembers = this.taskCopy.members\n      if (taskMembers) {\n        const filteredBoardMembers = boardMembers.filter(bMember => {\n          return taskMembers.every(tMember => {\n            return tMember._id !== bMember._id\n          })\n        })\n        return filteredBoardMembers\n      } else {\n        return boardMembers\n      }\n    }\n  },\n  methods: {\n    toggleMember() {\n      this.isTaskMembersShowen = !this.isTaskMembersShowen\n    },\n    addTaskMember(member) {\n      let newActivity = boardService.getEmptyActivity()\n      console.log('member:', member)\n      this.taskCopy.members.unshift(member)\n      newActivity.txt = `Member ${member.fullName} was added to task`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    removeTaskMember(member) {\n      const idx = this.taskCopy.members.findIndex(\n        tMember => tMember._id === member._id\n      )\n      let newActivity = boardService.getEmptyActivity()\n      this.taskCopy.members.splice(idx, 1)\n      newActivity.txt = `Member ${member.fullName} was removed from task`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    getStyleStr(colorStr) {\n      return `backgroundColor:${colorStr}`\n    },\n    toggleStatuses() {\n      this.isStatusesShowen = !this.isStatusesShowen\n    },\n    togglePriors() {\n      this.isPriorsShowen = !this.isPriorsShowen\n    },\n    deleteTask() {\n      this.$emit('deleteTask', this.taskCopy.id)\n    },\n    updateTaskTxt(ev) {\n      console.log(ev.target.innerText)\n      let newActivity = boardService.getEmptyActivity()\n      const prevTxt = this.taskCopy.txt\n      this.taskCopy.txt = ev.target.innerText\n      newActivity.txt = `Task '${prevTxt}' was changed to '${ev.target.innerText}'`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    updateTask() {\n      this.$emit('updateTask', this.taskCopy)\n    },\n    sendToTaskDetails() {\n      if (\n        this.$route.params.taskId &&\n        this.$route.params.taskId === this.task.id\n      ) {\n        return\n      }\n      \n      eventBus.$emit('taskDetails', {task: this.taskCopy, groupId: this.groupId})\n      this.$router.push(`/board/${this.$route.params.boardId}/task/${this.task.id}`)\n    },\n    updateTaskPriority(opt) {\n      let newActivity = boardService.getEmptyActivity()\n      const prevPrior = this.taskCopy.priority\n      this.taskCopy.priority = opt\n      newActivity.txt = `Task priority was updated from '${prevPrior}' to '${opt}`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n      this.isStatusesShowen = false\n    },\n    updateTaskStatus(opt) {\n      let newActivity = boardService.getEmptyActivity()\n      const prevStatus = this.taskCopy.status\n      this.taskCopy.status = opt\n      newActivity.txt = `Task status was updated from '${prevStatus}' to '${opt}`\n      newActivity.byUser = this.user\n      console.log('newActivity:', newActivity)\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n      this.isPriorsShowen = false\n    }\n  },\n  created() {\n    console.log('hereeeeeeeeeee')\n    this.taskCopy = this.task\n    console.log('taskCopy in task preview:', this.taskCopy)\n  }\n}\n</script>\n"],"sourceRoot":"src/cmps"}]}