{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/notifications-modal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/notifications-modal.vue","mtime":1609778254052},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBub3RpZnNGaWx0ZXJzIGZyb20gJy4vbm90aWZzLWZpbHRlcnMnOwppbXBvcnQgbm90aWZQcmV2aWV3IGZyb20gJy4vbm90aWYtcHJldmlldyc7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBub3RpZnNGaWx0ZXJzOiBub3RpZnNGaWx0ZXJzLAogICAgbm90aWZQcmV2aWV3OiBub3RpZlByZXZpZXcKICB9LAogIHByb3BzOiB7CiAgICBpc0V4cGFuZGVkOiBCb29sZWFuCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZmlsdGVyQnk6IG51bGwsCiAgICAgIG5vdGlmc0NvcHk6IG51bGwgLy8gZXhwYW5kZWQ6IG51bGwKCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGJvYXJkOiBmdW5jdGlvbiBib2FyZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuYm9hcmQ7CiAgICB9LAogICAgbm90aWZzVG9TaG93OiBmdW5jdGlvbiBub3RpZnNUb1Nob3coKSB7CiAgICAgIHZhciBub3RpZnMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzLnVzZXIubm90aWZpY2F0aW9uczsKCiAgICAgIHN3aXRjaCAodGhpcy5maWx0ZXJCeSkgewogICAgICAgIGNhc2UgJ3VucmVhZCc6CiAgICAgICAgICBub3RpZnMgPSBub3RpZnMuZmlsdGVyKGZ1bmN0aW9uIChub3RpZikgewogICAgICAgICAgICByZXR1cm4gbm90aWYuaXNSZWFkID09PSBmYWxzZTsKICAgICAgICAgIH0pOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2Fzc2lnbmVkJzoKICAgICAgICAgIG5vdGlmcyA9IG5vdGlmcy5maWx0ZXIoZnVuY3Rpb24gKG5vdGlmKSB7CiAgICAgICAgICAgIHJldHVybiBub3RpZi50eXBlID09PSAnYXNzaWduZWQnOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnbWVudGlvbnMnOgogICAgICAgICAgbm90aWZzID0gW107CiAgICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgcmV0dXJuIG5vdGlmczsKICAgIH0sCiAgICB1c2VyOiBmdW5jdGlvbiB1c2VyKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy51c2VyOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgdXBkYXRlTm90aWY6IGZ1bmN0aW9uIHVwZGF0ZU5vdGlmKG5vdGlmKSB7CiAgICAgIHZhciBpZHggPSB0aGlzLm5vdGlmc0NvcHkuZmluZEluZGV4KGZ1bmN0aW9uIChjdXJyTm90aWYpIHsKICAgICAgICByZXR1cm4gY3Vyck5vdGlmLmlkID09PSBub3RpZi5pZDsKICAgICAgfSk7CiAgICAgIHRoaXMubm90aWZzQ29weS5zcGxpY2UoaWR4LCAxLCBub3RpZik7CiAgICB9LAogICAgZGVsZXRlTm90aWY6IGZ1bmN0aW9uIGRlbGV0ZU5vdGlmKG5vdGlmKSB7CiAgICAgIHZhciBpZHggPSB0aGlzLm5vdGlmc0NvcHkuZmluZEluZGV4KGZ1bmN0aW9uIChjdXJyTm90aWYpIHsKICAgICAgICByZXR1cm4gY3Vyck5vdGlmLmlkID09PSBub3RpZi5pZDsKICAgICAgfSk7CiAgICAgIHRoaXMubm90aWZzQ29weS5zcGxpY2UoaWR4LCAxKTsKICAgICAgdGhpcy51cGRhdGVOb3RpZnMoKTsKICAgIH0sCiAgICBzZXRGaWx0ZXI6IGZ1bmN0aW9uIHNldEZpbHRlcihmaWx0ZXJTdHIpIHsKICAgICAgdGhpcy5maWx0ZXJCeSA9IGZpbHRlclN0cjsKICAgICAgdGhpcy51cGRhdGVOb3RpZnMoKTsKICAgIH0sCiAgICB1cGRhdGVOb3RpZnM6IGZ1bmN0aW9uIHVwZGF0ZU5vdGlmcygpIHsKICAgICAgdGhpcy51c2VyLm5vdGlmaWNhdGlvbnMgPSB0aGlzLm5vdGlmc0NvcHk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAndXBkYXRlVXNlcicsCiAgICAgICAgdXNlcjogdGhpcy51c2VyCiAgICAgIH0pOwogICAgfQogIH0sCiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQoKSB7CiAgICB0aGlzLnVwZGF0ZU5vdGlmcygpOwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMubm90aWZzQ29weSA9IHRoaXMuJHN0b3JlLmdldHRlcnMudXNlci5ub3RpZmljYXRpb25zOwogIH0KfTs="},{"version":3,"sources":["notifications-modal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,aAAA,EAAA,aADA;AAEA,IAAA,YAAA,EAAA;AAFA,GADA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,UAAA,EAAA;AADA,GALA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,IADA;AAEA,MAAA,UAAA,EAAA,IAFA,CAGA;;AAHA,KAAA;AAKA,GAdA;AAeA,EAAA,QAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,KAAA;AACA,KAHA;AAIA,IAAA,YAJA,0BAIA;AACA,UAAA,MAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,aAAA;;AACA,cAAA,KAAA,QAAA;AACA,aAAA,QAAA;AACA,UAAA,MAAA,GAAA,MAAA,CAAA,MAAA,CAAA,UAAA,KAAA;AAAA,mBAAA,KAAA,CAAA,MAAA,KAAA,KAAA;AAAA,WAAA,CAAA;AACA;;AACA,aAAA,UAAA;AACA,UAAA,MAAA,GAAA,MAAA,CAAA,MAAA,CAAA,UAAA,KAAA;AAAA,mBAAA,KAAA,CAAA,IAAA,KAAA,UAAA;AAAA,WAAA,CAAA;AACA;;AACA,aAAA,UAAA;AACA,UAAA,MAAA,GAAA,EAAA;AACA;AATA;;AAWA,aAAA,MAAA;AACA,KAlBA;AAmBA,IAAA,IAnBA,kBAmBA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA;AACA;AArBA,GAfA;AAsCA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,KADA,EACA;AACA,UAAA,GAAA,GAAA,KAAA,UAAA,CAAA,SAAA,CACA,UAAA,SAAA;AAAA,eAAA,SAAA,CAAA,EAAA,KAAA,KAAA,CAAA,EAAA;AAAA,OADA,CAAA;AAGA,WAAA,UAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,EAAA,KAAA;AACA,KANA;AAOA,IAAA,WAPA,uBAOA,KAPA,EAOA;AACA,UAAA,GAAA,GAAA,KAAA,UAAA,CAAA,SAAA,CACA,UAAA,SAAA;AAAA,eAAA,SAAA,CAAA,EAAA,KAAA,KAAA,CAAA,EAAA;AAAA,OADA,CAAA;AAGA,WAAA,UAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA;AACA,WAAA,YAAA;AACA,KAbA;AAcA,IAAA,SAdA,qBAcA,SAdA,EAcA;AACA,WAAA,QAAA,GAAA,SAAA;AACA,WAAA,YAAA;AACA,KAjBA;AAkBA,IAAA,YAlBA,0BAkBA;AACA,WAAA,IAAA,CAAA,aAAA,GAAA,KAAA,UAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA;AACA,QAAA,IAAA,EAAA,YADA;AAEA,QAAA,IAAA,EAAA,KAAA;AAFA,OAAA;AAIA;AAxBA,GAtCA;AAgEA,EAAA,SAhEA,uBAgEA;AACA,SAAA,YAAA;AACA,GAlEA;AAmEA,EAAA,OAnEA,qBAmEA;AACA,SAAA,UAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,aAAA;AACA;AArEA,CAAA","sourcesContent":["<template>\n  <section :class=\"{ 'notifications-modal': true, expanded: isExpanded }\">\n    <!-- <section class=\"notifications-modal\"> -->\n    <header class=\"header-notifs\">\n      <h3 class=\"notifs-title\">Notifications</h3>\n      <notifs-filters :setFilter=\"setFilter\"></notifs-filters>\n    </header>\n    <ul v-if=\"notifsToShow.length\" class=\"notifs-list flex column\">\n      <notif-preview\n        v-for=\"notif in notifsToShow\"\n        :key=\"notif.id\"\n        :notif=\"notif\"\n        :user=\"user\"\n        :board=\"board\"\n        @updateNotif=\"updateNotif\"\n        @deleteNotif=\"deleteNotif\"\n      />\n    </ul>\n  </section>\n</template>\n\n<script>\nimport notifsFilters from './notifs-filters'\nimport notifPreview from './notif-preview'\n\nexport default {\n  components: {\n    notifsFilters,\n    notifPreview\n  },\n  props: {\n    isExpanded: Boolean\n  },\n  data() {\n    return {\n      filterBy: null,\n      notifsCopy: null\n      // expanded: null\n    }\n  },\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    notifsToShow() {\n      let notifs = this.$store.getters.user.notifications\n      switch (this.filterBy) {\n        case 'unread':\n          notifs = notifs.filter(notif => notif.isRead === false)\n          break\n        case 'assigned':\n          notifs = notifs.filter(notif => notif.type === 'assigned')\n          break\n        case 'mentions':\n          notifs = []\n          break\n      }\n      return notifs\n    },\n    user() {\n      return this.$store.getters.user\n    }\n  },\n  methods: {\n    updateNotif(notif) {\n      const idx = this.notifsCopy.findIndex(\n        currNotif => currNotif.id === notif.id\n      )\n      this.notifsCopy.splice(idx, 1, notif)\n    },\n    deleteNotif(notif) {\n      const idx = this.notifsCopy.findIndex(\n        currNotif => currNotif.id === notif.id\n      )\n      this.notifsCopy.splice(idx, 1)\n      this.updateNotifs()\n    },\n    setFilter(filterStr) {\n      this.filterBy = filterStr\n      this.updateNotifs()\n    },\n    updateNotifs() {\n      this.user.notifications = this.notifsCopy\n      this.$store.dispatch({\n        type: 'updateUser',\n        user: this.user\n      })\n    }\n  },\n  destroyed() {\n    this.updateNotifs()\n  },\n  created() {\n    this.notifsCopy = this.$store.getters.user.notifications\n  }\n}\n</script>\n\n<style></style>\n"],"sourceRoot":"src/cmps"}]}