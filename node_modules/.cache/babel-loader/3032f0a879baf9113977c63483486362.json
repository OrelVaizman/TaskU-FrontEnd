{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/status-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/status-preview.vue","mtime":1609778254042},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgdGFza1ByZXZpZXcgZnJvbSAnLi90YXNrLXByZXZpZXcudnVlJzsKaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJzsKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYm9hcmQuc2VydmljZSc7CmltcG9ydCBkcmFnZ2FibGUgZnJvbSAndnVlZHJhZ2dhYmxlJzsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdzdGF0dWVzLXByZXZpZXcnLAogIHByb3BzOiB7CiAgICBzdGF0dXM6IE9iamVjdCwKICAgIGdyb3VwOiBPYmplY3QKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0eHQ6ICcnLAogICAgICBpc0FkZEJ0blNob3duOiBmYWxzZSwKICAgICAgY2xvbmVUYXNrczogbnVsbAogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBib2FyZDogZnVuY3Rpb24gYm9hcmQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvYXJkOwogICAgfSwKICAgIG9uRm9jb3VzQmdjOiBmdW5jdGlvbiBvbkZvY291c0JnYygpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNBZGRCdG5TaG93biA/ICdiYWNrZ3JvdW5kLWNvbG9yOndoaXRlOycgOiAnJzsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIHVwZGF0ZVRhc2tTdGF0dXM6IGZ1bmN0aW9uIHVwZGF0ZVRhc2tTdGF0dXMoX3JlZikgewogICAgICB2YXIgYWRkZWQgPSBfcmVmLmFkZGVkOwoKICAgICAgaWYgKGFkZGVkKSB7CiAgICAgICAgdmFyIG5ld0luZGV4ID0gYWRkZWQubmV3SW5kZXg7CiAgICAgICAgdmFyIGlkeCA9IG5ld0luZGV4OwoKICAgICAgICB2YXIgdGFzayA9IF8uY2xvbmUodGhpcy5zdGF0dXMudGFza3NbaWR4XSk7CgogICAgICAgIHRhc2suc3RhdHVzLmNvbG9yID0gdGhpcy5zdGF0dXMuY29sb3I7CiAgICAgICAgdGFzay5zdGF0dXMudHh0ID0gdGhpcy5zdGF0dXMudHh0OwogICAgICAgIHRoaXMudXBkYXRlVGFzayh0YXNrKTsKICAgICAgfQogICAgfSwKICAgIGRlbGV0ZVRhc2s6IGZ1bmN0aW9uIGRlbGV0ZVRhc2sodGFzaykgewogICAgICB2YXIgZ3JvdXAgPSB0aGlzLmJvYXJkLmdyb3Vwcy5maW5kKGZ1bmN0aW9uIChncm91cCkgewogICAgICAgIHJldHVybiBncm91cC5pZCA9PT0gdGFzay5ncm91cElkOwogICAgICB9KTsKICAgICAgdmFyIHRhc2tJZHggPSBncm91cC50YXNrcy5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cnJUYXNrKSB7CiAgICAgICAgcmV0dXJuIGN1cnJUYXNrLmlkID09PSB0YXNrLmlkOwogICAgICB9KTsKICAgICAgZ3JvdXAudGFza3Muc3BsaWNlKHRhc2tJZHgsIDEpOwogICAgICBldmVudEJ1cy4kZW1pdCgndXBkYXRlR3JvdXAnLCBncm91cCk7CiAgICB9LAogICAgdXBkYXRlVGFzazogZnVuY3Rpb24gdXBkYXRlVGFzayh1cGRhdGVkVGFzaykgewogICAgICB2YXIgZ3JvdXAgPSB0aGlzLmJvYXJkLmdyb3Vwcy5maW5kKGZ1bmN0aW9uIChncm91cCkgewogICAgICAgIHJldHVybiBncm91cC5pZCA9PT0gdXBkYXRlZFRhc2suZ3JvdXBJZDsKICAgICAgfSk7CiAgICAgIHZhciB0YXNrSWR4ID0gZ3JvdXAudGFza3MuZmluZEluZGV4KGZ1bmN0aW9uIChjdXJyVGFzaykgewogICAgICAgIHJldHVybiBjdXJyVGFzay5pZCA9PT0gdXBkYXRlZFRhc2suaWQ7CiAgICAgIH0pOwoKICAgICAgdmFyIGNsZWFuVGFzayA9IF8ub21pdCh1cGRhdGVkVGFzaywgWydncm91cElkJywgJ2dyb3VwTmFtZSddKTsKCiAgICAgIGdyb3VwLnRhc2tzLnNwbGljZSh0YXNrSWR4LCAxLCBjbGVhblRhc2spOwogICAgICBldmVudEJ1cy4kZW1pdCgndXBkYXRlR3JvdXAnLCBncm91cCk7CiAgICB9LAogICAgZm9jdXNJbnB1dDogZnVuY3Rpb24gZm9jdXNJbnB1dCgpIHsKICAgICAgdGhpcy5pc0FkZEJ0blNob3duID0gdHJ1ZTsKICAgIH0sCiAgICB1bkZvY3VzSW5wdXQ6IGZ1bmN0aW9uIHVuRm9jdXNJbnB1dCgpIHsKICAgICAgdGhpcy5pc0FkZEJ0blNob3duID0gZmFsc2U7CiAgICB9LAogICAgYWRkVGFzazogZnVuY3Rpb24gYWRkVGFzaygpIHsKICAgICAgdmFyIG5ld1Rhc2sgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlUYXNrKCk7CiAgICAgIG5ld1Rhc2suc3RhdHVzLmNvbG9yID0gdGhpcy5zdGF0dXMuY29sb3I7CiAgICAgIG5ld1Rhc2suc3RhdHVzLnR4dCA9IHRoaXMuc3RhdHVzLnR4dDsKICAgICAgbmV3VGFzay50eHQgPSB0aGlzLnR4dDsKICAgICAgdGhpcy5ncm91cC50YXNrcy51bnNoaWZ0KG5ld1Rhc2spOwogICAgICBldmVudEJ1cy4kZW1pdCgndXBkYXRlR3JvdXAnLCB0aGlzLmdyb3VwKTsKICAgICAgdGhpcy5pc0FkZEJ0blNob3duID0gZmFsc2U7CiAgICAgIHRoaXMudHh0ID0gJyc7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5ncm91cENvcHkgPSB0aGlzLmdyb3VwOwogICAgdGhpcy5jbG9uZVRhc2tzID0gdGhpcy5zdGF0dXMudGFza3M7CiAgfSwKICBjb21wb25lbnRzOiB7CiAgICB0YXNrUHJldmlldzogdGFza1ByZXZpZXcsCiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZQogIH0KfTs="},{"version":3,"sources":["status-preview.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <ul\n    :style=\"`background-color:${status.color}`\"\n    class=\"status-preview flex align-center clean-list status-list\"\n  >\n    <span class=\"status-title\"\n      >{{ status.txt || 'Need to review' }}\n      <span v-if=\"status.tasks\">/ {{ status.tasks.length }}</span></span\n    >\n    <div class=\"tasks-preview-container align-center\">\n      <draggable\n        class=\"width100 drag-canvan\"\n        :list=\"cloneTasks\"\n        group=\"tasks\"\n        @change=\"updateTaskStatus\"\n      >\n        <task-preview\n          v-for=\"task in cloneTasks\"\n          :key=\"task.id\"\n          :task=\"task\"\n          :group=\"group\"\n          @updateTask=\"updateTask\"\n          @deleteTask=\"deleteTask\"\n        />\n      </draggable>\n    </div>\n    <div :style=\"onFocousBgc\" class=\"input-container\">\n      <div class=\"add-task-form flex align-center space-between\">\n        <input\n          class=\"add-task-input\"\n          v-model=\"txt\"\n          type=\"text\"\n          placeholder=\"+ Add Task\"\n          @click=\"focusInput\"\n          @blur=\"unFocusInput\"\n          @keypress.enter=\"addTask\"\n        />\n        <button\n          @click=\"addTask\"\n          :style=\"`background-color:${status.color}`\"\n          class=\"add-btn\"\n          v-if=\"isAddBtnShown\"\n        >\n          + Add\n        </button>\n      </div>\n    </div>\n  </ul>\n</template>\n\n<script>\nimport taskPreview from './task-preview.vue'\nimport { eventBus } from '@/services/event-bus.service'\nimport { boardService } from '../../services/board.service'\nimport draggable from 'vuedraggable'\nimport _ from 'lodash'\nexport default {\n  name: 'statues-preview',\n  props: {\n    status: Object,\n    group: Object,\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShown: false,\n      cloneTasks: null,\n    }\n  },\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    onFocousBgc() {\n      return this.isAddBtnShown ? 'background-color:white;' : ''\n    },\n  },\n  methods: {\n    updateTaskStatus({ added }) {\n      if (added) {\n        const { newIndex } = added\n        const idx = newIndex\n        const task = _.clone(this.status.tasks[idx])\n        task.status.color = this.status.color\n        task.status.txt = this.status.txt\n        this.updateTask(task)\n      }\n    },\n    deleteTask(task) {\n      const group = this.board.groups.find((group) => group.id === task.groupId)\n      const taskIdx = group.tasks.findIndex(\n        (currTask) => currTask.id === task.id\n      )\n      group.tasks.splice(taskIdx, 1)\n      eventBus.$emit('updateGroup', group)\n    },\n    updateTask(updatedTask) {\n      const group = this.board.groups.find(\n        (group) => group.id === updatedTask.groupId\n      )\n      const taskIdx = group.tasks.findIndex(\n        (currTask) => currTask.id === updatedTask.id\n      )\n      const cleanTask = _.omit(updatedTask, ['groupId', 'groupName'])\n      group.tasks.splice(taskIdx, 1, cleanTask)\n      eventBus.$emit('updateGroup', group)\n    },\n    focusInput() {\n      this.isAddBtnShown = true\n    },\n    unFocusInput() {\n      this.isAddBtnShown = false\n    },\n    addTask() {\n      const newTask = boardService.getEmptyTask()\n      newTask.status.color = this.status.color\n      newTask.status.txt = this.status.txt\n      newTask.txt = this.txt\n      this.group.tasks.unshift(newTask)\n      eventBus.$emit('updateGroup', this.group)\n      this.isAddBtnShown = false\n      this.txt = ''\n    },\n  },\n  created() {\n    this.groupCopy = this.group\n    this.cloneTasks = this.status.tasks\n  },\n  components: {\n    taskPreview,\n    draggable,\n  },\n}\n</script>\n"],"sourceRoot":"src/cmps/Trello"}]}