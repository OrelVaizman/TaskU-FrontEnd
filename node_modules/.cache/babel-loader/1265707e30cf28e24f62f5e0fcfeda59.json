{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue","mtime":1609778254054},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvb3JlbHZhaXptYW4vRGVza3RvcC9kZXYvRmluYWxTcHJpbnQvdGFza3UtZnJvbnRlbmQvVGFza1UtZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgdGFza1ByZXZpZXcgZnJvbSAnLi90YXNrLXByZXZpZXcnOwppbXBvcnQgeyBib2FyZFNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL2JvYXJkLnNlcnZpY2UnOwppbXBvcnQgZHJhZ2dhYmxlIGZyb20gJ3Z1ZWRyYWdnYWJsZSc7IC8vIGltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnQC9zZXJ2aWNlcy9ldmVudC1idXMuc2VydmljZScKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAndGFzay1saXN0JywKICBwcm9wczogewogICAgdGFza3M6IEFycmF5LAogICAgZ3JvdXBJZDogU3RyaW5nLAogICAgdGFza0NvbG9yOiBTdHJpbmcKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0eHQ6ICcnLAogICAgICBpc0FkZEJ0blNob3dlbjogZmFsc2UsCiAgICAgIGNsb25lZFRhc2tzOiBudWxsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGJvYXJkOiBmdW5jdGlvbiBib2FyZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuYm9hcmQ7CiAgICB9LAogICAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB0eHQ6ICcnLAogICAgICAgIGlzQWRkQnRuU2hvd2VuOiBmYWxzZSwKICAgICAgICBjbG9uZWRUYXNrczogbnVsbAogICAgICB9OwogICAgfSwKICAgIHRhc2tCZ2M6IGZ1bmN0aW9uIHRhc2tCZ2MoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLnRhc2tDb2xvcgogICAgICB9OwogICAgfSwKICAgIHVzZXI6IGZ1bmN0aW9uIHVzZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLnVzZXI7CiAgICB9LAogICAgbWluaVVzZXI6IGZ1bmN0aW9uIG1pbmlVc2VyKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5taW5pVXNlcjsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGFkZEVtcHR5VGFzazogZnVuY3Rpb24gYWRkRW1wdHlUYXNrKGdyb3VwSWQpIHsKICAgICAgaWYgKHRoaXMuZ3JvdXBJZCAhPT0gZ3JvdXBJZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIG5ld1Rhc2sgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlUYXNrKCk7CiAgICAgIHZhciBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCk7CiAgICAgIHZhciB0eHQgPSAiIi5jb25jYXQodGhpcy51c2VyLmZ1bGxOYW1lLCAiIGFkZCBuZXcgdGFzayBpbiAiKS5jb25jYXQoZ3JvdXAubmFtZSk7CiAgICAgIHZhciBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KHR4dCwgdGhpcy5taW5pVXNlcik7CiAgICAgIG5ld0FjdGl2aXR5Lmdyb3VwSWQgPSBncm91cElkOwogICAgICB0aGlzLmJvYXJkLmFjdGl2aXRpZXMudW5zaGlmdChuZXdBY3Rpdml0eSk7CiAgICAgIGdyb3VwLnRhc2tzLnB1c2gobmV3VGFzayk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAnc2F2ZUJvYXJkJywKICAgICAgICBib2FyZDogdGhpcy5ib2FyZAogICAgICB9KTsKICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICBtZXNzYWdlOiAnTmV3IHRhc2sgYWRkZWQnLAogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgIH0pOwogICAgICB0aGlzLiRlbWl0KCdmb3JjZVJlbmRlcicpOwogICAgfSwKICAgIHNob3dBZGRCdG46IGZ1bmN0aW9uIHNob3dBZGRCdG4oKSB7CiAgICAgIHRoaXMuaXNBZGRCdG5TaG93ZW4gPSB0cnVlOwogICAgfSwKICAgIGdldEdyb3VwQnlJZDogZnVuY3Rpb24gZ2V0R3JvdXBCeUlkKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGlkeCA9IHRoaXMuYm9hcmQuZ3JvdXBzLmZpbmRJbmRleChmdW5jdGlvbiAoZ3JvdXApIHsKICAgICAgICByZXR1cm4gZ3JvdXAuaWQgPT09IF90aGlzLmdyb3VwSWQ7CiAgICAgIH0pOwogICAgICByZXR1cm4gdGhpcy5ib2FyZC5ncm91cHNbaWR4XTsKICAgIH0sCiAgICBhZGRUYXNrOiBmdW5jdGlvbiBhZGRUYXNrKCkgewogICAgICB2YXIgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKTsKICAgICAgbmV3VGFzay50eHQgPSB0aGlzLnR4dDsKICAgICAgdmFyIHR4dCA9ICJUYXNrICciLmNvbmNhdChuZXdUYXNrLnR4dCwgIicgYWRkZWQiKTsKICAgICAgdmFyIG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkodHh0LCB0aGlzLm1pbmlVc2VyKTsKICAgICAgbmV3QWN0aXZpdHkuZ3JvdXBJZCA9IHRoaXMuZ3JvdXBJZDsKICAgICAgdGhpcy5ib2FyZC5hY3Rpdml0aWVzLnVuc2hpZnQobmV3QWN0aXZpdHkpOwogICAgICB2YXIgZ3JvdXAgPSB0aGlzLmdldEdyb3VwQnlJZCgpOwogICAgICBncm91cC50YXNrcy5wdXNoKG5ld1Rhc2spOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSk7CiAgICAgIHRoaXMudHh0ID0gJyc7CiAgICAgIHRoaXMuaXNBZGRCdG5TaG93ZW4gPSBmYWxzZTsKICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICBtZXNzYWdlOiAnTmV3IHRhc2sgYWRkZWQnLAogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgIH0pOwogICAgICB0aGlzLiRlbWl0KCdmb3JjZVJlbmRlcicpOwogICAgfSwKICAgIGRlbGV0ZVRhc2s6IGZ1bmN0aW9uIGRlbGV0ZVRhc2sodGFza0lkKSB7CiAgICAgIHZhciBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCk7CiAgICAgIHZhciB0YXNrSWR4ID0gZ3JvdXAudGFza3MuZmluZEluZGV4KGZ1bmN0aW9uICh0YXNrKSB7CiAgICAgICAgcmV0dXJuIHRhc2suaWQgPT09IHRhc2tJZDsKICAgICAgfSk7CiAgICAgIGdyb3VwLnRhc2tzLnNwbGljZSh0YXNrSWR4LCAxKTsKICAgICAgdmFyIHR4dCA9ICIiLmNvbmNhdCh0aGlzLnVzZXIuZnVsbE5hbWUsICIgcmVtb3ZlIGEgdGFzayBmcm9tICIpLmNvbmNhdChncm91cC5uYW1lKTsKICAgICAgdmFyIG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkodHh0LCB0aGlzLm1pbmlVc2VyKTsKICAgICAgbmV3QWN0aXZpdHkuZ3JvdXBJZCA9IHRoaXMuZ3JvdXBJZDsKICAgICAgdGhpcy5ib2FyZC5hY3Rpdml0aWVzLnVuc2hpZnQobmV3QWN0aXZpdHkpOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSk7CiAgICAgIHRoaXMuJG5vdGlmeSh7CiAgICAgICAgbWVzc2FnZTogJ1Rhc2sgcmVtb3ZlZCcsCiAgICAgICAgcG9zaXRpb246ICdib3R0b20tbGVmdCcsCiAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgfSk7CiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJyk7CiAgICB9LAogICAgdXBkYXRlVGFzazogZnVuY3Rpb24gdXBkYXRlVGFzayhuZXdUYXNrLCBhY3Rpdml0eSkgewogICAgICBpZiAoYWN0aXZpdHkpIHsKICAgICAgICB0aGlzLmJvYXJkLmFjdGl2aXRpZXMudW5zaGlmdChhY3Rpdml0eSk7CiAgICAgIH0KCiAgICAgIHZhciBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCk7CiAgICAgIHZhciB0YXNrSWR4ID0gZ3JvdXAudGFza3MuZmluZEluZGV4KGZ1bmN0aW9uICh0YXNrKSB7CiAgICAgICAgcmV0dXJuIHRhc2suaWQgPT09IG5ld1Rhc2suaWQ7CiAgICAgIH0pOwogICAgICBncm91cC50YXNrcy5zcGxpY2UodGFza0lkeCwgMSwgbmV3VGFzayk7CiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAnc2F2ZUJvYXJkJywKICAgICAgICBib2FyZDogdGhpcy5ib2FyZAogICAgICB9KTsKICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKTsKICAgIH0sCiAgICB1cGRhdGVUYXNrczogZnVuY3Rpb24gdXBkYXRlVGFza3MoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgZ3JvdXA7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgZ3JvdXAgPSBfdGhpczIuZ2V0R3JvdXBCeUlkKCk7CiAgICAgICAgICAgICAgICBncm91cC50YXNrcyA9IF90aGlzMi5jbG9uZWRUYXNrczsKCiAgICAgICAgICAgICAgICBfdGhpczIuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgICAgICAgICAgIGJvYXJkOiBfdGhpczIuYm9hcmQKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIF90aGlzMi4kZW1pdCgnZm9yY2VSZW5kZXInKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuY2xvbmVkVGFza3MgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMudGFza3MpKTsKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIHRhc2tQcmV2aWV3OiB0YXNrUHJldmlldywKICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlCiAgfQp9Ow=="},{"version":3,"sources":["task-list.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <section v-if=\"clonedTasks\" class=\"task-list-container width100\">\n    <ul class=\"task-list clean-list flex wrap align-center justify-center gap\">\n      <draggable\n        class=\"width100\"\n        :list=\"clonedTasks\"\n        group=\"tasks\"\n        @change=\"updateTasks\"\n      >\n        <task-preview\n          v-for=\"task in clonedTasks\"\n          :user=\"user\"\n          :taskColor=\"taskColor\"\n          :key=\"task.id\"\n          :task=\"task\"\n          :statuses=\"board.statuses\"\n          :priorities=\"board.priorities\"\n          :groupId=\"groupId\"\n          @deleteTask=\"deleteTask\"\n          @updateTask=\"updateTask\"\n          :boardMembers=\"board.members\"\n        />\n      </draggable>\n    </ul>\n    <form class=\"add-task-form flex\" @submit.prevent=\"addTask\">\n      <span class=\"task-color input-color\" :style=\"taskBgc\"></span>\n      <input\n        class=\"add-task-input\"\n        @focus=\"showAddBtn\"\n        v-model=\"txt\"\n        type=\"text\"\n        placeholder=\"+ Add Task\"\n      />\n      <button v-show=\"isAddBtnShowen\" type=\"submit\">Add</button>\n    </form>\n  </section>\n</template>\n<script>\nimport taskPreview from './task-preview'\nimport { boardService } from '@/services/board.service'\nimport draggable from 'vuedraggable'\n// import { eventBus } from '@/services/event-bus.service'\nexport default {\n  name: 'task-list',\n  props: {\n    tasks: Array,\n    groupId: String,\n    taskColor: String\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShowen: false,\n      clonedTasks: null\n    }\n  },\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    data() {\n      return {\n        txt: '',\n        isAddBtnShowen: false,\n        clonedTasks: null\n      }\n    },\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    user() {\n      return this.$store.getters.user\n    },\n    miniUser() {\n      return this.$store.getters.miniUser\n    }\n  },\n  methods: {\n    addEmptyTask(groupId) {\n      if (this.groupId !== groupId) {\n        return\n      }\n      const newTask = boardService.getEmptyTask()\n      const group = this.getGroupById()\n      const txt = `${this.user.fullName} add new task in ${group.name}`\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.groupId = groupId\n      this.board.activities.unshift(newActivity)\n      group.tasks.push(newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$notify({\n        message: 'New task added',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    showAddBtn() {\n      this.isAddBtnShowen = true\n    },\n    getGroupById() {\n      const idx = this.board.groups.findIndex(\n        group => group.id === this.groupId\n      )\n      return this.board.groups[idx]\n    },\n    addTask() {\n      const newTask = boardService.getEmptyTask()\n      newTask.txt = this.txt\n      const txt = `Task '${newTask.txt}' added`\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.groupId = this.groupId\n      this.board.activities.unshift(newActivity)\n      const group = this.getGroupById()\n      group.tasks.push(newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.txt = ''\n      this.isAddBtnShowen = false\n      this.$notify({\n        message: 'New task added',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    deleteTask(taskId) {\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === taskId)\n      group.tasks.splice(taskIdx, 1)\n      const txt = `${this.user.fullName} remove a task from ${group.name}`\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.groupId = this.groupId\n      this.board.activities.unshift(newActivity)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$notify({\n        message: 'Task removed',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    updateTask(newTask, activity) {\n      if (activity) {\n        this.board.activities.unshift(activity)\n      }\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === newTask.id)\n      group.tasks.splice(taskIdx, 1, newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$emit('forceRender')\n    },\n    async updateTasks() {\n      const group = this.getGroupById()\n      group.tasks = this.clonedTasks\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$emit('forceRender')\n    }\n  },\n  created() {\n    this.clonedTasks = JSON.parse(JSON.stringify(this.tasks))\n  },\n  components: {\n    taskPreview,\n    draggable\n  }\n}\n</script>\n"],"sourceRoot":"src/cmps"}]}