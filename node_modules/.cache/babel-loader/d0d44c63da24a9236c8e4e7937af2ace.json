{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js","mtime":1607418824553},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js"],"names":["userService","localLoggedinUser","sessionStorage","user","JSON","parse","userStore","state","users","loggedInUser","getters","stringify","miniUsers","copiedUsers","map","_id","email","fullName","imgUrl","miniUser","guestUser","password","isAdmin","notifications","mutations","insertUserNotif","notif","unshift","setUsers","setUser","updateUser","idx","findIndex","currUser","splice","deleteUser","userId","addUser","actions","loadUsers","commit","getUsers","type","console","log","loadUser","getById","removeUser","remove","save","savedUser","login","context","userCred","guestCred","response","status","logout","dispatch","signup","sendNotif"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,4BAA5B;AAEA,IAAIC,iBAAiB,GAAG,IAAxB;AACA,IAAIC,cAAc,CAACC,IAAnB,EAAyBF,iBAAiB,GAAGG,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,IAA1B,CAApB;AAEzB,OAAO,IAAMG,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,YAAY,EAAER;AAFT,GADgB;AAKvBS,EAAAA,OAAO,EAAE;AACPF,IAAAA,KADO,iBACDD,KADC,EACM;AACX,aAAOH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACO,SAAL,CAAeJ,KAAK,CAACC,KAArB,CAAX,CAAP;AACD,KAHM;AAIPL,IAAAA,IAJO,gBAIFI,KAJE,EAIK;AACV,aAAOH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACO,SAAL,CAAeJ,KAAK,CAACE,YAArB,CAAX,CAAP;AACD,KANM;AAOPG,IAAAA,SAPO,qBAOGL,KAPH,EAOU;AACf,UAAIM,WAAW,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACO,SAAL,CAAeJ,KAAK,CAACC,KAArB,CAAX,EAAwCM,GAAxC,CAA4C,UAAAX,IAAI,EAAI;AACpE,eAAO;AACLY,UAAAA,GAAG,EAAEZ,IAAI,CAACY,GADL;AAELC,UAAAA,KAAK,EAAEb,IAAI,CAACa,KAFP;AAGLC,UAAAA,QAAQ,EAAEd,IAAI,CAACc,QAHV;AAILC,UAAAA,MAAM,EAAEf,IAAI,CAACe;AAJR,SAAP;AAMD,OAPiB,CAAlB;AAQA,aAAOL,WAAP;AACD,KAjBM;AAkBPM,IAAAA,QAlBO,oBAkBEZ,KAlBF,EAkBS;AACd,UAAIJ,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACO,SAAL,CAAeJ,KAAK,CAACE,YAArB,CAAX,CAAX;AACAN,MAAAA,IAAI,GAAG;AACLY,QAAAA,GAAG,EAAEZ,IAAI,CAACY,GADL;AAELC,QAAAA,KAAK,EAAEb,IAAI,CAACa,KAFP;AAGLC,QAAAA,QAAQ,EAAEd,IAAI,CAACc,QAHV;AAILC,QAAAA,MAAM,EAAEf,IAAI,CAACe;AAJR,OAAP;AAMA,aAAOf,IAAP;AACD,KA3BM;AA4BPiB,IAAAA,SA5BO,uBA4BK;AACV,aAAO;AACLL,QAAAA,GAAG,EAAE,0BADA;AAELC,QAAAA,KAAK,EAAE,qBAFF;AAGLK,QAAAA,QAAQ,EAAE,eAHL;AAILJ,QAAAA,QAAQ,EAAE,OAJL;AAKLK,QAAAA,OAAO,EAAE,KALJ;AAMLC,QAAAA,aAAa,EAAE;AANV,OAAP;AAQD;AArCM,GALc;AA4CvBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,eADS,2BACOlB,KADP,QACyB;AAAA,UAATmB,KAAS,QAATA,KAAS;AAChCnB,MAAAA,KAAK,CAACE,YAAN,CAAmBc,aAAnB,CAAiCI,OAAjC,CAAyCD,KAAzC;AACD,KAHQ;AAITE,IAAAA,QAJS,oBAIArB,KAJA,SAIkB;AAAA,UAATC,KAAS,SAATA,KAAS;AACzBD,MAAAA,KAAK,CAACC,KAAN,GAAcA,KAAd;AACD,KANQ;AAQTqB,IAAAA,OARS,mBAQDtB,KARC,SAQgB;AAAA,UAARJ,IAAQ,SAARA,IAAQ;AACvBI,MAAAA,KAAK,CAACE,YAAN,GAAqBN,IAArB;AACD,KAVQ;AAWT2B,IAAAA,UAXS,sBAWEvB,KAXF,SAWmB;AAAA,UAARJ,IAAQ,SAARA,IAAQ;AAC1B,UAAM4B,GAAG,GAAGxB,KAAK,CAACC,KAAN,CAAYwB,SAAZ,CAAsB,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAAClB,GAAT,KAAiBZ,IAAI,CAACY,GAA1B;AAAA,OAA9B,CAAZ;AACAR,MAAAA,KAAK,CAACC,KAAN,CAAY0B,MAAZ,CAAmBH,GAAnB,EAAwB,CAAxB,EAA2B5B,IAA3B;AACA,UAAII,KAAK,CAACE,YAAN,CAAmBM,GAAnB,KAA2BZ,IAAI,CAACY,GAApC,EAAyCR,KAAK,CAACE,YAAN,GAAqBN,IAArB;AAC1C,KAfQ;AAgBTgC,IAAAA,UAhBS,sBAgBE5B,KAhBF,SAgBqB;AAAA,UAAV6B,MAAU,SAAVA,MAAU;AAC5B,UAAML,GAAG,GAAGxB,KAAK,CAACC,KAAN,CAAYwB,SAAZ,CAAsB,UAAA7B,IAAI;AAAA,eAAIA,IAAI,CAACY,GAAL,KAAaqB,MAAjB;AAAA,OAA1B,CAAZ;AACA7B,MAAAA,KAAK,CAACC,KAAN,CAAY0B,MAAZ,CAAmBH,GAAnB,EAAwB,CAAxB;AACD,KAnBQ;AAoBTM,IAAAA,OApBS,mBAoBD9B,KApBC,SAoBgB;AAAA,UAARJ,IAAQ,SAARA,IAAQ;AACvBI,MAAAA,KAAK,CAACC,KAAN,CAAYmB,OAAZ,CAAoBxB,IAApB;AACD;AAtBQ,GA5CY;AAoEvBmC,EAAAA,OAAO,EAAE;AACDC,IAAAA,SADC,4BACqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,gBAAAA,MAAU,SAAVA,MAAU;AAAA;AAAA;AAAA,uBAEJxC,WAAW,CAACyC,QAAZ,EAFI;;AAAA;AAElBjC,gBAAAA,KAFkB;AAGxBgC,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,UAAR;AAAoBlC,kBAAAA,KAAK,EAALA;AAApB,iBAAD,CAAN;AAHwB;AAAA;;AAAA;AAAA;AAAA;AAKxBmC,gBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AALwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ3B,KATM;AAUDC,IAAAA,QAVC,kCAUgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtBL,gBAAAA,MAAsB,SAAtBA,MAAsB;AAAVJ,gBAAAA,MAAU,SAAVA,MAAU;AAAA;AAAA;AAAA,uBAEhBpC,WAAW,CAAC8C,OAAZ,CAAoBV,MAApB,CAFgB;;AAAA;AAE7BjC,gBAAAA,IAF6B;AAGnCqC,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,SAAR;AAAmBvC,kBAAAA,IAAI,EAAJA;AAAnB,iBAAD,CAAN;AAHmC;AAAA;;AAAA;AAAA;AAAA;AAKnCwC,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AALmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQtC,KAlBM;AAmBDG,IAAAA,UAnBC,sCAmBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtBP,gBAAAA,MAAsB,UAAtBA,MAAsB;AAAVJ,gBAAAA,MAAU,UAAVA,MAAU;AAAA;AAAA;AAAA,uBAE/BpC,WAAW,CAACgD,MAAZ,CAAmBZ,MAAnB,CAF+B;;AAAA;AAGrCI,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,YAAR;AAAsBN,kBAAAA,MAAM,EAANA;AAAtB,iBAAD,CAAN;AAHqC;AAAA;;AAAA;AAAA;AAAA;AAKrCO,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AALqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQxC,KA3BM;AA4BDd,IAAAA,UA5BC,sCA4BgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApBU,gBAAAA,MAAoB,UAApBA,MAAoB;AAARrC,gBAAAA,IAAQ,UAARA,IAAQ;AAAA;AAAA;AAAA,uBAEXH,WAAW,CAACiD,IAAZ,CAAiB9C,IAAjB,CAFW;;AAAA;AAE7B+C,gBAAAA,SAF6B;AAGnCV,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,YAAR;AAAsBvC,kBAAAA,IAAI,EAAE+C;AAA5B,iBAAD,CAAN;AAHmC,kDAI5BA,SAJ4B;;AAAA;AAAA;AAAA;AAMnCP,gBAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AANmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAStC,KArCM;AAsCDP,IAAAA,OAtCC,mCAsC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApBG,gBAAAA,MAAoB,UAApBA,MAAoB;AAARrC,gBAAAA,IAAQ,UAARA,IAAQ;AAAA;AAAA;AAAA,uBAERH,WAAW,CAACiD,IAAZ,CAAiB9C,IAAjB,CAFQ;;AAAA;AAE1B+C,gBAAAA,SAF0B;AAGhCV,gBAAAA,MAAM,CAAC;AAAEE,kBAAAA,IAAI,EAAE,SAAR;AAAmBvC,kBAAAA,IAAI,EAAE+C;AAAzB,iBAAD,CAAN;AAHgC,kDAIzBA,SAJyB;;AAAA;AAAA;AAAA;AAMhCP,gBAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AANgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASnC,KA/CM;AAgDDO,IAAAA,KAhDC,iBAgDKC,OAhDL,UAgD4B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAZC,gBAAAA,QAAY,UAAZA,QAAY;AAAA;;AAAA,sBAE3BA,QAAQ,KAAK,OAFc;AAAA;AAAA;AAAA;;AAGvBC,gBAAAA,SAHuB,GAGX;AAChBtC,kBAAAA,KAAK,EAAE,qBADS;AAEhBK,kBAAAA,QAAQ,EAAE,eAFM;AAGhBC,kBAAAA,OAAO,EAAE;AAHO,iBAHW;AAAA;AAAA,uBAQVtB,WAAW,CAACmD,KAAZ,CAAkBG,SAAlB,CARU;;AAAA;AAQvBnD,gBAAAA,IARuB;AAS7BiD,gBAAAA,OAAO,CAACZ,MAAR,CAAe;AAAEE,kBAAAA,IAAI,EAAE,SAAR;AAAmBvC,kBAAAA,IAAI,EAAJA;AAAnB,iBAAf;AAT6B,kDAUtBA,IAVsB;;AAAA;AAAA;AAAA,uBAYVH,WAAW,CAACmD,KAAZ,CAAkBE,QAAlB,CAZU;;AAAA;AAYvBlD,gBAAAA,KAZuB;AAa7BiD,gBAAAA,OAAO,CAACZ,MAAR,CAAe;AAAEE,kBAAAA,IAAI,EAAE,SAAR;AAAmBvC,kBAAAA,IAAI,EAAJA;AAAnB,iBAAf;AAb6B,kDActBA,KAdsB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiB/BwC,gBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,aAAIW,QAAJ,CAAaC,MAAnD;AAjB+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBlC,KApEM;AAqEDC,IAAAA,MArEC,kBAqEML,OArEN,EAqEe;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBA,gBAAAA,OAAO,CAACM,QAAR,CAAiB;AAAEhB,kBAAAA,IAAI,EAAE;AAAR,iBAAjB;AADoB;AAAA;AAAA,uBAGZ1C,WAAW,CAACyD,MAAZ,EAHY;;AAAA;AAIlBL,gBAAAA,OAAO,CAACZ,MAAR,CAAe;AAAEE,kBAAAA,IAAI,EAAE,UAAR;AAAoBlC,kBAAAA,KAAK,EAAE;AAA3B,iBAAf;AACA4C,gBAAAA,OAAO,CAACZ,MAAR,CAAe;AAAEE,kBAAAA,IAAI,EAAE,SAAR;AAAmBvC,kBAAAA,IAAI,EAAE;AAAzB,iBAAf;AALkB;AAAA;;AAAA;AAAA;AAAA;AAOlBwC,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAPkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUrB,KA/EM;AAgFDe,IAAAA,MAhFC,kBAgFMP,OAhFN,UAgF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAZC,gBAAAA,QAAY,UAAZA,QAAY;AAAA;AAAA;AAAA,uBAEbrD,WAAW,CAAC2D,MAAZ,CAAmBN,QAAnB,CAFa;;AAAA;AAE1BlD,gBAAAA,IAF0B;AAGhCiD,gBAAAA,OAAO,CAACZ,MAAR,CAAe;AAAEE,kBAAAA,IAAI,EAAE,SAAR;AAAmBvC,kBAAAA,IAAI,EAAJA;AAAnB,iBAAf;AAHgC,kDAIzBA,IAJyB;;AAAA;AAAA;AAAA;AAMhCwC,gBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AANgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASnC,KAzFM;AA2FDgB,IAAAA,SA3FC,qBA2FSR,OA3FT,UA2F6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAT1B,gBAAAA,KAAS,UAATA,KAAS;AAAA;AAAA,uBAC5B1B,WAAW,CAAC4D,SAAZ,CAAsBlC,KAAtB,CAD4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGnC;AA9FM;AApEc,CAAlB","sourcesContent":["import { userService } from '@/services/user.service.js'\n\nvar localLoggedinUser = null\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user)\n\nexport const userStore = {\n  state: {\n    users: [],\n    loggedInUser: localLoggedinUser\n  },\n  getters: {\n    users(state) {\n      return JSON.parse(JSON.stringify(state.users))\n    },\n    user(state) {\n      return JSON.parse(JSON.stringify(state.loggedInUser))\n    },\n    miniUsers(state) {\n      let copiedUsers = JSON.parse(JSON.stringify(state.users)).map(user => {\n        return {\n          _id: user._id,\n          email: user.email,\n          fullName: user.fullName,\n          imgUrl: user.imgUrl\n        }\n      })\n      return copiedUsers\n    },\n    miniUser(state) {\n      let user = JSON.parse(JSON.stringify(state.loggedInUser))\n      user = {\n        _id: user._id,\n        email: user.email,\n        fullName: user.fullName,\n        imgUrl: user.imgUrl\n      }\n      return user\n    },\n    guestUser() {\n      return {\n        _id: '5fcf43042225f532488c5ac0',\n        email: 'guestUser@tasku.com',\n        password: 'guestpassword',\n        fullName: 'Guest',\n        isAdmin: false,\n        notifications: []\n      }\n    }\n  },\n  mutations: {\n    insertUserNotif(state, { notif }) {\n      state.loggedInUser.notifications.unshift(notif)\n    },\n    setUsers(state, { users }) {\n      state.users = users\n    },\n\n    setUser(state, { user }) {\n      state.loggedInUser = user\n    },\n    updateUser(state, { user }) {\n      const idx = state.users.findIndex(currUser => currUser._id === user._id)\n      state.users.splice(idx, 1, user)\n      if (state.loggedInUser._id === user._id) state.loggedInUser = user\n    },\n    deleteUser(state, { userId }) {\n      const idx = state.users.findIndex(user => user._id === userId)\n      state.users.splice(idx, 1)\n    },\n    addUser(state, { user }) {\n      state.users.unshift(user)\n    }\n  },\n  actions: {\n    async loadUsers({ commit }) {\n      try {\n        const users = await userService.getUsers()\n        commit({ type: 'setUsers', users })\n      } catch (err) {\n        console.log('ERROR:cant find users')\n        throw err\n      }\n    },\n    async loadUser({ commit }, { userId }) {\n      try {\n        const user = await userService.getById(userId)\n        commit({ type: 'setUser', user })\n      } catch (err) {\n        console.log('ERROR:cant find user')\n        throw err\n      }\n    },\n    async removeUser({ commit }, { userId }) {\n      try {\n        await userService.remove(userId)\n        commit({ type: 'removeUser', userId })\n      } catch (err) {\n        console.log('ERROR: cant remove user')\n        throw err\n      }\n    },\n    async updateUser({ commit }, { user }) {\n      try {\n        const savedUser = await userService.save(user)\n        commit({ type: 'updateUser', user: savedUser })\n        return savedUser\n      } catch (err) {\n        console.log('ERROR:cant updated user!')\n        throw err\n      }\n    },\n    async addUser({ commit }, { user }) {\n      try {\n        const savedUser = await userService.save(user)\n        commit({ type: 'addUser', user: savedUser })\n        return savedUser\n      } catch (err) {\n        console.log('ERROR:cant add user')\n        throw err\n      }\n    },\n    async login(context, { userCred }) {\n      try {\n        if (userCred === 'guest') {\n          const guestCred = {\n            email: 'guestUser@tasku.com',\n            password: 'guestpassword',\n            isAdmin: false\n          }\n          const user = await userService.login(guestCred)\n          context.commit({ type: 'setUser', user })\n          return user\n        } else {\n          const user = await userService.login(userCred)\n          context.commit({ type: 'setUser', user })\n          return user\n        }\n      } catch (err) {\n        console.log('USER STORE ERROR TYPE:', err.response.status)\n        throw err\n      }\n    },\n    async logout(context) {\n      context.dispatch({ type: 'deletePrivateSocket' })\n      try {\n        await userService.logout()\n        context.commit({ type: 'setUsers', users: [] })\n        context.commit({ type: 'setUser', user: null })\n      } catch (err) {\n        console.log('ERROR:cant logout')\n        throw err\n      }\n    },\n    async signup(context, { userCred }) {\n      try {\n        const user = await userService.signup(userCred)\n        context.commit({ type: 'setUser', user })\n        return user\n      } catch (err) {\n        console.log('CANT SIGN UP ')\n        throw err\n      }\n    },\n\n    async sendNotif(context, { notif }) {\n      await userService.sendNotif(notif)\n\n    }\n  }\n}\n"]}]}