{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js","mtime":1607173946206},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9vcmVsdmFpem1hbi9EZXNrdG9wL2Rldi9GaW5hbFNwcmludC90YXNrdS1mcm9udGVuZC9UYXNrVS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCB7IHVzZXJTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy91c2VyLnNlcnZpY2UuanMnOwp2YXIgbG9jYWxMb2dnZWRpblVzZXIgPSBudWxsOwppZiAoc2Vzc2lvblN0b3JhZ2UudXNlcikgbG9jYWxMb2dnZWRpblVzZXIgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLnVzZXIpOwpleHBvcnQgdmFyIHVzZXJTdG9yZSA9IHsKICBzdGF0ZTogewogICAgdXNlcnM6IFtdLAogICAgbG9nZ2VkSW5Vc2VyOiBsb2NhbExvZ2dlZGluVXNlcgogIH0sCiAgZ2V0dGVyczogewogICAgdXNlcnM6IGZ1bmN0aW9uIHVzZXJzKHN0YXRlKSB7CiAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlLnVzZXJzKSk7CiAgICB9LAogICAgdXNlcjogZnVuY3Rpb24gdXNlcihzdGF0ZSkgewogICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZS5sb2dnZWRJblVzZXIpKTsKICAgIH0sCiAgICBndWVzdFVzZXI6IGZ1bmN0aW9uIGd1ZXN0VXNlcigpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBfaWQ6ICc1ZmM5MTJjZGM2NWNkNTcyNTRmNDAwZDQnLAogICAgICAgIGVtYWlsOiAnZ3Vlc3RVc2VyQHRhc2t1LmNvbScsCiAgICAgICAgZnVsbE5hbWU6ICdHdWVzdCcsCiAgICAgICAgaXNBZG1pbjogZmFsc2UKICAgICAgfTsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgc2V0VXNlcnM6IGZ1bmN0aW9uIHNldFVzZXJzKHN0YXRlLCBfcmVmKSB7CiAgICAgIHZhciB1c2VycyA9IF9yZWYudXNlcnM7CiAgICAgIHN0YXRlLnVzZXJzID0gdXNlcnM7CiAgICB9LAogICAgc2V0VXNlcjogZnVuY3Rpb24gc2V0VXNlcihzdGF0ZSwgX3JlZjIpIHsKICAgICAgdmFyIHVzZXIgPSBfcmVmMi51c2VyOwogICAgICBzdGF0ZS5sb2dnZWRJblVzZXIgPSB1c2VyOwogICAgfSwKICAgIHVwZGF0ZVVzZXI6IGZ1bmN0aW9uIHVwZGF0ZVVzZXIoc3RhdGUsIF9yZWYzKSB7CiAgICAgIHZhciB1c2VyID0gX3JlZjMudXNlcjsKICAgICAgdmFyIGlkeCA9IHN0YXRlLnVzZXJzLmZpbmRJbmRleChmdW5jdGlvbiAobG9nZ2VkSW5Vc2VyKSB7CiAgICAgICAgcmV0dXJuIHVzZXIuX2lkID09PSBsb2dnZWRJblVzZXIuX2lkOwogICAgICB9KTsKICAgICAgc3RhdGUudXNlcnMuc3BsaWNlKGlkeCwgMSwgdXNlcik7CiAgICB9LAogICAgZGVsZXRlVXNlcjogZnVuY3Rpb24gZGVsZXRlVXNlcihzdGF0ZSwgX3JlZjQpIHsKICAgICAgdmFyIHVzZXJJZCA9IF9yZWY0LnVzZXJJZDsKICAgICAgdmFyIGlkeCA9IHN0YXRlLnVzZXJzLmZpbmRJbmRleChmdW5jdGlvbiAodXNlcikgewogICAgICAgIHJldHVybiB1c2VyLl9pZCA9PT0gdXNlcklkOwogICAgICB9KTsKICAgICAgc3RhdGUudXNlcnMuc3BsaWNlKGlkeCwgMSk7CiAgICB9LAogICAgYWRkVXNlcjogZnVuY3Rpb24gYWRkVXNlcihzdGF0ZSwgX3JlZjUpIHsKICAgICAgdmFyIHVzZXIgPSBfcmVmNS51c2VyOwogICAgICBzdGF0ZS51c2Vycy51bnNoaWZ0KHVzZXIpOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgbG9hZFVzZXJzOiBmdW5jdGlvbiBsb2FkVXNlcnMoX3JlZjYpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgY29tbWl0LCB1c2VyczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNi5jb21taXQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJTZXJ2aWNlLmdldFVzZXJzKCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIHVzZXJzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZXRVc2VycycsCiAgICAgICAgICAgICAgICAgIHVzZXJzOiB1c2VycwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDg7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOmNhbnQgZmluZCB1c2VycycpOwogICAgICAgICAgICAgICAgdGhyb3cgX2NvbnRleHQudDA7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEsIDhdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGxvYWRVc2VyOiBmdW5jdGlvbiBsb2FkVXNlcihfcmVmNywgX3JlZjgpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgdXNlcklkLCB1c2VyOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNy5jb21taXQ7CiAgICAgICAgICAgICAgICB1c2VySWQgPSBfcmVmOC51c2VySWQ7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndXNlcklkOicsIHVzZXJJZCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDM7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gdXNlclNlcnZpY2UuZ2V0QnlJZCh1c2VySWQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICB1c2VyID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndHJ5Jyk7CiAgICAgICAgICAgICAgICBjb21taXQoewogICAgICAgICAgICAgICAgICB0eXBlOiAnc2V0VXNlcicsCiAgICAgICAgICAgICAgICAgIHVzZXI6IHVzZXIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgzKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjpjYW50IGZpbmQgdXNlcicpOwogICAgICAgICAgICAgICAgdGhyb3cgX2NvbnRleHQyLnQwOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzMsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICByZW1vdmVVc2VyOiBmdW5jdGlvbiByZW1vdmVVc2VyKF9yZWY5LCBfcmVmMTApIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgdXNlcklkOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmOS5jb21taXQ7CiAgICAgICAgICAgICAgICB1c2VySWQgPSBfcmVmMTAudXNlcklkOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJTZXJ2aWNlLnJlbW92ZSh1c2VySWQpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBjb21taXQoewogICAgICAgICAgICAgICAgICB0eXBlOiAncmVtb3ZlVXNlcicsCiAgICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcklkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOiBjYW50IHJlbW92ZSB1c2VyJyk7CiAgICAgICAgICAgICAgICB0aHJvdyBfY29udGV4dDMudDA7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIG51bGwsIFtbMiwgOF1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgdXBkYXRlVXNlcjogZnVuY3Rpb24gdXBkYXRlVXNlcihfcmVmMTEsIF9yZWYxMikgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgY29tbWl0LCB1c2VyLCBzYXZlZFVzZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMS5jb21taXQ7CiAgICAgICAgICAgICAgICB1c2VyID0gX3JlZjEyLnVzZXI7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndXNlciBzdG9yZTonLCB1c2VyKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMzsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiB1c2VyU2VydmljZS5zYXZlKHVzZXIpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBzYXZlZFVzZXIgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICd1cGRhdGVVc2VyJywKICAgICAgICAgICAgICAgICAgdXNlcjogc2F2ZWRVc2VyCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBzYXZlZFVzZXIpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSgzKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjpjYW50IHVwZGF0ZWQgdXNlciEnKTsKICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0NC50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCwgbnVsbCwgW1szLCAxMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgYWRkVXNlcjogZnVuY3Rpb24gYWRkVXNlcihfcmVmMTMsIF9yZWYxNCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgY29tbWl0LCB1c2VyLCBzYXZlZFVzZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMy5jb21taXQ7CiAgICAgICAgICAgICAgICB1c2VyID0gX3JlZjE0LnVzZXI7CiAgICAgICAgICAgICAgICBfY29udGV4dDUucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdXNlclNlcnZpY2Uuc2F2ZSh1c2VyKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgc2F2ZWRVc2VyID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgICBjb21taXQoewogICAgICAgICAgICAgICAgICB0eXBlOiAnYWRkVXNlcicsCiAgICAgICAgICAgICAgICAgIHVzZXI6IHNhdmVkVXNlcgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgc2F2ZWRVc2VyKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5wcmV2ID0gMTA7CiAgICAgICAgICAgICAgICBfY29udGV4dDUudDAgPSBfY29udGV4dDVbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6Y2FudCBhZGQgdXNlcicpOwogICAgICAgICAgICAgICAgdGhyb3cgX2NvbnRleHQ1LnQwOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1LCBudWxsLCBbWzIsIDEwXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBsb2dpbjogZnVuY3Rpb24gbG9naW4oY29udGV4dCwgX3JlZjE1KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KCkgewogICAgICAgIHZhciB1c2VyQ3JlZCwgZ3Vlc3RDcmVkLCB1c2VyLCBfdXNlcjsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHVzZXJDcmVkID0gX3JlZjE1LnVzZXJDcmVkOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSAxOwoKICAgICAgICAgICAgICAgIGlmICghKHVzZXJDcmVkID09PSAnZ3Vlc3QnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBndWVzdENyZWQgPSB7CiAgICAgICAgICAgICAgICAgIGVtYWlsOiAnZ3Vlc3RVc2VyQHRhc2t1LmNvbScsCiAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAnZ3Vlc3RwYXNzd29yZCcsCiAgICAgICAgICAgICAgICAgIGlzQWRtaW46IGZhbHNlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJTZXJ2aWNlLmxvZ2luKGd1ZXN0Q3JlZCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHVzZXIgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ3NldFVzZXInLAogICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCB1c2VyKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gdXNlclNlcnZpY2UubG9naW4odXNlckNyZWQpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX3VzZXIgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ3NldFVzZXInLAogICAgICAgICAgICAgICAgICB1c2VyOiBfdXNlcgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgX3VzZXIpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSAxODsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni50MCA9IF9jb250ZXh0NlsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVU0VSIFNUT1JFIEVSUk9SIFRZUEU6JywgX2NvbnRleHQ2LnQwLnJlc3BvbnNlLnN0YXR1cyk7CiAgICAgICAgICAgICAgICB0aHJvdyBfY29udGV4dDYudDA7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYsIG51bGwsIFtbMSwgMThdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGxvZ291dDogZnVuY3Rpb24gbG9nb3V0KGNvbnRleHQpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB1c2VyU2VydmljZS5sb2dvdXQoKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoewogICAgICAgICAgICAgICAgICB0eXBlOiAnc2V0VXNlcnMnLAogICAgICAgICAgICAgICAgICB1c2VyczogW10KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoewogICAgICAgICAgICAgICAgICB0eXBlOiAnc2V0VXNlcicsCiAgICAgICAgICAgICAgICAgIHVzZXI6IG51bGwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfY29udGV4dDcucHJldiA9IDc7CiAgICAgICAgICAgICAgICBfY29udGV4dDcudDAgPSBfY29udGV4dDdbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6Y2FudCBsb2dvdXQnKTsKICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0Ny50MDsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNywgbnVsbCwgW1swLCA3XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzaWdudXA6IGZ1bmN0aW9uIHNpZ251cChjb250ZXh0LCBfcmVmMTYpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgdmFyIHVzZXJDcmVkLCB1c2VyOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB1c2VyQ3JlZCA9IF9yZWYxNi51c2VyQ3JlZDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdG9yZSBnb3QgdGhlIHVzZXIgY3JlZCcsIHVzZXJDcmVkKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiB1c2VyU2VydmljZS5zaWdudXAodXNlckNyZWQpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICB1c2VyID0gX2NvbnRleHQ4LnNlbnQ7CiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbW1pdCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZXRVc2VyJywKICAgICAgICAgICAgICAgICAgdXNlcjogdXNlcgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwgdXNlcik7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDgucHJldiA9IDEwOwogICAgICAgICAgICAgICAgX2NvbnRleHQ4LnQwID0gX2NvbnRleHQ4WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NBTlQgU0lHTiBVUCAnKTsKICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0OC50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOCwgbnVsbCwgW1syLCAxMF1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8gYXN5bmMgdXBsb2FkVXNlckltZyhjb250ZXh0LCB7IGltZyB9KSB7CiAgICAvLyAgIGNvbnNvbGUubG9nKCd0aGUgaW1hZ2UnLGltZywgY29udGV4dCwgJ2NvbnRleHQnKQogICAgLy8gfQogICAgc2VuZE5vdGlmOiBmdW5jdGlvbiBzZW5kTm90aWYoY29udGV4dCwgX3JlZjE3KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU5KCkgewogICAgICAgIHZhciBub3RpZjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbm90aWYgPSBfcmVmMTcubm90aWY7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbm90aWYgaW4gc3RvcmU6Jywgbm90aWYpOwogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJTZXJ2aWNlLnNlbmROb3RpZihub3RpZik7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/user.store.js"],"names":["userService","localLoggedinUser","sessionStorage","user","JSON","parse","userStore","state","users","loggedInUser","getters","stringify","guestUser","_id","email","fullName","isAdmin","mutations","setUsers","setUser","updateUser","idx","findIndex","splice","deleteUser","userId","addUser","unshift","actions","loadUsers","commit","getUsers","type","console","log","loadUser","getById","removeUser","remove","save","savedUser","login","context","userCred","guestCred","password","response","status","logout","signup","sendNotif","notif"],"mappings":"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","sourcesContent":["import { userService } from '@/services/user.service.js'\n\nvar localLoggedinUser = null\nif (sessionStorage.user) localLoggedinUser = JSON.parse(sessionStorage.user)\n\nexport const userStore = {\n  state: {\n    users: [],\n    loggedInUser: localLoggedinUser\n  },\n  getters: {\n    users(state) {\n      return JSON.parse(JSON.stringify(state.users))\n    },\n    user(state) {\n      return JSON.parse(JSON.stringify(state.loggedInUser))\n    },\n    guestUser() {\n      return {\n        _id: '5fc912cdc65cd57254f400d4',\n        email: 'guestUser@tasku.com',\n        fullName: 'Guest',\n        isAdmin: false\n      }\n    }\n  },\n  mutations: {\n    setUsers(state, { users }) {\n      state.users = users\n    },\n    setUser(state, { user }) {\n      state.loggedInUser = user\n    },\n    updateUser(state, { user }) {\n      const idx = state.users.findIndex(\n        loggedInUser => user._id === loggedInUser._id\n      )\n      state.users.splice(idx, 1, user)\n    },\n    deleteUser(state, { userId }) {\n      const idx = state.users.findIndex(user => user._id === userId)\n      state.users.splice(idx, 1)\n    },\n    addUser(state, { user }) {\n      state.users.unshift(user)\n    }\n  },\n  actions: {\n    async loadUsers({ commit }) {\n      try {\n        const users = await userService.getUsers()\n        commit({ type: 'setUsers', users })\n      } catch (err) {\n        console.log('ERROR:cant find users')\n        throw err\n      }\n    },\n    async loadUser({ commit }, { userId }) {\n      console.log('userId:', userId)\n      try {\n        const user = await userService.getById(userId)\n        console.log('try')\n        commit({ type: 'setUser', user })\n      } catch (err) {\n        console.log('ERROR:cant find user')\n        throw err\n      }\n    },\n    async removeUser({ commit }, { userId }) {\n      try {\n        await userService.remove(userId)\n        commit({ type: 'removeUser', userId })\n      } catch (err) {\n        console.log('ERROR: cant remove user')\n        throw err\n      }\n    },\n    async updateUser({ commit }, { user }) {\n      console.log('user store:', user)\n      try {\n        const savedUser = await userService.save(user)\n        commit({ type: 'updateUser', user: savedUser })\n        return savedUser\n      } catch (err) {\n        console.log('ERROR:cant updated user!')\n        throw err\n      }\n    },\n    async addUser({ commit }, { user }) {\n      try {\n        const savedUser = await userService.save(user)\n        commit({ type: 'addUser', user: savedUser })\n        return savedUser\n      } catch (err) {\n        console.log('ERROR:cant add user')\n        throw err\n      }\n    },\n    async login(context, { userCred }) {\n      try {\n        if (userCred === 'guest') {\n          const guestCred = {\n            email: 'guestUser@tasku.com',\n            password: 'guestpassword',\n            isAdmin: false\n          }\n          const user = await userService.login(guestCred)\n          context.commit({ type: 'setUser', user })\n          return user\n        } else {\n          const user = await userService.login(userCred)\n          context.commit({ type: 'setUser', user })\n          return user\n        }\n      } catch (err) {\n        console.log('USER STORE ERROR TYPE:', err.response.status)\n        throw err\n      }\n    },\n    async logout(context) {\n      try {\n        await userService.logout()\n        context.commit({ type: 'setUsers', users: [] })\n        context.commit({ type: 'setUser', user: null })\n      } catch (err) {\n        console.log('ERROR:cant logout')\n        throw err\n      }\n    },\n    async signup(context, { userCred }) {\n      console.log('store got the user cred', userCred)\n      try {\n        const user = await userService.signup(userCred)\n        context.commit({ type: 'setUser', user })\n        return user\n      } catch (err) {\n        console.log('CANT SIGN UP ')\n        throw err\n      }\n    },\n    // async uploadUserImg(context, { img }) {\n    //   console.log('the image',img, context, 'context')\n    // }\n    async sendNotif(context, { notif }) {\n      console.log('notif in store:', notif)\n      await userService.sendNotif(notif)\n\n      // context.commit({ type: 'setUser', user })\n    }\n  }\n}\n"]}]}