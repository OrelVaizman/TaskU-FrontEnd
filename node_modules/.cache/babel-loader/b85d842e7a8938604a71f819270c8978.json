{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue","mtime":1607418824550},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYm9hcmQuc2VydmljZSc7CmltcG9ydCBBdmF0YXIgZnJvbSAnQC9jbXBzL3VzZXItYXZhdGFyLnZ1ZSc7CmltcG9ydCB1cGxvYWRJbWcgZnJvbSAnLi91cGxvYWQtaW1nJzsKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ3Rhc2stcG9zdHMnLAogIHByb3BzOiB7CiAgICBwb3N0czogewogICAgICB0eXBlOiBBcnJheQogICAgfSwKICAgIHRhc2s6IE9iamVjdAogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHVzZXI6IGZ1bmN0aW9uIHVzZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLnVzZXI7CiAgICB9LAogICAgbWluaVVzZXI6IGZ1bmN0aW9uIG1pbmlVc2VyKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5taW5pVXNlcjsKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBuZXdQb3N0OiBudWxsLAogICAgICBjb3BpZWRQb3N0czogbnVsbCwKICAgICAgY29tcG9uZW50S2V5OiAwLAogICAgICBpbWc6IG51bGwsCiAgICAgIGhvdmVyZWRQb3N0SWQ6IG51bGwsCiAgICAgIGlzSG92ZXJpbmc6IGZhbHNlCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuY29waWVkUG9zdHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucG9zdHMpKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHNldEhvdmVyZWRQb3N0OiBmdW5jdGlvbiBzZXRIb3ZlcmVkUG9zdChwb3N0SWQpIHsKICAgICAgdGhpcy5pc0hvdmVyaW5nID0gdHJ1ZTsKICAgICAgdGhpcy5ob3ZlcmVkUG9zdElkID0gcG9zdElkOwogICAgfSwKICAgIGltZ1VybDogZnVuY3Rpb24gaW1nVXJsKHVybCkgewogICAgICB0aGlzLmltZyA9IHVybDsKICAgIH0sCiAgICBnZXRUaW1lOiBmdW5jdGlvbiBnZXRUaW1lKHRpbWUpIHsKICAgICAgcmV0dXJuIG1vbWVudCh0aW1lKS5mcm9tTm93KCk7CiAgICB9LAogICAgZGVsZXRlUG9zdDogZnVuY3Rpb24gZGVsZXRlUG9zdChwb3N0SWQpIHsKICAgICAgdGhpcy4kZW1pdCgnZGVsZXRlUG9zdCcsIHBvc3RJZCk7CiAgICB9LAogICAgYWRkUG9zdDogZnVuY3Rpb24gYWRkUG9zdCgpIHsKICAgICAgaWYgKCF0aGlzLm5ld1Bvc3QpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBwb3N0ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5UG9zdCgpOwogICAgICBwb3N0LnR4dCA9IHRoaXMubmV3UG9zdDsKICAgICAgcG9zdC5ieVVzZXIgPSB0aGlzLnVzZXI7CiAgICAgIHBvc3QuaW1nVXJsID0gdGhpcy5pbWc7CiAgICAgIHRoaXMuY29waWVkUG9zdHMudW5zaGlmdChwb3N0KTsKICAgICAgdmFyIHR4dCA9ICIiLmNvbmNhdCh0aGlzLnVzZXIuZnVsbE5hbWUsICIgYWRkZWQgbmV3IHBvc3Qgb24gdGFzazogIikuY29uY2F0KHRoaXMudGFzay50eHQsICIgIik7CiAgICAgIHZhciBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KHR4dCwgdGhpcy5taW5pVXNlcik7CiAgICAgIG5ld0FjdGl2aXR5LnRhc2tJZCA9IHRoaXMudGFzay5pZDsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlUG9zdHMnLCB0aGlzLmNvcGllZFBvc3RzLCBuZXdBY3Rpdml0eSk7CiAgICAgIHRoaXMubmV3UG9zdCA9ICcnOwogICAgICB0aGlzLiRub3RpZnkoewogICAgICAgIG1lc3NhZ2U6ICdOZXcgcG9zdCBwdWJsaXNoZWQnLAogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgIH0pOwogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgQXZhdGFyOiBBdmF0YXIsCiAgICB1cGxvYWRJbWc6IHVwbG9hZEltZwogIH0sCiAgd2F0Y2g6IHsKICAgICckcm91dGUucGFyYW1zLnRhc2tJZCc6IGZ1bmN0aW9uICRyb3V0ZVBhcmFtc1Rhc2tJZCgpIHsKICAgICAgdGhpcy5jb3BpZWRQb3N0cyA9IHRoaXMucG9zdHM7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["task-posts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,SAAA,YAAA,QAAA,2BAAA;AACA,OAAA,MAAA,MAAA,wBAAA;AACA,OAAA,SAAA,MAAA,cAAA;AAEA,OAAA,MAAA,MAAA,QAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KADA;AAIA,IAAA,IAAA,EAAA;AAJA,GAFA;AAQA,EAAA,QAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,QAAA;AACA;AANA,GARA;AAgBA,EAAA,IAhBA,kBAgBA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,IADA;AAEA,MAAA,WAAA,EAAA,IAFA;AAGA,MAAA,YAAA,EAAA,CAHA;AAIA,MAAA,GAAA,EAAA,IAJA;AAKA,MAAA,aAAA,EAAA,IALA;AAMA,MAAA,UAAA,EAAA;AANA,KAAA;AAQA,GAzBA;AA0BA,EAAA,OA1BA,qBA0BA;AACA,SAAA,WAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,KAAA,KAAA,CAAA,CAAA;AACA,GA5BA;AA6BA,EAAA,OAAA,EAAA;AACA,IAAA,cADA,0BACA,MADA,EACA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,WAAA,aAAA,GAAA,MAAA;AACA,KAJA;AAKA,IAAA,MALA,kBAKA,GALA,EAKA;AACA,WAAA,GAAA,GAAA,GAAA;AACA,KAPA;AAQA,IAAA,OARA,mBAQA,IARA,EAQA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,CAAA,OAAA,EAAA;AACA,KAVA;AAWA,IAAA,UAXA,sBAWA,MAXA,EAWA;AACA,WAAA,KAAA,CAAA,YAAA,EAAA,MAAA;AACA,KAbA;AAcA,IAAA,OAdA,qBAcA;AACA,UAAA,CAAA,KAAA,OAAA,EAAA;AACA;AACA;;AACA,UAAA,IAAA,GAAA,YAAA,CAAA,YAAA,EAAA;AACA,MAAA,IAAA,CAAA,GAAA,GAAA,KAAA,OAAA;AACA,MAAA,IAAA,CAAA,MAAA,GAAA,KAAA,IAAA;AACA,MAAA,IAAA,CAAA,MAAA,GAAA,KAAA,GAAA;AACA,WAAA,WAAA,CAAA,OAAA,CAAA,IAAA;AACA,UAAA,GAAA,aAAA,KAAA,IAAA,CAAA,QAAA,sCAAA,KAAA,IAAA,CAAA,GAAA,MAAA;AACA,UAAA,WAAA,GAAA,YAAA,CAAA,gBAAA,CAAA,GAAA,EAAA,KAAA,QAAA,CAAA;AACA,MAAA,WAAA,CAAA,MAAA,GAAA,KAAA,IAAA,CAAA,EAAA;AACA,WAAA,KAAA,CAAA,aAAA,EAAA,KAAA,WAAA,EAAA,WAAA;AACA,WAAA,OAAA,GAAA,EAAA;AACA,WAAA,OAAA,CAAA;AACA,QAAA,OAAA,EAAA,oBADA;AAEA,QAAA,QAAA,EAAA,aAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAAA;AAKA;AAjCA,GA7BA;AAgEA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA,MADA;AAEA,IAAA,SAAA,EAAA;AAFA,GAhEA;AAoEA,EAAA,KAAA,EAAA;AACA,0BADA,gCACA;AACA,WAAA,WAAA,GAAA,KAAA,KAAA;AACA;AAHA;AApEA,CAAA","sourcesContent":["<template>\n  <section class=\"task-posts relative\">\n    <form class=\"task-post-form relative\" @submit.prevent=\"addPost\">\n      <textarea\n        class=\"el-input-text-editor\"\n        @keydown.enter.exact.prevent=\"addPost\"\n        rows=\"3\"\n        placeholder=\"Write a massge...\"\n        v-model=\"newPost\"\n      />\n      <upload-img @sendImgUrl=\"imgUrl\" />\n      <button class=\"post-btn\">Post</button>\n    </form>\n    <ul class=\"posts-list clean-list flex column align-center\">\n      <li\n        class=\"task-post-card relative\"\n        v-for=\"post in copiedPosts\"\n        :key=\"post.id\"\n        @mouseover=\"setHoveredPost(post.id)\"\n        @mouseleave=\"isHovering = false\"\n      >\n        <div class=\"user-info-container flex space-between\">\n          <div class=\"flex align-center\">\n            <avatar :user=\"post.byUser\" />\n\n            <span class=\"by-user\" v-if=\"post.byUser\">{{\n              post.byUser.fullName\n            }}</span>\n          </div>\n\n          <h5>\n            <i class=\"far fa-clock\"></i>\n            {{ getTime(post.createdAt) }}\n          </h5>\n        </div>\n        <el-divider />\n        <div class=\"task-post-container flex space-between\">\n          <span>{{ post.txt }}</span>\n          <!-- <div class=\"ratio-square\"> -->\n          <img class=\"uploaded-img\" v-if=\"post.imgUrl\" :src=\"post.imgUrl\" />\n          <!-- </div> -->\n        </div>\n        <button\n          class=\"delete-post-btn\"\n          @click=\"deletePost(post.id)\"\n          v-if=\"isHovering && hoveredPostId === post.id\"\n        >\n          <i class=\"fal fa-trash\"></i>\n        </button>\n      </li>\n    </ul>\n  </section>\n</template>\n<script>\nimport { boardService } from '../services/board.service'\nimport Avatar from '@/cmps/user-avatar.vue'\nimport uploadImg from './upload-img'\n\nimport moment from 'moment'\n\nexport default {\n  name: 'task-posts',\n  props: {\n    posts: {\n      type: Array\n    },\n    task: Object\n  },\n  computed: {\n    user() {\n      return this.$store.getters.user\n    },\n    miniUser() {\n      return this.$store.getters.miniUser\n    }\n  },\n  data() {\n    return {\n      newPost: null,\n      copiedPosts: null,\n      componentKey: 0,\n      img: null,\n      hoveredPostId: null,\n      isHovering: false\n    }\n  },\n  created() {\n    this.copiedPosts = JSON.parse(JSON.stringify(this.posts))\n  },\n  methods: {\n    setHoveredPost(postId) {\n      this.isHovering = true\n      this.hoveredPostId = postId\n    },\n    imgUrl(url) {\n      this.img = url\n    },\n    getTime(time) {\n      return moment(time).fromNow()\n    },\n    deletePost(postId) {\n      this.$emit('deletePost', postId)\n    },\n    addPost() {\n      if (!this.newPost) {\n        return\n      }\n      const post = boardService.getEmptyPost()\n      post.txt = this.newPost\n      post.byUser = this.user\n      post.imgUrl = this.img\n      this.copiedPosts.unshift(post)\n      const txt = `${this.user.fullName} added new post on task: ${this.task.txt} `\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.taskId = this.task.id\n      this.$emit('updatePosts', this.copiedPosts, newActivity)\n      this.newPost = ''\n      this.$notify({\n        message: 'New post published',\n        position: 'bottom-left',\n        duration: 2000\n      })\n    }\n  },\n  components: {\n    Avatar,\n    uploadImg\n  },\n  watch: {\n    '$route.params.taskId'() {\n      this.copiedPosts = this.posts\n    }\n  }\n}\n</script>\n\n<style></style>\n"],"sourceRoot":"src/cmps"}]}