{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue","mtime":1607175842074},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["task-preview.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<li\n    v-if=\"taskCopy\"\n    class=\"task-preview flex space-between align-center width100\"\n  >\n    <div class=\"flex space-between align-center width100\">\n      <span class=\"task-color\" :style=\"taskBgc\"></span>\n      <button class=\"btn-close\" @click=\"deleteTask\">\n        <i class=\"task-icon btn-trash fa-icon far fa-trash-alt\"></i>\n      </button>\n      <div class=\"task-txt\">\n        <span\n          class=\"editable\"\n          spellcheck=\"false\"\n          @blur=\"updateTaskTxt\"\n          @keydown.enter=\"updateTaskTxt\"\n          contenteditable\n          >{{ taskCopy.txt }}</span\n        >\n      </div>\n      <el-badge\n        :hidden=\"postsLegnth\"\n        :value=\"task.posts.length\"\n        class=\"item\"\n        type=\"primary\"\n      >\n        <i\n          @click=\"sendToTaskDetails\"\n          v-tooltip.top=\"'Task Details'\"\n          :style=\"postosColorBtn\"\n          class=\"task-icon far fa-comment fa-icon\"\n        ></i>\n      </el-badge>\n    </div>\n    <div class=\"task-details flex\">\n      <div class=\"headers flex\">\n        <span class=\"members-preview relative task-item\">\n          <members\n            :hiddenBadge=\"membersLegnth\"\n            toolTipTxt=\"Task Members\"\n            classIcon=\"task-icon\"\n            :members=\"taskCopy.members\"\n          >\n            <add-members\n              class=\"top-left\"\n              slot=\"add-members\"\n              firstTitle=\"Task members\"\n              secondTitle=\"Invite Board members\"\n              :members=\"taskCopy.members\"\n              :allMembers=\"filteredBoardMembers\"\n              @addMember=\"addTaskMember\"\n              @removeMember=\"removeTaskMember\"\n            />\n          </members>\n        </span>\n\n        <span\n          @click=\"toggleStatuses\"\n          class=\"status relative task-item\"\n          :style=\"getStyleStr(taskCopy.status.color)\"\n          >{{ taskCopy.status.txt }}\n          <label-picker\n            v-if=\"isStatusesShowen\"\n            :opts=\"statuses\"\n            type=\"status\"\n            @updateTaskStatus=\"updateTaskStatus\"\n        /></span>\n\n        <span\n          @click=\"togglePriors\"\n          class=\"priority relative task-item\"\n          :style=\"getStyleStr(taskCopy.priority.color)\"\n          >{{ taskCopy.priority.txt }}\n          <label-picker\n            v-if=\"isPriorsShowen\"\n            :opts=\"priorities\"\n            type=\"priority\"\n            @updateTaskPriority=\"updateTaskPriority\"\n        /></span>\n\n        <span class=\"date-picker task-item\">\n          <el-date-picker\n            v-tooltip.top=\"'Due Date'\"\n            class=\"date-input\"\n            @change=\"updateTaskDate\"\n            v-model=\"taskCopy.dueDate\"\n            type=\"date\"\n            placeholder=\"Pick a date\"\n          >\n          </el-date-picker>\n        </span>\n        <!-- <span class=\"right-square\"><span class=\"right-line\"></span></span> -->\n      </div>\n    </div>\n    <div\n      class=\"back-drop-layer\"\n      v-if=\"isStatusesShowen || isPriorsShowen\"\n      @click.stop=\"closePopups\"\n    ></div>\n  </li>\n</template>\n<script>\nimport members from '@/cmps/members'\nimport addMembers from '@/cmps/add-members'\nimport { eventBus } from '@/services/event-bus.service'\nimport labelPicker from './label-picker'\nimport { boardService } from '@/services/board.service'\nimport moment from 'moment'\n\nexport default {\n  components: { labelPicker, addMembers, members },\n  name: 'task-preview',\n  data() {\n    return {\n      taskCopy: null,\n      isStatusesShowen: false,\n      isPriorsShowen: false,\n      activity: null,\n    }\n  },\n  props: {\n    taskColor: String,\n    task: Object,\n    statuses: Array,\n    priorities: Array,\n    groupId: String,\n    boardMembers: [Array, Object],\n    user: Object,\n  },\n\n  computed: {\n    postsLegnth() {\n      return this.task.posts.length > 0 ? false : true\n    },\n    postosColorBtn() {\n      return this.task.posts.length > 0 ? 'color: #0085ff;' : ''\n    },\n    membersLegnth() {\n      return this.task.members.length > 0 ? false : true\n    },\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    filteredBoardMembers() {\n      const boardMembers = this.boardMembers\n      const taskMembers = this.taskCopy.members\n      if (taskMembers) {\n        const filteredBoardMembers = boardMembers.filter((bMember) => {\n          return taskMembers.every((tMember) => {\n            return tMember._id !== bMember._id\n          })\n        })\n        return filteredBoardMembers\n      } else {\n        return boardMembers\n      }\n    },\n  },\n\n  methods: {\n    updateTaskDate() {\n      const date = moment(this.taskCopy.dueDate).format('ll')\n      const txt = `Task due ${this.taskCopy.txt} date was changed to ${date}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.taskId = this.taskCopy.id\n      this.activity = newActivity\n      this.$notify({\n        message: 'Task due date updated',\n        position: 'bottom-left',\n        duration: 2000,\n      })\n      this.updateTask()\n    },\n\n    addTaskMember(member) {\n      const txt = `Member ${member.fullName} was added to task`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.taskId = this.taskCopy.id\n      this.taskCopy.members.unshift(member)\n      this.activity = newActivity\n      this.$notify({\n        message: 'Member assinged to task',\n        position: 'bottom-left',\n        duration: 2000,\n      })\n      this.updateTask()\n    },\n    removeTaskMember(member) {\n      const idx = this.taskCopy.members.findIndex(\n        (tMember) => tMember._id === member._id\n      )\n      const txt = `Member ${member.fullName} was removed from task`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.taskId = this.taskCopy.id\n      this.taskCopy.members.splice(idx, 1)\n      this.activity = newActivity\n      this.$notify({\n        message: 'Member removed from task',\n        position: 'bottom-left',\n        duration: 2000,\n      })\n      this.updateTask()\n    },\n    getStyleStr(colorStr) {\n      return `backgroundColor:${colorStr}`\n    },\n    toggleStatuses() {\n      this.isStatusesShowen = !this.isStatusesShowen\n    },\n    togglePriors() {\n      this.isPriorsShowen = !this.isPriorsShowen\n    },\n    deleteTask() {\n      this.$emit('deleteTask', this.taskCopy.id)\n    },\n    updateTaskTxt(ev) {\n      ev.target.blur()\n      if (ev.target.innerText === this.taskCopy.txt) return\n      else {\n        const prevTxt = this.taskCopy.txt\n        this.taskCopy.txt = ev.target.innerText\n        const txt = `Task '${prevTxt}' was changed to '${ev.target.innerText}'`\n        let newActivity = boardService.getEmptyActivity(txt, this.user)\n        newActivity.taskId = this.taskCopy.id\n        this.activity = newActivity\n\n        this.$notify({\n          message: 'Task txt updated',\n          position: 'bottom-left',\n          duration: 2000,\n        })\n        this.updateTask()\n      }\n    },\n    updateTask() {\n      this.$emit('updateTask', this.taskCopy, this.activity)\n    },\n    sendToTaskDetails() {\n      if (this.$route.params.taskId === this.task.id) {\n        return\n      }\n      this.$router.push(\n        `/board/${this.$route.params.boardId}/task/${this.task.id}`\n      )\n    },\n    updateComponentTask(task) {\n      if (this.taskCopy.id === this.$route.params.taskId) {\n        this.taskCopy = task\n      }\n    },\n    updateTaskPriority(opt) {\n      const txt = `Task priority was updated to ${opt.txt}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.taskId = this.taskCopy.id\n      this.activity = newActivity\n\n      this.taskCopy.priority.txt = opt.txt\n      this.taskCopy.priority.color = opt.color\n      this.$notify({\n        message: 'Task priority updated',\n        position: 'bottom-left',\n        duration: 2000,\n      })\n      this.updateTask()\n      this.isPriorsShowen = false\n    },\n    updateTaskStatus(opt) {\n      const txt = `Task status was updated to ${opt.txt}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.taskId = this.taskCopy.id\n      this.activity = newActivity\n\n      this.taskCopy.status.txt = opt.txt\n      this.taskCopy.status.color = opt.color\n      this.$notify({\n        message: 'Task status updated',\n        position: 'bottom-left',\n        duration: 2000,\n      })\n      this.updateTask()\n      this.isPriorsShowen = false\n    },\n    closePopups() {\n      this.isStatusesShowen = false\n      this.isPriorsShowen = false\n    },\n  },\n  created() {\n    eventBus.$on('updateTaskPreview', this.updateComponentTask)\n    eventBus.$on('updateTaskPreviewDestory', (task) => {\n      this.taskCopy = task\n      this.activity = null\n      this.updateTask()\n    })\n    this.taskCopy = this.task\n  },\n}\n</script>\n"],"sourceRoot":"src/cmps"}]}