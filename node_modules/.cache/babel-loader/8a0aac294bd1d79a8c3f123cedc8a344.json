{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue","mtime":1607362716130},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["task-preview.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <li\n        v-if=\"taskCopy\"\n        class=\"task-preview flex space-between align-center width100\"\n    >\n        <div class=\"flex space-between align-center width100\">\n            <!-- <div class=\"flex\"> -->\n            <span class=\"task-color\" :style=\"taskBgc\"></span>\n            <button class=\"btn-close\" @click.stop=\"deleteTask\">\n                <i class=\"task-icon btn-trash fa-icon far fa-trash-alt\"></i>\n            </button>\n            <div class=\"task-txt\">\n                <span\n                    class=\"editable\"\n                    spellcheck=\"false\"\n                    @blur=\"updateTaskTxt\"\n                    @keydown.enter=\"updateTaskTxt\"\n                    contenteditable\n                    >{{ taskCopy.txt }}</span\n                >\n            </div>\n            <!-- </div> -->\n            <el-badge\n                :hidden=\"postsLegnth\"\n                :value=\"task.posts.length\"\n                class=\"item\"\n                type=\"primary\"\n            >\n                <i\n                    @click.stop=\"sendToTaskDetails\"\n                    v-tooltip.top=\"'Task Details'\"\n                    :style=\"postosColorBtn\"\n                    class=\"task-icon far fa-comment fa-icon\"\n                ></i>\n            </el-badge>\n        </div>\n        <div class=\"task-details flex\">\n            <div class=\"headers flex\">\n                <span class=\"members-preview relative task-item\">\n                    <members\n                        className=\"img-profile-preview\"\n                        :hiddenBadge=\"membersLegnth\"\n                        toolTipTxt=\"Task Members\"\n                        classIcon=\"task-icon\"\n                        :members=\"taskCopy.members\"\n                    >\n                        <add-members\n                            class=\"top-left\"\n                            slot=\"add-members\"\n                            firstTitle=\"Task members\"\n                            secondTitle=\"Board members\"\n                            :members=\"taskCopy.members\"\n                            :allMembers=\"filteredBoardMembers\"\n                            @addMember=\"addTaskMember\"\n                            @removeMember=\"removeTaskMember\"\n                        />\n                    </members>\n                </span>\n\n                <span\n                    @click.stop=\"toggleStatuses\"\n                    class=\"status relative task-item\"\n                    :style=\"getStyleStr(taskCopy.status.color)\"\n                    >{{ taskCopy.status.txt }}\n                    <label-picker\n                        v-if=\"isStatusesShowen\"\n                        :opts=\"statuses\"\n                        type=\"status\"\n                        @updateTaskStatus=\"updateTaskStatus\"\n                /></span>\n\n                <span\n                    @click.stop=\"togglePriors\"\n                    class=\"priority relative task-item\"\n                    :style=\"getStyleStr(taskCopy.priority.color)\"\n                    >{{ taskCopy.priority.txt }}\n                    <label-picker\n                        v-if=\"isPriorsShowen\"\n                        :opts=\"priorities\"\n                        type=\"priority\"\n                        @updateTaskPriority=\"updateTaskPriority\"\n                /></span>\n\n                <span class=\"date-picker task-item\">\n                    <el-date-picker\n                        v-tooltip.top=\"'Due Date'\"\n                        class=\"date-input\"\n                        @change=\"updateTaskDate\"\n                        v-model=\"taskCopy.dueDate\"\n                        type=\"date\"\n                        placeholder=\"Pick a date\"\n                    >\n                    </el-date-picker>\n                </span>\n\n                <!-- <span\n          class=\"task-details-preview task-item\"\n          v-tooltip.top=\"'Details'\"\n          @change=\"openTaskDetails\"\n        >Details\n        </span> -->\n            </div>\n        </div>\n        <div\n            class=\"back-drop-layer\"\n            v-if=\"isStatusesShowen || isPriorsShowen\"\n            @click.stop=\"closePopups\"\n        ></div>\n    </li>\n</template>\n<script>\nimport { boardService } from '@/services/board.service'\nimport { userService } from '../services/user.service'\nimport { eventBus } from '@/services/event-bus.service'\nimport members from '@/cmps/members'\nimport addMembers from '@/cmps/add-members'\nimport labelPicker from './label-picker'\nimport moment from 'moment'\nexport default {\n    components: { labelPicker, addMembers, members },\n    name: 'task-preview',\n    data() {\n        return {\n            taskCopy: null,\n            isStatusesShowen: false,\n            isPriorsShowen: false,\n            activity: null,\n        }\n    },\n    props: {\n        taskColor: String,\n        task: Object,\n        statuses: Array,\n        priorities: Array,\n        groupId: String,\n        boardMembers: [Array, Object],\n        user: Object,\n    },\n\n    computed: {\n        miniUser() {\n            return this.$store.getters.miniUser\n        },\n        postsLegnth() {\n            return this.task.posts.length > 0 ? false : true\n        },\n        postosColorBtn() {\n            return this.task.posts.length > 0 ? 'color: #0085ff;' : ''\n        },\n        membersLegnth() {\n            return this.task.members.length > 3 ? false : true\n        },\n        taskBgc() {\n            return { backgroundColor: this.taskColor }\n        },\n        filteredBoardMembers() {\n            const boardMembers = this.boardMembers\n            const taskMembers = this.taskCopy.members\n            if (taskMembers) {\n                const filteredBoardMembers = boardMembers.filter((bMember) => {\n                    return taskMembers.every((tMember) => {\n                        return tMember._id !== bMember._id\n                    })\n                })\n                return filteredBoardMembers\n            } else {\n                return boardMembers\n            }\n        },\n    },\n\n    methods: {\n        openTaskDetails() {\n            return\n        },\n        updateTaskDate() {\n            const date = moment(this.taskCopy.dueDate).format('ll')\n            if (date === 'Invalid date') return\n            this.taskCopy.members.forEach((member) => {\n                let newNotif = userService.getEmptyNotif()\n                newNotif.txt = `Upadte task due date to \"${date}\"`\n                newNotif.type = 'all'\n                newNotif.byUser = {\n                    mail: this.user.email,\n                    imgUrl: this.user.imgUrl,\n                }\n                newNotif.toUserId = member._id\n                this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n            })\n            const txt = `Task due ${this.taskCopy.txt} date was changed to ${date}`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            newActivity.taskId = this.taskCopy.id\n            this.activity = newActivity\n            this.$notify({\n                message: 'Task due date updated',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.updateTask()\n        },\n\n        addTaskMember(member) {\n            const txt = `Member ${member.fullName} was added to task`\n            let newNotif = userService.getEmptyNotif()\n            newNotif.txt = `assigned you to \"${this.taskCopy.txt}\"`\n            newNotif.type = 'assigned'\n            newNotif.byUser = {\n                mail: this.user.email,\n                imgUrl: this.user.imgUrl,\n            }\n            newNotif.toUserId = member._id\n            this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            newActivity.taskId = this.taskCopy.id\n            this.taskCopy.members.unshift(member)\n            this.activity = newActivity\n            this.$notify({\n                message: 'Member assinged to task',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.updateTask()\n        },\n        removeTaskMember(member) {\n            let newNotif = userService.getEmptyNotif()\n            newNotif.txt = `${this.user.fullName} took you off from task \"${this.taskCopy.txt}\"`\n            newNotif.type = 'all'\n            newNotif.byUser = {\n                mail: this.user.email,\n                imgUrl: this.user.imgUrl,\n            }\n            newNotif.toUserId = member._id\n            this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n            const idx = this.taskCopy.members.findIndex(\n                (tMember) => tMember._id === member._id\n            )\n            const txt = `Member ${member.fullName} was removed from task`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            newActivity.taskId = this.taskCopy.id\n            this.taskCopy.members.splice(idx, 1)\n            this.activity = newActivity\n            this.$notify({\n                message: 'Member removed from task',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.updateTask()\n        },\n        getStyleStr(colorStr) {\n            return `backgroundColor:${colorStr}`\n        },\n        toggleStatuses() {\n            this.isStatusesShowen = !this.isStatusesShowen\n        },\n        togglePriors() {\n            this.isPriorsShowen = !this.isPriorsShowen\n        },\n        deleteTask() {\n            this.$emit('deleteTask', this.taskCopy.id)\n        },\n        updateTaskTxt(ev) {\n            ev.target.blur()\n            if (ev.target.innerText === this.taskCopy.txt) return\n            else {\n                this.taskCopy.members.forEach((member) => {\n                    let newNotif = userService.getEmptyNotif()\n                    newNotif.txt = `Upadte task content to \"${ev.target.innerText}\"`\n                    newNotif.type = 'all'\n                    newNotif.byUser = {\n                        mail: this.user.email,\n                        imgUrl: this.user.imgUrl,\n                    }\n                    newNotif.toUserId = member._id\n                    this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n                })\n                const prevTxt = this.taskCopy.txt\n                this.taskCopy.txt = ev.target.innerText\n                const txt = `Task '${prevTxt}' was changed to '${ev.target.innerText}'`\n                let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n                newActivity.taskId = this.taskCopy.id\n                this.activity = newActivity\n\n                this.$notify({\n                    message: 'Task txt updated',\n                    position: 'bottom-left',\n                    duration: 2000,\n                })\n                this.updateTask()\n            }\n        },\n        updateTask() {\n            this.$emit('updateTask', this.taskCopy, this.activity)\n        },\n        sendToTaskDetails() {\n            if (this.$route.params.taskId === this.task.id) {\n                return\n            }\n            this.$router.push(\n                `/board/${this.$route.params.boardId}/task/${this.task.id}`\n            )\n        },\n        updateComponentTask(task) {\n            if (this.taskCopy.id === this.$route.params.taskId) {\n                this.taskCopy = task\n            }\n        },\n        updateTaskPriority(opt) {\n            this.taskCopy.members.forEach((member) => {\n                let newNotif = userService.getEmptyNotif()\n                newNotif.txt = `Upadte task priority to \"${opt.txt}\"`\n                newNotif.type = 'all'\n                newNotif.byUser = {\n                    mail: this.user.email,\n                    imgUrl: this.user.imgUrl,\n                }\n                newNotif.toUserId = member._id\n                this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n            })\n            const txt = `Task priority was updated to ${opt.txt}`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            newActivity.taskId = this.taskCopy.id\n            this.activity = newActivity\n            this.taskCopy.priority.txt = opt.txt\n            this.taskCopy.priority.color = opt.color\n            this.$notify({\n                message: 'Task priority updated',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.updateTask()\n            this.isPriorsShowen = false\n        },\n        updateTaskStatus(opt) {\n            this.taskCopy.members.forEach((member) => {\n                let newNotif = userService.getEmptyNotif()\n                newNotif.txt = `Upadte task status to \"${opt.txt}\"`\n                newNotif.type = 'all'\n                newNotif.byUser = {\n                    mail: this.user.email,\n                    imgUrl: this.user.imgUrl,\n                }\n                newNotif.toUserId = member._id\n                this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n            })\n            const txt = `Task status was updated to ${opt.txt}`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            newActivity.taskId = this.taskCopy.id\n            this.activity = newActivity\n\n            this.taskCopy.status.txt = opt.txt\n            this.taskCopy.status.color = opt.color\n            this.$notify({\n                message: 'Task status updated',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.updateTask()\n            this.isPriorsShowen = false\n        },\n        closePopups() {\n            this.isStatusesShowen = false\n            this.isPriorsShowen = false\n        },\n    },\n    created() {\n        eventBus.$on('updateTaskPreview', this.updateComponentTask)\n        eventBus.$on('updateTaskPreviewDestory', (task) => {\n            this.taskCopy = task\n            this.activity = null\n            this.updateTask()\n        })\n        this.taskCopy = this.task\n    },\n}\n</script>\n"],"sourceRoot":"src/cmps"}]}