{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue","mtime":1606808749395},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYm9hcmQuc2VydmljZSc7CmltcG9ydCBBdmF0YXIgZnJvbSAndnVlLWF2YXRhcic7CmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICd0YXNrLXBvc3RzJywKICBwcm9wczogewogICAgcG9zdHM6IHsKICAgICAgdHlwZTogQXJyYXkKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICB1c2VyOiBmdW5jdGlvbiB1c2VyKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy51c2VyOwogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG5ld1Bvc3Q6IG51bGwsCiAgICAgIGNvcGllZFBvc3RzOiBudWxsLAogICAgICBjb21wb25lbnRLZXk6IDAKICAgIH07CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5jb3BpZWRQb3N0cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5wb3N0cykpOwogICAgY29uc29sZS5sb2codGhpcy5sb2dnZWQpOwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0VGltZTogZnVuY3Rpb24gZ2V0VGltZSh0aW1lKSB7CiAgICAgIHJldHVybiBtb21lbnQodGltZSkuY2FsZW5kYXIoKTsKICAgIH0sCiAgICBhZGRQb3N0OiBmdW5jdGlvbiBhZGRQb3N0KCkgewogICAgICBpZiAoIXRoaXMubmV3UG9zdCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHBvc3QgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlQb3N0KCk7CiAgICAgIHBvc3QudHh0ID0gdGhpcy5uZXdQb3N0OwogICAgICBwb3N0LmJ5VXNlciA9IHRoaXMudXNlcjsKICAgICAgdGhpcy5jb3BpZWRQb3N0cy51bnNoaWZ0KHBvc3QpOwogICAgICB0aGlzLiRlbWl0KCd1cGRhdGVQb3N0cycsIHRoaXMuY29waWVkUG9zdHMpOwogICAgICB0aGlzLm5ld1Bvc3QgPSAnJzsKICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICBtZXNzYWdlOiAnTmV3IHBvc3QgYWRkZWQnLAogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgIH0pOwogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgQXZhdGFyOiBBdmF0YXIKICB9LAogIHdhdGNoOiB7CiAgICAnJHJvdXRlLnBhcmFtcy50YXNrSWQnOiBmdW5jdGlvbiAkcm91dGVQYXJhbXNUYXNrSWQoKSB7CiAgICAgIHRoaXMuY29waWVkUG9zdHMgPSB0aGlzLnBvc3RzOwogICAgfQogIH0KfTs="},{"version":3,"sources":["task-posts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,SAAA,YAAA,QAAA,2BAAA;AACA,OAAA,MAAA,MAAA,YAAA;AACA,OAAA,MAAA,MAAA,QAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA;AADA,GAFA;AAOA,EAAA,QAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA;AACA;AAHA,GAPA;AAYA,EAAA,IAZA,kBAYA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,IADA;AAEA,MAAA,WAAA,EAAA,IAFA;AAGA,MAAA,YAAA,EAAA;AAHA,KAAA;AAKA,GAlBA;AAmBA,EAAA,OAnBA,qBAmBA;AACA,SAAA,WAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,KAAA,KAAA,CAAA,CAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,MAAA;AACA,GAtBA;AAuBA,EAAA,OAAA,EAAA;AACA,IAAA,OADA,mBACA,IADA,EACA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,CAAA,QAAA,EAAA;AACA,KAHA;AAIA,IAAA,OAJA,qBAIA;AACA,UAAA,CAAA,KAAA,OAAA,EAAA;AACA;AACA;;AACA,UAAA,IAAA,GAAA,YAAA,CAAA,YAAA,EAAA;AACA,MAAA,IAAA,CAAA,GAAA,GAAA,KAAA,OAAA;AACA,MAAA,IAAA,CAAA,MAAA,GAAA,KAAA,IAAA;AACA,WAAA,WAAA,CAAA,OAAA,CAAA,IAAA;AACA,WAAA,KAAA,CAAA,aAAA,EAAA,KAAA,WAAA;AACA,WAAA,OAAA,GAAA,EAAA;AACA,WAAA,OAAA,CAAA;AACA,QAAA,OAAA,EAAA,gBADA;AAEA,QAAA,QAAA,EAAA,aAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAAA;AAKA;AAnBA,GAvBA;AA6CA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA;AADA,GA7CA;AAgDA,EAAA,KAAA,EAAA;AACA,0BADA,gCACA;AACA,WAAA,WAAA,GAAA,KAAA,KAAA;AACA;AAHA;AAhDA,CAAA","sourcesContent":["<template>\n    <section class=\"task-posts relative\">\n        <form @submit.prevent=\"addPost\">\n            <textarea\n                class=\"el-input-text-editor\"\n                @keydown.enter.exact.prevent=\"addPost\"\n                rows=\"3\"\n                placeholder=\"Write a massge...\"\n                v-model=\"newPost\"\n            />\n            <button>Post</button>\n        </form>\n        <div class=\"posts-list flex column align-center\">\n            <div\n                class=\"task-post-card\"\n                v-for=\"post in copiedPosts\"\n                :key=\"post.id\"\n            >\n                <div class=\"user-info-container flex space-between\">\n                    <div class=\"flex align-center\">\n                           <avatar\n                           :size=\"30\"\n                           color=\"white\"\n                        class=\"profile-img\"\n                        v-if=\"post.byUser\"\n                        :username=\"post.byUser.fullName\"\n                    ></avatar>\n <span class=\"by-user\" v-if=\"post.byUser\">{{ post.byUser.fullName }}</span>\n                    </div>\n\n                    <h5>\n                        <i class=\"far fa-clock\"></i>\n                        {{ getTime(post.createdAt) }}\n                    </h5>\n                </div>\n                <el-divider />\n                <span class=\"task-post-txt\">{{ post.txt }}</span>\n            </div>\n        </div>\n    </section>\n</template>\n<script>\nimport { boardService } from '../services/board.service'\nimport Avatar from 'vue-avatar'\nimport moment from 'moment'\n\nexport default {\n    name: 'task-posts',\n    props: {\n        posts: {\n            type: Array,\n        },\n    },\n    computed: {\n        user() {\n            return this.$store.getters.user\n        },\n    },\n    data() {\n        return {\n            newPost: null,\n            copiedPosts: null,\n            componentKey: 0,\n        }\n    },\n    created() {\n        this.copiedPosts = JSON.parse(JSON.stringify(this.posts))\n        console.log(this.logged)\n    },\n    methods: {\n        getTime(time) {\n            return moment(time).calendar()\n        },\n        addPost() {\n            if (!this.newPost) {\n                return\n            }\n            const post = boardService.getEmptyPost()\n            post.txt = this.newPost\n            post.byUser = this.user\n            this.copiedPosts.unshift(post)\n            this.$emit('updatePosts', this.copiedPosts)\n            this.newPost = ''\n                                   this.$notify({\n                                    message: 'New post added',\n                                    position: 'bottom-left',\n                                    duration:2000,\n                                  });\n        },\n        \n    },\n    components: {\n        Avatar,\n    },\n    watch: {\n        '$route.params.taskId'() {\n            this.copiedPosts = this.posts\n        },\n    },\n}\n</script>\n\n<style>\n</style>"],"sourceRoot":"src/cmps"}]}