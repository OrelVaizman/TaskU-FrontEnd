{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","mtime":1607212899140},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js"],"names":["boardService","_","boardStore","state","boards","currBoard","searchBoard","filterBy","status","priority","person","searchTerm","darkMode","displayMode","getters","console","log","filteredBoard","filter","board","name","toLowerCase","includes","JSON","parse","stringify","groups","group","tasks","task","txt","length","forEach","members","some","member","_id","defaultBoardId","boardActivities","activities","getDarkModeToggle","isDarkMode","tasksByStatues","statuesMap","statuses","reduce","acc","camelCase","id","color","boardGroups","newStatus","key","taskDetails","groupName","groupId","push","mutations","setBoardById","boardIdx","findIndex","splice","setDisplayMode","setBoards","setBoard","removeBoard","boardId","setSearch","setFilterBy","actions","loadBoards","commit","rootGetters","userId","user","query","type","loadBoard","getById","remove","saveBoard","dispatch","guestUser","save","savedBoard"],"mappings":"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","sourcesContent":["import { boardService } from '@/services/board.service.js'\nimport _ from 'lodash'\n\nexport const boardStore = {\n  state: {\n    boards: [],\n    currBoard: null,\n    searchBoard: null,\n    filterBy: { status: 'All', priority: 'All', person: 'All', searchTerm: '' },\n    darkMode: false,\n    displayMode: 'Board'\n\n  },\n  getters: {\n    displayMode(state) {\n      return state.displayMode\n    },\n    boards(state) {\n      console.log('state.searchBoard:', state.searchBoard)\n\n      if (!state.searchBoard) return state.boards\n      console.log('state.searchBoard:', state.searchBoard)\n      if (state.searchBoard && state.boards !== null) {\n        console.log(state.boards)\n        const filteredBoard = state.boards.filter(board => {\n          console.log('state.searchBoard filter:', state.searchBoard)\n          return board.name\n            .toLowerCase()\n            .includes(state.searchBoard.toLowerCase())\n        })\n        console.log(filteredBoard)\n        return filteredBoard\n      }\n    },\n    board(state) {\n      const filterBy = state.filterBy\n      let filteredBoard = JSON.parse(JSON.stringify(state.currBoard))\n      if (filterBy.status !== 'All') {\n        filteredBoard.groups.filter(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.status.txt === filterBy.status\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.priority !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.priority.txt === filterBy.priority\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.person !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            if (task.members.some(member => member._id === filterBy.person)) {\n              return task\n            }\n          })\n        })\n      }\n      if (filterBy.searchTerm !== '') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.txt\n              .toLowerCase()\n              .includes(filterBy.searchTerm.toLowerCase())\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      return filteredBoard\n    },\n    defaultBoardId(state) {\n      return state.boards[0]._id\n    },\n    filterBy(state) {\n      return JSON.parse(JSON.stringify(state.filterBy))\n    },\n    boardActivities(state) {\n      return state.currBoard.activities\n    },\n    getDarkModeToggle(state) {\n      const isDarkMode = state.darkMode\n      return { darkMode: isDarkMode, '': !isDarkMode }\n    },\n    tasksByStatues(state) {\n      let statuesMap = state.currBoard.statuses.reduce((acc, status) => {\n        acc[_.camelCase(status.txt)] = {\n          id: status.id,\n          color: status.color,\n          txt: status.txt,\n          tasks: []\n        }\n        return acc\n      }, {})\n      const boardGroups = state.currBoard.groups\n      boardGroups.forEach(group => {\n        group.tasks.forEach(task => {\n          var newStatus = _.camelCase(task.status.txt)\n          for (let key in statuesMap) {\n            if (key === newStatus) {\n              const taskDetails = {\n                ...task,\n                groupName: group.name,\n                groupId: group.id\n              }\n              statuesMap[key].tasks.push(taskDetails)\n            }\n          }\n        })\n      })\n      return statuesMap\n    }\n  },\n  mutations: {\n    setBoardById(state, { board }) {\n      const boardIdx = state.boards.findIndex(currBoard => currBoard._id === board._id)\n      state.boards.splice(boardIdx, 1, board)\n      if (board._id === state.currBoard._id) {\n        console.log('replacing curr board');\n        state.currBoard = board;\n      }\n    },\n    setDisplayMode(state, { displayMode }) {\n      state.displayMode = displayMode\n    },\n    darkMode(state, { darkMode }) {\n      state.darkMode = darkMode\n    },\n    setBoards(state, { boards }) {\n      state.boards = boards\n    },\n    setBoard(state, { board }) {\n      state.currBoard = board\n    },\n    removeBoard(state, { boardId }) {\n      state.boards = state.boards.filter(board => board._id !== boardId)\n    },\n    setSearch(state, { searchBoard }) {\n      state.searchBoard = searchBoard\n      console.log('state.searchBoard mutation:', state.searchBoard)\n    },\n    setFilterBy(state, { filterBy }) {\n      state.filterBy = filterBy\n    }\n  },\n  actions: {\n    async loadBoards({ commit, rootGetters }) {\n      const userId = rootGetters.user._id\n      try {\n        const boards = await boardService.query(userId)\n        commit({ type: 'setBoards', boards })\n      } catch (err) {\n        console.log('ERROR: cant loads boards', err)\n        throw err\n      }\n    },\n    async loadBoard({ commit }, { boardId }) {\n      commit({ type: 'setBoard', board: null })\n      try {\n        const board = await boardService.getById(boardId)\n        commit({ type: 'setBoard', board })\n      } catch (err) {\n        console.log('no loaded')\n        console.log('ERROR: cant load board', err)\n        throw err\n      }\n    },\n    async removeBoard({ commit, state }, { boardId }) {\n      if (state.boards.length <= 1) return\n      try {\n        await boardService.remove(boardId)\n        commit({ type: 'removeBoard', boardId })\n      } catch (err) {\n        console.log('ERROR: cant remove board', err)\n        throw err\n      }\n    },\n    async saveBoard({ commit, dispatch, rootGetters }, { board }) {\n      const guestUser = rootGetters.guestUser\n      const userId = rootGetters.user._id\n      //Avoiding guest user duplication in members parameter\n      if (userId !== guestUser._id && !board._id) {\n        board.members.push(guestUser)\n      }\n      try {\n        const savedBoard = await boardService.save(board)\n        if (board._id) {\n          commit({ type: 'setBoard', board: savedBoard })\n        } else {\n          console.log('im in the else')\n          await dispatch({ type: 'loadBoards' })\n        }\n        return savedBoard._id\n      } catch (err) {\n        console.log('ERROR: cant save/update board')\n        throw err\n      }\n    }\n  }\n}\n"]}]}