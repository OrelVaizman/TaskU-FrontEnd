{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js","mtime":1606841250871},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/modules/board.store.js"],"names":["boardService","boardStore","state","boards","currBoard","searchBoard","filterBy","status","priority","person","searchTerm","isLoading","getters","filter","board","name","toLowerCase","includes","filteredBoard","JSON","parse","stringify","groups","group","tasks","task","txt","length","forEach","members","member","_id","defaultBoardId","mutations","setBoards","miniBoards","map","setBoard","removeBoard","boardId","setSearch","setFilterBy","toggleIsLoading","actions","loadBoards","context","userId","user","console","log","query","commit","type","loadBoard","getById","remove","saveBoard","dispatch","rootGetters","guestUser","push","save","savedBoard"],"mappings":"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","sourcesContent":["import { boardService } from '@/services/board.service.js'\nexport const boardStore = {\n  state: {\n    boards: [],\n    currBoard: null,\n    searchBoard: null,\n    filterBy: { status: 'All', priority: 'All', person: 'All', searchTerm: '' },\n    isLoading: false\n  },\n  getters: {\n    boards(state) {\n      if (!state.searchBoard) return state.boards\n      return state.boards.filter(board =>\n        board.name.toLowerCase().includes(state.searchBoard.toLowerCase())\n      )\n    },\n    board(state) {\n      const filterBy = state.filterBy\n      let filteredBoard = JSON.parse(JSON.stringify(state.currBoard))\n      if (filterBy.status !== 'All') {\n        filteredBoard.groups.filter(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.status.txt === filterBy.status\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.priority !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.priority.txt === filterBy.priority\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      if (filterBy.person !== 'All') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            task.members = task.members.filter(member => {\n              return member._id === filterBy.person\n            })\n          })\n        })\n      }\n      if (filterBy.searchTerm !== '') {\n        filteredBoard.groups.forEach(group => {\n          group.tasks = group.tasks.filter(task => {\n            return task.txt\n              .toLowerCase()\n              .includes(filterBy.searchTerm.toLowerCase())\n          })\n        })\n        filteredBoard.groups = filteredBoard.groups.filter(\n          group => (group = group.tasks.length !== 0)\n        )\n      }\n      // filteredBoard.groups.filter(group => group.tasks)\n      return filteredBoard\n    },\n    defaultBoardId(state) {\n      return state.boards[0]._id\n    },\n    filterBy(state) {\n      return JSON.parse(JSON.stringify(state.filterBy))\n    },\n    isLoading(state) {\n      return state.isLoading\n    }\n  },\n  mutations: {\n    setBoards(state, { boards }) {\n      const miniBoards = boards.map(board => {\n        board = { _id: board._id, name: board.name }\n        return board\n      })\n      state.boards = miniBoards\n    },\n    setBoard(state, { board }) {\n      state.currBoard = board\n    },\n    removeBoard(state, { boardId }) {\n      state.boards = state.boards.filter(board => board._id !== boardId)\n    },\n    setSearch(state, { searchBoard }) {\n      state.searchBoard = searchBoard\n    },\n    setFilterBy(state, { filterBy }) {\n      state.filterBy = filterBy\n    },\n    toggleIsLoading(state) {\n      state.isLoading = !state.isLoading\n    }\n  },\n  actions: {\n    async loadBoards(context) {\n      const userId = context.getters.user._id\n      console.log('UserId from board store @Boards loading:', userId)\n        const boards = await boardService.query(userId)\n        await context.commit({ type: 'setBoards', boards })\n    },\n    async loadBoard({ commit }, { boardId }) {\n      // commit({ type: 'toggleIsLoading' })\n      // try {\n        console.log('before got board:', boardId)\n        const board = await boardService.getById(boardId)\n        await commit({ type: 'setBoard', board })\n        console.log('after set board');\n        // setTimeout(() => {\n        //   commit({ type: 'toggleIsLoading' })\n        // }, 2000)\n      // } catch (err) {\n      //   throw err\n      // }\n    },\n    async removeBoard({ commit }, { boardId }) {\n      try {\n        await boardService.remove(boardId)\n        commit({ type: 'removeBoard', boardId })\n      } catch (err) {\n        console.log('error', err)\n        throw err\n      }\n    },\n    async saveBoard({ commit, dispatch, rootGetters }, { board }) {\n      console.log('board i got on store', board)\n      const guestUser = rootGetters.guestUser\n      const userId = rootGetters.user._id\n      //Avoiding guest user duplication in members parameter\n      if (userId !== guestUser._id && !board._id) {\n        board.members.push(guestUser)\n      }\n        const savedBoard = await boardService.save(board)\n        if (board._id) {\n          commit({ type: 'setBoard', board: savedBoard })\n        } else {\n          console.log('im in the else')\n          dispatch({ type: 'loadBoards' })\n        }\n        return savedBoard._id\n    }\n  }\n}\n"]}]}