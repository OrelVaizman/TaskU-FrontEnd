{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue","mtime":1606657046629},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB0YXNrUHJldmlldyBmcm9tICcuL3Rhc2stcHJldmlldycKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9ib2FyZC5zZXJ2aWNlJwppbXBvcnQgZHJhZ2dhYmxlIGZyb20gJ3Z1ZWRyYWdnYWJsZScKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAndGFzay1saXN0JywKICBwcm9wczogewogICAgdGFza3M6IEFycmF5LAogICAgZ3JvdXBJZDogU3RyaW5nLAogICAgdGFza0NvbG9yOiBTdHJpbmcKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0eHQ6ICcnLAogICAgICBpc0FkZEJ0blNob3dlbjogZmFsc2UsCiAgICAgIGNsb25lZFRhc2tzOiBudWxsCiAgICB9CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIGJvYXJkKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5ib2FyZAogICAgfSwKICAgIGxvZ2dlZEluVXNlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMubG9nZ2VkSW5Vc2VyCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBzaG93QWRkQnRuKCkgewogICAgICB0aGlzLmlzQWRkQnRuU2hvd2VuID0gdHJ1ZQogICAgfSwKICAgIGdldEdyb3VwQnlJZCgpIHsKICAgICAgY29uc3QgaWR4ID0gdGhpcy5ib2FyZC5ncm91cHMuZmluZEluZGV4KAogICAgICAgIGdyb3VwID0+IGdyb3VwLmlkID09PSB0aGlzLmdyb3VwSWQKICAgICAgKQogICAgICByZXR1cm4gdGhpcy5ib2FyZC5ncm91cHNbaWR4XQogICAgfSwKICAgIGFkZFRhc2soKSB7CiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KCkKICAgICAgY29uc3QgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKQogICAgICBuZXdUYXNrLnR4dCA9IHRoaXMudHh0CiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9IGBUYXNrICcke25ld1Rhc2sudHh0fScgYWRkZWRgCiAgICAgIG5ld0FjdGl2aXR5LmJ5VXNlciA9IHRoaXMubG9nZ2VkSW5Vc2VyCiAgICAgIG5ld1Rhc2suYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KQogICAgICBjb25zdCBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCkKICAgICAgZ3JvdXAudGFza3MucHVzaChuZXdUYXNrKQogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSkKICAgICAgdGhpcy50eHQgPSAnJwogICAgICB0aGlzLmlzQWRkQnRuU2hvd2VuID0gZmFsc2UKICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgfSwKICAgIGRlbGV0ZVRhc2sodGFza0lkKSB7CiAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKQogICAgICBjb25zdCB0YXNrSWR4ID0gZ3JvdXAudGFza3MuZmluZEluZGV4KHRhc2sgPT4gdGFzay5pZCA9PT0gdGFza0lkKQogICAgICBncm91cC50YXNrcy5zcGxpY2UodGFza0lkeCwgMSkKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgIHR5cGU6ICdzYXZlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pCiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0sCiAgICB1cGRhdGVUYXNrKG5ld1Rhc2spIHsKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdldEdyb3VwQnlJZCgpCiAgICAgIGNvbnN0IHRhc2tJZHggPSBncm91cC50YXNrcy5maW5kSW5kZXgodGFzayA9PiB0YXNrLmlkID09PSBuZXdUYXNrLmlkKQogICAgICBncm91cC50YXNrcy5zcGxpY2UodGFza0lkeCwgMSwgbmV3VGFzaykKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgIHR5cGU6ICdzYXZlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pCiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0sCiAgICB1cGRhdGVUYXNrcygpIHsKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdldEdyb3VwQnlJZCgpCiAgICAgIGdyb3VwLnRhc2tzID0gdGhpcy5jbG9uZWRUYXNrcwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSkKICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgdGFza1ByZXZpZXcsCiAgICBkcmFnZ2FibGUKICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmNsb25lZFRhc2tzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnRhc2tzKSkKICB9Cn0K"},{"version":3,"sources":["task-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"task-list.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <section v-if=\"clonedTasks\" class=\"task-list width100\">\n    <ul class=\"clean-list flex wrap align-center justify-center gap\">\n      <draggable\n        class=\"width100\"\n        v-model=\"clonedTasks\"\n        @end=\"updateTasks\"\n      >\n        <task-preview\n          v-for=\"task in clonedTasks\"\n          :user=\"loggedInUser\"\n          :taskColor=\"taskColor\"\n          :key=\"task.id\"\n          :task=\"task\"\n          :statuses=\"board.statuses\"\n          :priorities=\"board.priorities\"\n          :groupId=\"groupId\"\n          @deleteTask=\"deleteTask\"\n          @updateTask=\"updateTask\"\n          :boardMembers=\"board.members\"\n        />\n      </draggable>\n    </ul>\n    <form class=\"flex\" @submit.prevent=\"addTask\">\n      <input\n        class=\"add-task-input\"\n        @focus=\"showAddBtn\"\n        v-model=\"txt\"\n        type=\"text\"\n        placeholder=\"+ Add Task\"\n      />\n      <button v-show=\"isAddBtnShowen\" type=\"submit\">Add</button>\n    </form>\n  </section>\n</template>\n\n<script>\nimport taskPreview from './task-preview'\nimport { boardService } from '@/services/board.service'\nimport draggable from 'vuedraggable'\n\nexport default {\n  name: 'task-list',\n  props: {\n    tasks: Array,\n    groupId: String,\n    taskColor: String\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShowen: false,\n      clonedTasks: null\n    }\n  },\n\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    loggedInUser() {\n      return this.$store.getters.loggedInUser\n    }\n  },\n  methods: {\n    showAddBtn() {\n      this.isAddBtnShowen = true\n    },\n    getGroupById() {\n      const idx = this.board.groups.findIndex(\n        group => group.id === this.groupId\n      )\n      return this.board.groups[idx]\n    },\n    addTask() {\n      let newActivity = boardService.getEmptyActivity()\n      const newTask = boardService.getEmptyTask()\n      newTask.txt = this.txt\n      newActivity.txt = `Task '${newTask.txt}' added`\n      newActivity.byUser = this.loggedInUser\n      newTask.activities.push(newActivity)\n      const group = this.getGroupById()\n      group.tasks.push(newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.txt = ''\n      this.isAddBtnShowen = false\n      this.$emit('forceRender')\n    },\n    deleteTask(taskId) {\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === taskId)\n      group.tasks.splice(taskIdx, 1)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$emit('forceRender')\n    },\n    updateTask(newTask) {\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === newTask.id)\n      group.tasks.splice(taskIdx, 1, newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$emit('forceRender')\n    },\n    updateTasks() {\n      const group = this.getGroupById()\n      group.tasks = this.clonedTasks\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$emit('forceRender')\n    }\n  },\n  components: {\n    taskPreview,\n    draggable\n  },\n  created() {\n    this.clonedTasks = JSON.parse(JSON.stringify(this.tasks))\n  }\n}\n</script>\n"]}]}