{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue","mtime":1607213521664},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB0YXNrUHJldmlldyBmcm9tICcuL3Rhc2stcHJldmlldycKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9ib2FyZC5zZXJ2aWNlJwppbXBvcnQgZHJhZ2dhYmxlIGZyb20gJ3Z1ZWRyYWdnYWJsZScKLy8gaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ3Rhc2stbGlzdCcsCiAgcHJvcHM6IHsKICAgIHRhc2tzOiBBcnJheSwKICAgIGdyb3VwSWQ6IFN0cmluZywKICAgIHRhc2tDb2xvcjogU3RyaW5nCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdHh0OiAnJywKICAgICAgaXNBZGRCdG5TaG93ZW46IGZhbHNlLAogICAgICBjbG9uZWRUYXNrczogbnVsbAogICAgfQogIH0sCuKAiwogIGNvbXB1dGVkOiB7CiAgICBib2FyZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuYm9hcmQKICAgIH0sCiAgICBkYXRhKCkgewogICAgICByZXR1cm4gewogICAgICAgIHR4dDogJycsCiAgICAgICAgaXNBZGRCdG5TaG93ZW46IGZhbHNlLAogICAgICAgIGNsb25lZFRhc2tzOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB0YXNrQmdjKCkgewogICAgICByZXR1cm4geyBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMudGFza0NvbG9yIH0KICAgIH0sCiAgICB1c2VyKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy51c2VyCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhZGRFbXB0eVRhc2soZ3JvdXBJZCkgewogICAgICBpZiAodGhpcy5ncm91cElkICE9PSBncm91cElkKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgY29uc3QgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKQogICAgICBjb25zdCBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCkKICAgICAgY29uc3QgdHh0ID0gYCR7dGhpcy51c2VyLmZ1bGxOYW1lfSBhZGQgbmV3IHRhc2sgaW4gJHtncm91cC5uYW1lfWAKICAgICAgbGV0IG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkodHh0LCB0aGlzLnVzZXIpCiAgICAgIG5ld0FjdGl2aXR5Lmdyb3VwSWQgPSBncm91cElkCiAgICAgIHRoaXMuYm9hcmQuYWN0aXZpdGllcy51bnNoaWZ0KG5ld0FjdGl2aXR5KQogICAgICBncm91cC50YXNrcy5wdXNoKG5ld1Rhc2spCiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAnc2F2ZUJvYXJkJywKICAgICAgICBib2FyZDogdGhpcy5ib2FyZAogICAgICB9KQrigIsKICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICBtZXNzYWdlOiAnTmV3IHRhc2sgYWRkZWQnLAogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgIH0pCiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0sCiAgICBzaG93QWRkQnRuKCkgewogICAgICB0aGlzLmlzQWRkQnRuU2hvd2VuID0gdHJ1ZQogICAgfSwKICAgIGdldEdyb3VwQnlJZCgpIHsKICAgICAgY29uc3QgaWR4ID0gdGhpcy5ib2FyZC5ncm91cHMuZmluZEluZGV4KAogICAgICAgIGdyb3VwID0+IGdyb3VwLmlkID09PSB0aGlzLmdyb3VwSWQKICAgICAgKQogICAgICByZXR1cm4gdGhpcy5ib2FyZC5ncm91cHNbaWR4XQogICAgfSwKICAgIGFkZFRhc2soKSB7CiAgICAgIGNvbnN0IG5ld1Rhc2sgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlUYXNrKCkKICAgICAgbmV3VGFzay50eHQgPSB0aGlzLnR4dAogICAgICBjb25zdCB0eHQgPSBgVGFzayAnJHtuZXdUYXNrLnR4dH0nIGFkZGVkYAogICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMudXNlcikKICAgICAgbmV3QWN0aXZpdHkuZ3JvdXBJZCA9IHRoaXMuZ3JvdXBJZAogICAgICB0aGlzLmJvYXJkLmFjdGl2aXRpZXMudW5zaGlmdChuZXdBY3Rpdml0eSkKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdldEdyb3VwQnlJZCgpCiAgICAgIGdyb3VwLnRhc2tzLnB1c2gobmV3VGFzaykKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgIHR5cGU6ICdzYXZlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pCuKAiwogICAgICB0aGlzLnR4dCA9ICcnCiAgICAgIHRoaXMuaXNBZGRCdG5TaG93ZW4gPSBmYWxzZQogICAgICB0aGlzLiRub3RpZnkoewogICAgICAgIG1lc3NhZ2U6ICdOZXcgdGFzayBhZGRlZCcsCiAgICAgICAgcG9zaXRpb246ICdib3R0b20tbGVmdCcsCiAgICAgICAgZHVyYXRpb246IDIwMDAKICAgICAgfSkKICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgfSwKICAgIGRlbGV0ZVRhc2sodGFza0lkKSB7CiAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKQogICAgICBjb25zdCB0YXNrSWR4ID0gZ3JvdXAudGFza3MuZmluZEluZGV4KHRhc2sgPT4gdGFzay5pZCA9PT0gdGFza0lkKQogICAgICBncm91cC50YXNrcy5zcGxpY2UodGFza0lkeCwgMSkKICAgICAgY29uc3QgdHh0ID0gYCR7dGhpcy51c2VyLmZ1bGxOYW1lfSByZW1vdmUgYSB0YXNrIGZyb20gJHtncm91cC5uYW1lfWAKICAgICAgbGV0IG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkodHh0LCB0aGlzLnVzZXIpCiAgICAgIG5ld0FjdGl2aXR5Lmdyb3VwSWQgPSB0aGlzLmdyb3VwSWQKICAgICAgdGhpcy5ib2FyZC5hY3Rpdml0aWVzLnVuc2hpZnQobmV3QWN0aXZpdHkpCiAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAnc2F2ZUJvYXJkJywKICAgICAgICBib2FyZDogdGhpcy5ib2FyZAogICAgICB9KQogICAgICB0aGlzLiRub3RpZnkoewogICAgICAgIG1lc3NhZ2U6ICdUYXNrIHJlbW92ZWQnLAogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgIH0pCiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0sCiAgICB1cGRhdGVUYXNrKG5ld1Rhc2ssIGFjdGl2aXR5KSB7CiAgICAgIGlmIChhY3Rpdml0eSkgewogICAgICAgIHRoaXMuYm9hcmQuYWN0aXZpdGllcy51bnNoaWZ0KGFjdGl2aXR5KQrigIsKICAgICAgfQogICAgICBjb25zdCBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCkKICAgICAgY29uc3QgdGFza0lkeCA9IGdyb3VwLnRhc2tzLmZpbmRJbmRleCh0YXNrID0+IHRhc2suaWQgPT09IG5ld1Rhc2suaWQpCiAgICAgIGdyb3VwLnRhc2tzLnNwbGljZSh0YXNrSWR4LCAxLCBuZXdUYXNrKQogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSkK4oCLCiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0sCiAgICB1cGRhdGVUYXNrcygpIHsKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdldEdyb3VwQnlJZCgpCiAgICAgIGdyb3VwLnRhc2tzID0gdGhpcy5jbG9uZWRUYXNrcwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSkK4oCLCiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0KICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmNsb25lZFRhc2tzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnRhc2tzKSkKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIHRhc2tQcmV2aWV3LAogICAgZHJhZ2dhYmxlCiAgfQp9Cg=="},{"version":3,"sources":["task-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"task-list.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n    <section v-if=\"clonedTasks\" class=\"task-list-container width100\">\n        <ul\n            class=\"task-list clean-list flex wrap align-center justify-center gap\">\n            <draggable class=\"width100\" :list=\"clonedTasks\" @end=\"updateTasks\">\n                <task-preview\n                    v-for=\"task in clonedTasks\"\n                    :user=\"user\"\n                    :taskColor=\"taskColor\"\n                    :key=\"task.id\"\n                    :task=\"task\"\n                    :statuses=\"board.statuses\"\n                    :priorities=\"board.priorities\"\n                    :groupId=\"groupId\"\n                    @deleteTask=\"deleteTask\"\n                    @updateTask=\"updateTask\"\n                    :boardMembers=\"board.members\"/>\n            </draggable>\n        </ul>\n        <form class=\"add-task-form flex\" @submit.prevent=\"addTask\">\n            <span class=\"task-color input-color\" :style=\"taskBgc\"></span>\n            <input\n                class=\"add-task-input\"\n                @focus=\"showAddBtn\"\n                v-model=\"txt\"\n                type=\"text\"\n                placeholder=\"+ Add Task\"/>\n            <button v-show=\"isAddBtnShowen\" type=\"submit\">Add</button>\n        </form>\n    </section>\n</template>\n​\n<script>\nimport taskPreview from './task-preview'\nimport { boardService } from '@/services/board.service'\nimport draggable from 'vuedraggable'\n// import { eventBus } from '@/services/event-bus.service'\nexport default {\n  name: 'task-list',\n  props: {\n    tasks: Array,\n    groupId: String,\n    taskColor: String\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShowen: false,\n      clonedTasks: null\n    }\n  },\n​\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    data() {\n      return {\n        txt: '',\n        isAddBtnShowen: false,\n        clonedTasks: null\n      }\n    },\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    user() {\n      return this.$store.getters.user\n    }\n  },\n  methods: {\n    addEmptyTask(groupId) {\n      if (this.groupId !== groupId) {\n        return\n      }\n      const newTask = boardService.getEmptyTask()\n      const group = this.getGroupById()\n      const txt = `${this.user.fullName} add new task in ${group.name}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.groupId = groupId\n      this.board.activities.unshift(newActivity)\n      group.tasks.push(newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n​\n      this.$notify({\n        message: 'New task added',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    showAddBtn() {\n      this.isAddBtnShowen = true\n    },\n    getGroupById() {\n      const idx = this.board.groups.findIndex(\n        group => group.id === this.groupId\n      )\n      return this.board.groups[idx]\n    },\n    addTask() {\n      const newTask = boardService.getEmptyTask()\n      newTask.txt = this.txt\n      const txt = `Task '${newTask.txt}' added`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.groupId = this.groupId\n      this.board.activities.unshift(newActivity)\n      const group = this.getGroupById()\n      group.tasks.push(newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n​\n      this.txt = ''\n      this.isAddBtnShowen = false\n      this.$notify({\n        message: 'New task added',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    deleteTask(taskId) {\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === taskId)\n      group.tasks.splice(taskIdx, 1)\n      const txt = `${this.user.fullName} remove a task from ${group.name}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.groupId = this.groupId\n      this.board.activities.unshift(newActivity)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.$notify({\n        message: 'Task removed',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.$emit('forceRender')\n    },\n    updateTask(newTask, activity) {\n      if (activity) {\n        this.board.activities.unshift(activity)\n​\n      }\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === newTask.id)\n      group.tasks.splice(taskIdx, 1, newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n​\n      this.$emit('forceRender')\n    },\n    updateTasks() {\n      const group = this.getGroupById()\n      group.tasks = this.clonedTasks\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n​\n      this.$emit('forceRender')\n    }\n  },\n  created() {\n    this.clonedTasks = JSON.parse(JSON.stringify(this.tasks))\n  },\n  components: {\n    taskPreview,\n    draggable\n  }\n}\n</script>"]}]}