{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue","mtime":1607190621000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2JvYXJkLnNlcnZpY2UnCmltcG9ydCBBdmF0YXIgZnJvbSAnQC9jbXBzL3VzZXItYXZhdGFyLnZ1ZScKaW1wb3J0IHVwbG9hZEltZyBmcm9tICcuL3VwbG9hZC1pbWcnCgppbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCcKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAndGFzay1wb3N0cycsCiAgcHJvcHM6IHsKICAgIHBvc3RzOiB7CiAgICAgIHR5cGU6IEFycmF5CiAgICB9LAogICAgdGFzazogT2JqZWN0CiAgfSwKICBjb21wdXRlZDogewogICAgdXNlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMudXNlcgogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG5ld1Bvc3Q6IG51bGwsCiAgICAgIGNvcGllZFBvc3RzOiBudWxsLAogICAgICBjb21wb25lbnRLZXk6IDAsCiAgICAgIGltZzogbnVsbAogICAgfQogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuY29waWVkUG9zdHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucG9zdHMpKQogIAogIH0sCiAgbWV0aG9kczogewogICAgaW1nVXJsKHVybCkgewogICAgICB0aGlzLmltZyA9IHVybAogICAgfSwKICAgIGdldFRpbWUodGltZSkgewogICAgICByZXR1cm4gbW9tZW50KHRpbWUpLmZyb21Ob3coKQogICAgfSwKICAgIGFkZFBvc3QoKSB7CiAgICAgIGlmICghdGhpcy5uZXdQb3N0KSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIGNvbnN0IHBvc3QgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlQb3N0KCkKICAgICAgcG9zdC50eHQgPSB0aGlzLm5ld1Bvc3QKICAgICAgcG9zdC5ieVVzZXIgPSB0aGlzLnVzZXIKICAgICAgcG9zdC5pbWdVcmwgPSB0aGlzLmltZwogICAgICB0aGlzLmNvcGllZFBvc3RzLnVuc2hpZnQocG9zdCkKICAgICAgY29uc3QgdHh0ID0gYCR7dGhpcy51c2VyLmZ1bGxOYW1lfSBhZGRlZCBuZXcgcG9zdCBvbiB0YXNrOiR7dGhpcy50YXNrLnR4dH0gYAogICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMudXNlcikKICAgICAgbmV3QWN0aXZpdHkudGFza0lkID0gdGhpcy50YXNrLmlkCiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZVBvc3RzJywgdGhpcy5jb3BpZWRQb3N0cyxuZXdBY3Rpdml0eSkKICAgICAgdGhpcy5uZXdQb3N0ID0gJycKICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICBtZXNzYWdlOiAnTmV3IHBvc3QgcHVibGlzaGVkJywKICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbS1sZWZ0JywKICAgICAgICBkdXJhdGlvbjogMjAwMAogICAgICB9KQogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgQXZhdGFyLAogICAgdXBsb2FkSW1nCiAgfSwKICB3YXRjaDogewogICAgJyRyb3V0ZS5wYXJhbXMudGFza0lkJygpIHsKICAgICAgdGhpcy5jb3BpZWRQb3N0cyA9IHRoaXMucG9zdHMKICAgIH0KICB9Cn0K"},{"version":3,"sources":["task-posts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"task-posts.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <section class=\"task-posts relative\">\n    <form class=\"task-post-form relative\" @submit.prevent=\"addPost\">\n      <textarea\n        class=\"el-input-text-editor\"\n        @keydown.enter.exact.prevent=\"addPost\"\n        rows=\"3\"\n        placeholder=\"Write a massge...\"\n        v-model=\"newPost\"\n      />\n      <upload-img @sendImgUrl=\"imgUrl\" />\n      <button class=\"post-btn\">Post</button>\n    </form>\n    <div class=\"posts-list flex column align-center\">\n      <div class=\"task-post-card\" v-for=\"post in copiedPosts\" :key=\"post.id\">\n        <div class=\"user-info-container flex space-between\">\n          <div class=\"flex align-center\">\n            <avatar :user=\"post.byUser\" />\n\n            <span class=\"by-user\" v-if=\"post.byUser\">{{\n              post.byUser.fullName\n            }}</span>\n          </div>\n\n          <h5>\n            <i class=\"far fa-clock\"></i>\n            {{ getTime(post.createdAt) }}\n          </h5>\n        </div>\n        <el-divider />\n        <div class=\"task-post-container flex space-between\">\n          <span>{{ post.txt }}</span>\n          <!-- <div class=\"ratio-square\"> -->\n          <img class=\"uploaded-img\" v-if=\"post.imgUrl\" :src=\"post.imgUrl\" />\n          <!-- </div> -->\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n<script>\nimport { boardService } from '../services/board.service'\nimport Avatar from '@/cmps/user-avatar.vue'\nimport uploadImg from './upload-img'\n\nimport moment from 'moment'\n\nexport default {\n  name: 'task-posts',\n  props: {\n    posts: {\n      type: Array\n    },\n    task: Object\n  },\n  computed: {\n    user() {\n      return this.$store.getters.user\n    }\n  },\n  data() {\n    return {\n      newPost: null,\n      copiedPosts: null,\n      componentKey: 0,\n      img: null\n    }\n  },\n  created() {\n    this.copiedPosts = JSON.parse(JSON.stringify(this.posts))\n  \n  },\n  methods: {\n    imgUrl(url) {\n      this.img = url\n    },\n    getTime(time) {\n      return moment(time).fromNow()\n    },\n    addPost() {\n      if (!this.newPost) {\n        return\n      }\n\n      const post = boardService.getEmptyPost()\n      post.txt = this.newPost\n      post.byUser = this.user\n      post.imgUrl = this.img\n      this.copiedPosts.unshift(post)\n      const txt = `${this.user.fullName} added new post on task:${this.task.txt} `\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newActivity.taskId = this.task.id\n      this.$emit('updatePosts', this.copiedPosts,newActivity)\n      this.newPost = ''\n      this.$notify({\n        message: 'New post published',\n        position: 'bottom-left',\n        duration: 2000\n      })\n    }\n  },\n  components: {\n    Avatar,\n    uploadImg\n  },\n  watch: {\n    '$route.params.taskId'() {\n      this.copiedPosts = this.posts\n    }\n  }\n}\n</script>\n\n<style></style>\n"]}]}