{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/views/board-app.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/views/board-app.vue","mtime":1607421571939},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["board-app.vue"],"names":[],"mappingsfile":"board-app.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <section v-if=\"board\" class=\"board-app flex\">\n        <board-list\n            :expandList=\"expandList\"\n            :isExpanded=\"isListExpanded\"\n            @removeBoard=\"removeCurrBoard\"\n            @addNewBoard=\"addBoard\"\n            :boards=\"boards\"\n            title=\"Boards\"\n        >\n            <button\n                slot=\"expand-btn\"\n                @click=\"toggleExpandList\"\n                :class=\"{\n                    'expand-list-btn': true,\n                    notExpanded: !isListExpanded,\n                }\"\n            >\n                <i\n                    :class=\"btnClassExpend\"\n                    v-tooltip.right=\"'Expand/Hide List'\"\n                ></i>\n            </button>\n            <board-search @searchBoard=\"setSearch\" slot=\"search\" />\n        </board-list>\n        <div :class=\"['board-app-container width100', darkMode]\">\n            <board-header\n                :updateBoardName=\"updateBoardName\"\n                :updateBoardDesc=\"updateBoardDesc\"\n                :board=\"board\"\n                :addGroup=\"addGroup\"\n                @removeMember=\"removeBoardMember\"\n                @addMember=\"addBoardMember\"\n                :displayMode=\"displayMode\"\n                :forceRerender=\"forceRerender\"\n                @setDisplayMode=\"setDisplayMode\"\n            />\n            <group-list\n                v-if=\"board && displayMode === 'Board'\"\n                :key=\"componentKey\"\n                :groups=\"board.groups\"\n                :boardName=\"board.name\"\n                @deleteGroup=\"deleteGroup\"\n                @updateGroup=\"updateGroup\"\n                @updateGroups=\"updateGroups\"\n                @duplicateGroup=\"duplicateGroup\"\n                @forceRender=\"forceRerender\"\n            />\n            <trello-mode\n                :key=\"componentKey\"\n                @forceRender=\"forceRerender\"\n                v-else\n            ></trello-mode>\n        </div>\n        <div v-if=\"isTaskDetailsHover\" class=\"backdrop-layer\"></div>\n        <!-- <task-details\n      v-if=\"this.$route.params.taskId\"\n      @close=\"isTaskDetailsHover = false\"\n      @mouseover.native=\"isTaskDetailsHover = true\"\n      @mouseleave.native=\"isTaskDetailsHover = false\"\n    /> -->\n        <router-view :class=\"['grow', darkMode]\" />\n        <div\n            v-tooltip.top=\"'Chat Board'\"\n            v-show=\"isChatingBtnShown\"\n            class=\"chat-icon-btn-container flex align-center justify-center\"\n        >\n            <i\n                @click=\"toggleChat\"\n                class=\"fas chat-icon fa-comments relative\"\n            ></i>\n        </div>\n        <chat-app @closeChat=\"toggleChat\" v-if=\"isChating\" />\n    </section>\n    <div v-else class=\"flex justify-center align-center\">\n        <img src=\"@/assets/imgs/loader.gif\" class=\"loader-app\" />\n    </div>\n</template>\n<script>\nimport { eventBus } from '@/services/event-bus.service'\nimport chatApp from '@/cmps/board-chat'\nimport groupList from '@/cmps/group-list'\nimport boardList from '@/cmps/board-list.vue'\nimport { boardService } from '@/services/board.service'\nimport boardSearch from '@/cmps/board-search'\nimport { utilService } from '@/services/util.service'\nimport boardHeader from '../cmps/board-header.vue'\n// import { socketService } from '@/services/socket.service.js'\nimport trelloMode from '@/cmps/Trello/trello-mode'\nexport default {\n    name: 'board-app',\n    data() {\n        return {\n            isChatingBtnShown: true,\n            isChating: false,\n            isListExpanded: true,\n            isMembersShowen: false,\n            currTaskDetails: null,\n            isTaskDetailsHover: false,\n            componentKey: 0,\n        }\n    },\n    computed: {\n        // NOT  REMOVE THIS FUNC !!!!!!!!!!\n        darkMode() {\n            return this.$store.getters.getDarkModeToggle\n        },\n        displayMode() {\n            return this.$store.getters.displayMode\n        },\n        btnClassExpend() {\n            return this.isListExpanded\n                ? 'expend-btn fas fa-chevron-left'\n                : 'expend-btn fas fa-chevron-right'\n        },\n        chatControl() {\n            return this.isChatingBtnShown ? 'Hide Chat' : 'Show Chat'\n        },\n        user() {\n            return this.$store.getters.user\n        },\n        miniUser() {\n            return this.$store.getters.miniUser\n        },\n        board() {\n            return this.$store.getters.board\n        },\n        boards() {\n            return this.$store.getters.boards\n        },\n    },\n    methods: {\n        setDisplayMode(displayMode) {\n            this.$store.commit({ type: 'setDisplayMode', displayMode })\n        },\n        toogleChatBtn() {\n            this.isChatingBtnShown = !this.isChatingBtnShown\n        },\n        expandList() {\n            this.isListExpanded = true\n        },\n        toggleExpandList() {\n            this.isListExpanded = !this.isListExpanded\n        },\n        toggleChat() {\n            this.isChating = !this.isChating;\n            this.isChatingBtnShown = !this.isChatingBtnShown;\n        },\n        duplicateGroup(group) {\n            group.id = utilService.makeId()\n            this.board.groups.push(group)\n            const txt = `${this.user.fullName} duplicated group the group ${group.name} `\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            this.board.activities.push(newActivity)\n            this.$store.dispatch({ type: 'saveBoard', board: this.board })\n            this.$store.dispatch({ type: 'updateBoard', board: this.board })\n            this.forceRerender()\n        },\n        updateBoardName(ev) {\n            ev.target.blur()\n            if (ev.target.innerText === this.board.name) return\n            else {\n                this.board.name = ev.target.innerText\n                const txt = `${this.user.fullName} update Board name`\n                let newActivity = boardService.getEmptyActivity(\n                    txt,\n                    this.miniUser\n                )\n                this.board.activities.push(newActivity)\n                this.$store.dispatch({ type: 'saveBoard', board: this.board })\n                this.$store.dispatch({ type: 'updateBoard', board: this.board })\n                this.$notify({\n                    message: 'Board name updated',\n                    position: 'bottom-left',\n                    duration: 2000,\n                })\n                this.forceRerender()\n            }\n        },\n        updateBoardDesc(ev) {\n            ev.target.blur()\n            if (ev.target.innerText === this.board.description) return\n            else {\n                this.board.description = ev.target.innerText\n                const txt = `${this.user.fullName} update Board description`\n                let newActivity = boardService.getEmptyActivity(\n                    txt,\n                    this.miniUser\n                )\n                this.board.activities.push(newActivity)\n                this.$store.dispatch({ type: 'saveBoard', board: this.board })\n                this.$notify({\n                    message: 'Board description updated',\n                    position: 'bottom-left',\n                    duration: 2000,\n                })\n                this.forceRerender()\n            }\n        },\n        forceRerender() {\n            this.componentKey += 1\n        },\n        addBoardMember(user) {\n            this.board.members.unshift(user)\n            const txt = `${this.user.fullName} add ${user.fullName} to Board`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            this.board.activities.push(newActivity)\n            this.$store.dispatch({ type: 'saveBoard', board: this.board })\n            this.$notify({\n                message: 'New member added to board',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n        },\n        removeBoardMember(member) {\n            const idx = this.board.members.findIndex(\n                (bMember) => bMember._id === member._id\n            )\n            this.board.members.splice(idx, 1)\n            const txt = `${this.user.fullName} remove  ${member.fullName} from Board`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            this.board.activities.push(newActivity)\n            this.$store.dispatch({ type: 'saveBoard', board: this.board })\n            this.$notify({\n                message: 'Member removed from board',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n        },\n        setSearch(searchBoard) {\n            this.$store.commit({ type: 'setSearch', searchBoard })\n            this.$store.dispatch({ type: 'loadBoards' })\n        },\n        async removeCurrBoard(boardId) {\n            try {\n                const board = boardService.getById()\n                if (board.creator._id !== this.user_id) {\n                    return\n                }\n                await this.$confirm(\n                    'This will permanently delete the board. Continue?',\n                    'Warning',\n                    {\n                        confirmButtonText: 'OK',\n                        cancelButtonText: 'Cancel',\n                        type: 'warning',\n                    }\n                )\n                const txt = `${this.user.fullName} remove Board`\n                let newActivity = boardService.getEmptyActivity(\n                    txt,\n                    this.miniUser\n                )\n                this.board.activities.push(newActivity)\n                this.$store.dispatch({ type: 'removeBoard', boardId })\n                this.$store.dispatch({\n                    type: 'loadAllBoards',\n                    boards: this.boards,\n                })\n                this.$notify({\n                    message: 'Board deleted',\n                    position: 'bottom-left',\n                    duration: 2000,\n                })\n                this.$message({\n                    type: 'success',\n                    message: 'Delete completed',\n                })\n            } catch (err) {\n                this.$message({\n                    durtion: 2000,\n                    showClose: true,\n                    type: 'error',\n                    offset: 335,\n                    message: 'Only the creator can delete the board!',\n                })\n            }\n        },\n        loadBoards() {\n            this.$store.dispatch({ type: 'loadBoards' })\n            this.forceRerender()\n        },\n        async addBoard() {\n            try {\n                const res = await this.$prompt(\n                    'Please enter a name to your board',\n                    'Add New Board',\n                    {\n                        confirmButtonText: 'OK',\n                        cancelButtonText: 'Cancel',\n                    }\n                )\n                const board = boardService.getEmptyBoard()\n                board.name = res.value\n                board.creator = this.miniUser\n                board.members.push(this.miniUser)\n                const txt = `${this.miniUser.fullName} create this Board`\n                let newActivity = boardService.getEmptyActivity(\n                    txt,\n                    this.miniUser\n                )\n                this.board.activities.push(newActivity)\n                this.$store.dispatch({ type: 'saveBoard', board })\n                this.$message({\n                    type: 'success',\n                    duration: 2500,\n                    message: 'Your Board:' + res.value + ' add ',\n                })\n            } catch (err) {\n                this.$message({\n                    type: 'info',\n                    duration: 2500,\n                    message: 'Your action canceled',\n                })\n            }\n        },\n        async loadBoard() {\n            try {\n                await this.$store.dispatch({\n                    type: 'loadBoard',\n                    boardId: this.$route.params.boardId,\n                })\n            } catch (e) {\n                console.log('Erororor!!')\n            }\n        },\n        addGroup() {\n            const newGroup = boardService.getEmptyGroup()\n            this.board.groups.push(newGroup)\n            const txt = `${this.user.fullName} has added a new group!`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            this.board.activities.push(newActivity)\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.$notify({\n                message: 'New group added',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.forceRerender()\n        },\n        deleteGroup(groupId) {\n            const idx = this.board.groups.findIndex(\n                (group) => group.id === groupId\n            )\n            const txt = `${this.user.fullName} deleted group ${this.board.groups[idx].txt}`\n            this.board.groups.splice(idx, 1)\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            this.board.activities.push(newActivity)\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.$notify({\n                message: 'Group deleted',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.forceRerender()\n        },\n        updateGroup(updatedGroup) {\n            const idx = this.board.groups.findIndex(\n                (group) => group.id === updatedGroup.id\n            )\n            if (idx < 0) return\n            this.board.groups.splice(idx, 1, updatedGroup)\n            const txt = `${this.user.fullName} updated group ${updatedGroup.name}`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            this.board.activities.push(newActivity)\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.$notify({\n                message: 'Group updated',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.forceRerender()\n        },\n        updateGroups(groups) {\n            this.board.groups = groups\n            const txt = `${this.user.fullName} updated the groups`\n            let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n            this.board.activities.push(newActivity)\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.$notify({\n                message: 'Groups updated',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.forceRerender()\n        },\n    },\n    watch: {\n        '$route.params.boardId'() {\n            this.loadBoard()\n            this.forceRerender()\n        },\n    },\n    created() {\n        this.$store.dispatch({\n            type: 'createPrivateSocket',\n        })\n        this.$store.dispatch({ type: 'loadUsers' })\n        this.loadBoards()\n        this.loadBoard()\n        eventBus.$on('updateGroup', this.updateGroup)\n        eventBus.$on('forceRerender', this.forceRerender)\n    },\n    destroyed() {},\n    components: {\n        groupList,\n        boardList,\n        boardSearch,\n        chatApp,\n        boardHeader,\n        trelloMode,\n    },\n}\n</script>"]}]}