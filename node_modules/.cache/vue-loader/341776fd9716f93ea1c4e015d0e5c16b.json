{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/status-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/status-preview.vue","mtime":1607212899129},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB0YXNrUHJldmlldyBmcm9tICcuL3Rhc2stcHJldmlldy52dWUnCmltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnQC9zZXJ2aWNlcy9ldmVudC1idXMuc2VydmljZScKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYm9hcmQuc2VydmljZScKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnc3RhdHVlcy1wcmV2aWV3JywKICBwcm9wczogewogICAgc3RhdHVzOiBPYmplY3QsCiAgICBncm91cDogT2JqZWN0CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdHh0OiAnJywKICAgICAgaXNBZGRCdG5TaG93bjogZmFsc2UKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBib2FyZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMuYm9hcmQKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGRlbGV0ZVRhc2sodGFzaykgewogICAgICBjb25zdCBncm91cCA9IHRoaXMuYm9hcmQuZ3JvdXBzLmZpbmQoZ3JvdXAgPT4gZ3JvdXAuaWQgPT09IHRhc2suZ3JvdXBJZCkKICAgICAgY29uc3QgdGFza0lkeCA9IGdyb3VwLnRhc2tzLmZpbmRJbmRleChjdXJyVGFzayA9PiBjdXJyVGFzay5pZCA9PT0gdGFzay5pZCkKICAgICAgZ3JvdXAudGFza3Muc3BsaWNlKHRhc2tJZHgsIDEpCiAgICAgIGV2ZW50QnVzLiRlbWl0KCd1cGRhdGVHcm91cCcsIGdyb3VwKQogICAgfSwKICAgIHVwZGF0ZVRhc2sodXBkYXRlZFRhc2spIHsKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmJvYXJkLmdyb3Vwcy5maW5kKAogICAgICAgIGdyb3VwID0+IGdyb3VwLmlkID09PSB1cGRhdGVkVGFzay5ncm91cElkCiAgICAgICkKICAgICAgY29uc3QgdGFza0lkeCA9IGdyb3VwLnRhc2tzLmZpbmRJbmRleCgKICAgICAgICBjdXJyVGFzayA9PiBjdXJyVGFzay5pZCA9PT0gdXBkYXRlZFRhc2suaWQKICAgICAgKQogICAgICBncm91cC50YXNrcy5zcGxpY2UodGFza0lkeCwgMSwgdXBkYXRlZFRhc2spCiAgICAgIGV2ZW50QnVzLiRlbWl0KCd1cGRhdGVHcm91cCcsIGdyb3VwKQogICAgfSwKICAgIGZvY3VzSW5wdXQoKSB7CiAgICAgIHRoaXMuaXNBZGRCdG5TaG93biA9IHRydWUKICAgIH0sCiAgICB1bkZvY3VzSW5wdXQoKSB7CiAgICAgIHRoaXMuaXNBZGRCdG5TaG93biA9IGZhbHNlCiAgICB9LAogICAgYWRkVGFzaygpIHsKICAgICAgY29uc3QgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKQogICAgICBuZXdUYXNrLnN0YXR1cy5jb2xvciA9IHRoaXMuc3RhdHVzLmNvbG9yCiAgICAgIG5ld1Rhc2suc3RhdHVzLnR4dCA9IHRoaXMuc3RhdHVzLnR4dAogICAgICBuZXdUYXNrLnR4dCA9IHRoaXMudHh0CiAgICAgIHRoaXMuZ3JvdXAudGFza3MudW5zaGlmdChuZXdUYXNrKQogICAgICBldmVudEJ1cy4kZW1pdCgndXBkYXRlR3JvdXAnLCB0aGlzLmdyb3VwKQogICAgICB0aGlzLmlzQWRkQnRuU2hvd24gPSBmYWxzZQogICAgICB0aGlzLnR4dCA9ICcnCiAgICB9CiAgfSwKICBjcmVhdGVkKCkgewogICAgdGhpcy5ncm91cENvcHkgPSB0aGlzLmdyb3VwCiAgfSwKICBjb21wb25lbnRzOiB7CiAgICB0YXNrUHJldmlldwogIH0KfQo="},{"version":3,"sources":["status-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"status-preview.vue","sourceRoot":"src/cmps/Trello","sourcesContent":["<template>\n  <li\n    :style=\"`background-color:${status.color}`\"\n    class=\"status-preview flex align-center\"\n  >\n    <span class=\"status-title\"\n      >{{ status.txt || 'No label' }}\n      <span v-if=\"status.tasks\">/ {{ status.tasks.length }}</span></span\n    >\n\n    <task-preview\n      v-for=\"task in status.tasks\"\n      :key=\"task.id\"\n      :task=\"task\"\n      :group=\"group\"\n      @updateTask=\"updateTask\"\n      @deleteTask=\"deleteTask\"\n    />\n    <form class=\"add-task-form flex align-center\" @submit.prevent=\"addTask\">\n      <input\n        class=\"add-task-input\"\n        v-model=\"txt\"\n        type=\"text\"\n        placeholder=\"+ Add Task\"\n        @click=\"focusInput\"\n        @blur=\"unFocusInput\"\n      />\n      <button type=\"submit\" class=\"add-btn\" v-if=\"isAddBtnShown\">\n        <span>+</span>\n      </button>\n    </form>\n  </li>\n</template>\n\n<script>\nimport taskPreview from './task-preview.vue'\nimport { eventBus } from '@/services/event-bus.service'\nimport { boardService } from '../../services/board.service'\n\nexport default {\n  name: 'statues-preview',\n  props: {\n    status: Object,\n    group: Object\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShown: false\n    }\n  },\n  computed: {\n    board() {\n      return this.$store.getters.board\n    }\n  },\n  methods: {\n    deleteTask(task) {\n      const group = this.board.groups.find(group => group.id === task.groupId)\n      const taskIdx = group.tasks.findIndex(currTask => currTask.id === task.id)\n      group.tasks.splice(taskIdx, 1)\n      eventBus.$emit('updateGroup', group)\n    },\n    updateTask(updatedTask) {\n      const group = this.board.groups.find(\n        group => group.id === updatedTask.groupId\n      )\n      const taskIdx = group.tasks.findIndex(\n        currTask => currTask.id === updatedTask.id\n      )\n      group.tasks.splice(taskIdx, 1, updatedTask)\n      eventBus.$emit('updateGroup', group)\n    },\n    focusInput() {\n      this.isAddBtnShown = true\n    },\n    unFocusInput() {\n      this.isAddBtnShown = false\n    },\n    addTask() {\n      const newTask = boardService.getEmptyTask()\n      newTask.status.color = this.status.color\n      newTask.status.txt = this.status.txt\n      newTask.txt = this.txt\n      this.group.tasks.unshift(newTask)\n      eventBus.$emit('updateGroup', this.group)\n      this.isAddBtnShown = false\n      this.txt = ''\n    }\n  },\n  created() {\n    this.groupCopy = this.group\n  },\n  components: {\n    taskPreview\n  }\n}\n</script>\n"]}]}