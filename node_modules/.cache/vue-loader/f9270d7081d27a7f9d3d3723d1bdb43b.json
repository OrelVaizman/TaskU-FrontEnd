{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-preview-trello.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-preview-trello.vue","mtime":1606924590836},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBwcm9ncmVzc0JhciBmcm9tICdAL2NtcHMvcHJvZ3Jlc3MtYmFyJwppbXBvcnQgdGFza0xpc3QgZnJvbSAnLi90YXNrLWxpc3QudnVlJwppbXBvcnQgcG9wdXBNZW51IGZyb20gJy4vcG9wdXAtbWVudScKaW1wb3J0IGNvbG9yc01lbnUgZnJvbSAnLi9jb2xvcnMtbWVudScKLy8gaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwppbXBvcnQgeyBib2FyZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9ib2FyZC5zZXJ2aWNlJwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ2dyb3VwLXByZXZpZXcnLAogICAgcHJvcHM6IHsKICAgICAgICBncm91cDogT2JqZWN0LAogICAgICAgIGRlbGV0ZUdyb3VwOiBGdW5jdGlvbiwKICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGlzR3JvdXBIb3ZlcmluZzogZmFsc2UsCiAgICAgICAgICAgIGlzRXhwYW5kZWQ6IHRydWUsCiAgICAgICAgICAgIGdyb3VwQ29weTogbnVsbCwKICAgICAgICAgICAgaXNBY3Rpb25zU2hvd2VuOiBmYWxzZSwKICAgICAgICAgICAgaXNDb2xvcnNTaG93ZW46IGZhbHNlLAogICAgICAgICAgICBwb3B1cE9wdGlvbnM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB0eHQ6ICdFeHBhbmQnLAogICAgICAgICAgICAgICAgICAgIGZ1bmM6IHRoaXMuZXhwYW5kR3JvdXAsCiAgICAgICAgICAgICAgICAgICAgaWNvblN0cjogJ2V4cGFuZC1hbHQnLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB0eHQ6ICdOZXcgVGFzaycsCiAgICAgICAgICAgICAgICAgICAgZnVuYzogdGhpcy5hZGROZXdUYXNrLAogICAgICAgICAgICAgICAgICAgIGljb25TdHI6ICdwbHVzJywKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdHh0OiAnRGVsZXRlJywKICAgICAgICAgICAgICAgICAgICBmdW5jOiB0aGlzLmRlbGV0ZUdyb3VwLAogICAgICAgICAgICAgICAgICAgIGljb25TdHI6ICd0cmFzaCcsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHR4dDogJ0NoYW5nZSBDb2xvcicsCiAgICAgICAgICAgICAgICAgICAgZnVuYzogdGhpcy50b2dnbGVDb2xvcnNNZW51LAogICAgICAgICAgICAgICAgICAgIGljb25TdHI6ICdwYWludC1icnVzaCcsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHR4dDogJ0R1cGxpY2F0ZScsCiAgICAgICAgICAgICAgICAgICAgZnVuYzogdGhpcy5kdXBsaWNhdGVHcm91cCwKICAgICAgICAgICAgICAgICAgICBpY29uU3RyOiAnY29weScsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgc2hvd0RyYWdCdG4oKSB7CiAgICAgICAgICAgIHRoaXMuaXNHcm91cEhvdmVyaW5nID0gdHJ1ZQogICAgICAgIH0sCiAgICAgICAgaGlkZURyYWdCdG4oKSB7CiAgICAgICAgICAgIHRoaXMuaXNHcm91cEhvdmVyaW5nID0gZmFsc2UKICAgICAgICB9LAogICAgICAgIGNsb3NlUG9wVXBzKCkgewogICAgICAgICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9IGZhbHNlCiAgICAgICAgICAgIHRoaXMuaXNDb2xvcnNTaG93ZW4gPSBmYWxzZQogICAgICAgIH0sCiAgICAgICAgYWRkTmV3VGFzaygpIHsKICAgICAgICAgICAgY29uc3QgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKQogICAgICAgICAgICB0aGlzLmdyb3VwQ29weS50YXNrcy5wdXNoKG5ld1Rhc2spCiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZUdyb3VwJywgdGhpcy5ncm91cENvcHkpCiAgICAgICAgfSwKICAgICAgICBmb2N1c0dyb3VwTmFtZSgpIHsKICAgICAgICAgICAgdGhpcy4kcmVmcy5ncm91cE5hbWUuZm9jdXMoKQogICAgICAgICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBnZXRTdHlsZVN0cihjb2xvclN0cikgewogICAgICAgICAgICByZXR1cm4gYGJhY2tncm91bmRDb2xvcjoke2NvbG9yU3RyfWAKICAgICAgICB9LAogICAgICAgIGR1cGxpY2F0ZUdyb3VwKCkgewogICAgICAgICAgICB0aGlzLiRlbWl0KCdkdXBsaWNhdGVHcm91cCcsIHRoaXMuZ3JvdXBDb3B5KQogICAgICAgIH0sCiAgICAgICAgZW1pdEZvcmNlUmVuZGVyKCkgewogICAgICAgICAgICB0aGlzLiRlbWl0KCdlbWl0Rm9yY2VSZW5kZXInKQogICAgICAgIH0sCiAgICAgICAgdG9nZ2xlQ29sb3JzTWVudSgpIHsKICAgICAgICAgICAgdGhpcy5pc0NvbG9yc1Nob3dlbiA9ICF0aGlzLmlzQ29sb3JzU2hvd2VuCiAgICAgICAgfSwKICAgICAgICB0b2dnbGVHcm91cEFjdGlvbnMoKSB7CiAgICAgICAgICAgIHRoaXMuaXNBY3Rpb25zU2hvd2VuID0gIXRoaXMuaXNBY3Rpb25zU2hvd2VuCiAgICAgICAgfSwKICAgICAgICBlbWl0RGVsZXRlKGdyb3VwSWQpIHsKICAgICAgICAgICAgdGhpcy4kZW1pdCgnZGVsZXRlR3JvdXAnLCBncm91cElkKQogICAgICAgICAgICB0aGlzLmlzRXhwYW5kZWQgPSBmYWxzZQogICAgICAgIH0sCiAgICAgICAgdG9nZ2xlR3JvdXAoKSB7CiAgICAgICAgICAgIHRoaXMuaXNFeHBhbmRlZCA9ICF0aGlzLmlzRXhwYW5kZWQKICAgICAgICAgICAgdGhpcy5pc0FjdGlvbnNTaG93ZW4gPSBmYWxzZQogICAgICAgIH0sCiAgICAgICAgZXhwYW5kR3JvdXAoKSB7CiAgICAgICAgICAgIHRoaXMuaXNFeHBhbmRlZCA9IHRydWUKICAgICAgICAgICAgdGhpcy5pc0FjdGlvbnNTaG93ZW4gPSBmYWxzZQogICAgICAgIH0sCiAgICAgICAgc2V0R3JvdXBDb2xvcihjb2xvcikgewogICAgICAgICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9IGZhbHNlCiAgICAgICAgICAgIHRoaXMuZ3JvdXBDb3B5LmNvbG9yID0gY29sb3IKICAgICAgICAgICAgdGhpcy5pc0NvbG9yc1Nob3dlbiA9IGZhbHNlCiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZUdyb3VwJywgdGhpcy5ncm91cENvcHkpCiAgICAgICAgfSwKICAgICAgICB1cGRhdGVHcm91cE5hbWUoZXYpIHsKICAgICAgICAgICAgZXYudGFyZ2V0LmJsdXIoKQogICAgICAgICAgICBpZiAoZXYudGFyZ2V0LmlubmVyVGV4dCA9PT0gdGhpcy5ncm91cENvcHkubmFtZSkgcmV0dXJuCiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5ncm91cENvcHkubmFtZSA9IGV2LnRhcmdldC5pbm5lclRleHQKICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZUdyb3VwJywgdGhpcy5ncm91cENvcHkpCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgfSwKICAgIGNvbXB1dGVkOiB7CiAgICAgICAgcHJvZ3Jlc3NCYXJEYXRhKCkgewogICAgICAgICAgICBsZXQgc3RhdHVzUGVyY2VudGFnZU1hcCA9IHRoaXMuZ3JvdXAudGFza3MucmVkdWNlKChhY2MsIHRhc2spID0+IHsKICAgICAgICAgICAgICAgIGlmICghYWNjW3Rhc2suc3RhdHVzLnR4dF0pCiAgICAgICAgICAgICAgICAgICAgYWNjW3Rhc2suc3RhdHVzLnR4dF0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiAwLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2xvcjogdGFzay5zdGF0dXMuY29sb3IsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYWNjW3Rhc2suc3RhdHVzLnR4dF0uY291bnQrKwogICAgICAgICAgICAgICAgcmV0dXJuIGFjYwogICAgICAgICAgICB9LCB7fSkKICAgICAgICAgICAgY29uc3QgdG90YWxTdW0gPSB0aGlzLmdyb3VwLnRhc2tzLmxlbmd0aAogICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gc3RhdHVzUGVyY2VudGFnZU1hcCkgewogICAgICAgICAgICAgICAgc3RhdHVzUGVyY2VudGFnZU1hcFsKICAgICAgICAgICAgICAgICAgICBrZXkKICAgICAgICAgICAgICAgIF0uZnJhY3Rpb24gPSBgJHtzdGF0dXNQZXJjZW50YWdlTWFwW2tleV0uY291bnR9IC8gJHt0b3RhbFN1bX1gCiAgICAgICAgICAgICAgICBzdGF0dXNQZXJjZW50YWdlTWFwW2tleV0ucGVyY2VudGFnZSA9CiAgICAgICAgICAgICAgICAgICAgKHN0YXR1c1BlcmNlbnRhZ2VNYXBba2V5XS5jb3VudCAvIHRvdGFsU3VtKSAqIDEwMAogICAgICAgICAgICAgICAgc3RhdHVzUGVyY2VudGFnZU1hcFtrZXldLm5hbWUgPSBrZXkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc3RhdHVzUGVyY2VudGFnZU1hcAogICAgICAgIH0sCiAgICAgICAgcHJvZ3Jlc3NCYXJQcmlvKCkgewogICAgICAgICAgICBsZXQgcHJpb3JpdHlQZXJjZW50YWdlTWFwID0gdGhpcy5ncm91cC50YXNrcy5yZWR1Y2UoKGFjYywgdGFzaykgPT4gewogICAgICAgICAgICAgICAgaWYgKCFhY2NbdGFzay5wcmlvcml0eS50eHRdKQogICAgICAgICAgICAgICAgICAgIGFjY1t0YXNrLnByaW9yaXR5LnR4dF0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiAwLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2xvcjogdGFzay5wcmlvcml0eS5jb2xvciwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhY2NbdGFzay5wcmlvcml0eS50eHRdLmNvdW50KysKICAgICAgICAgICAgICAgIHJldHVybiBhY2MKICAgICAgICAgICAgfSwge30pCiAgICAgICAgICAgIGNvbnN0IHRvdGFsU3VtID0gdGhpcy5ncm91cC50YXNrcy5sZW5ndGgKICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHByaW9yaXR5UGVyY2VudGFnZU1hcCkgewogICAgICAgICAgICAgICAgcHJpb3JpdHlQZXJjZW50YWdlTWFwWwogICAgICAgICAgICAgICAgICAgIGtleQogICAgICAgICAgICAgICAgXS5mcmFjdGlvbiA9IGAke3ByaW9yaXR5UGVyY2VudGFnZU1hcFtrZXldLmNvdW50fSAvICR7dG90YWxTdW19YAogICAgICAgICAgICAgICAgcHJpb3JpdHlQZXJjZW50YWdlTWFwW2tleV0ucGVyY2VudGFnZSA9CiAgICAgICAgICAgICAgICAgICAgKHByaW9yaXR5UGVyY2VudGFnZU1hcFtrZXldLmNvdW50IC8gdG90YWxTdW0pICogMTAwCiAgICAgICAgICAgICAgICBwcmlvcml0eVBlcmNlbnRhZ2VNYXBba2V5XS5uYW1lID0ga2V5CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHByaW9yaXR5UGVyY2VudGFnZU1hcAogICAgICAgIH0sCiAgICAgICAgdGFza3NDb3VudCgpIHsKICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuZ3JvdXBDb3B5LnRhc2tzLmxlbmd0aH0gaXRlbXNgCiAgICAgICAgfSwKICAgICAgICBleHBhbmRlZCgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNFeHBhbmRlZCA/IHRydWUgOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgZ3JvdXBDb2xvcigpIHsKICAgICAgICAgICAgcmV0dXJuIHsgY29sb3I6IHRoaXMuZ3JvdXBDb3B5LmNvbG9yIH0KICAgICAgICB9LAogICAgICAgIGJvYXJkKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5ib2FyZAogICAgICAgIH0sCiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICB0aGlzLmdyb3VwQ29weSA9IHRoaXMuZ3JvdXAKICAgIH0sCiAgICBjb21wb25lbnRzOiB7CiAgICAgICAgdGFza0xpc3QsCiAgICAgICAgY29sb3JzTWVudSwKICAgICAgICBwcm9ncmVzc0JhciwKICAgICAgICBwb3B1cE1lbnUsCiAgICB9LAp9Cg=="},{"version":3,"sources":["group-preview-trello.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"group-preview-trello.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n    <section class=\"group-preview-container relative\">\n        <div\n            @mouseover=\"showDragBtn\"\n            @mouseleave=\"hideDragBtn\"\n            class=\"group-control\"\n        >\n            <div class=\"expand-btn-container\">\n                Trello shift\n                <button\n                    :style=\"getStyleStr(group.color)\"\n                    class=\"expand-btn\"\n                    @click.stop=\"toggleGroupActions\"\n                >\n                    <i\n                        class=\"expand-arrow fas fa-arrow-down\"\n                        v-tooltip.right=\"'Actions'\"\n                    ></i>\n                </button>\n            </div>\n            <button v-show=\"isGroupHovering\" class=\"drag-btn\">\n                <i\n                    class=\"fas fa-arrows-alt drag-icon\"\n                    v-tooltip.right=\"'Drag group'\"\n                ></i>\n            </button>\n        </div>\n        <li\n            :class=\"{\n                'group-preview width100 flex space-between align-center ': true,\n                expanded: expanded,\n            }\"\n            @click=\"expandGroup\"\n        >\n            <h4\n                :class=\"{\n                    'group-headers group-name editable': true,\n                    hovering: isGroupHovering,\n                }\"\n                spellcheck=\"false\"\n                ref=\"groupName\"\n                :style=\"groupColor\"\n                @mouseover=\"showDragBtn\"\n                @mouseleave=\"hideDragBtn\"\n                @blur=\"updateGroupName\"\n                @keydown.enter=\"updateGroupName\"\n                contenteditable\n            >\n                {{ groupCopy.name }}\n            </h4>\n\n            <popup-menu\n                v-if=\"isActionsShowen\"\n                @closePopup=\"toggleGroupActions\"\n                :menuItems=\"popupOptions\"\n            />\n            <colors-menu v-if=\"isColorsShowen\" @setColor=\"setGroupColor\" />\n            <span v-if=\"!isExpanded\">{{ tasksCount }}</span>\n            <div v-if=\"isExpanded\" class=\"flex space-between align-center\">\n                <div class=\"group-headers headers flex\">\n                    <h4 class=\"list-title\">Members</h4>\n                    <h4 class=\"list-title\">Status</h4>\n                    <h4 class=\"list-title\">Priority</h4>\n                    <h4 class=\"list-title date\">Due Date</h4>\n                </div>\n            </div>\n            <task-list\n                :taskColor=\"group.color\"\n                v-if=\"isExpanded && groupCopy.tasks && groupCopy.id\"\n                :tasks=\"groupCopy.tasks\"\n                :groupId=\"groupCopy.id\"\n                @forceRender=\"emitForceRender\"\n            />\n            <div class=\"progress-bar-section flex\">\n                <progress-bar :progressBarData=\"progressBarData\" />\n\n                <progress-bar :progressBarData=\"progressBarPrio\" />\n            </div>\n        </li>\n        <div\n            class=\"back-drop-layer\"\n            v-if=\"isActionsShowen || isColorsShowen\"\n            @click.stop=\"closePopUps\"\n        ></div>\n    </section>\n</template>\n\n<script>\nimport progressBar from '@/cmps/progress-bar'\nimport taskList from './task-list.vue'\nimport popupMenu from './popup-menu'\nimport colorsMenu from './colors-menu'\n// import { eventBus } from '@/services/event-bus.service'\nimport { boardService } from '../services/board.service'\n\nexport default {\n    name: 'group-preview',\n    props: {\n        group: Object,\n        deleteGroup: Function,\n    },\n    data() {\n        return {\n            isGroupHovering: false,\n            isExpanded: true,\n            groupCopy: null,\n            isActionsShowen: false,\n            isColorsShowen: false,\n            popupOptions: [\n                {\n                    txt: 'Expand',\n                    func: this.expandGroup,\n                    iconStr: 'expand-alt',\n                },\n                {\n                    txt: 'New Task',\n                    func: this.addNewTask,\n                    iconStr: 'plus',\n                },\n                {\n                    txt: 'Delete',\n                    func: this.deleteGroup,\n                    iconStr: 'trash',\n                },\n                {\n                    txt: 'Change Color',\n                    func: this.toggleColorsMenu,\n                    iconStr: 'paint-brush',\n                },\n                {\n                    txt: 'Duplicate',\n                    func: this.duplicateGroup,\n                    iconStr: 'copy',\n                },\n            ],\n        }\n    },\n    methods: {\n        showDragBtn() {\n            this.isGroupHovering = true\n        },\n        hideDragBtn() {\n            this.isGroupHovering = false\n        },\n        closePopUps() {\n            this.isActionsShowen = false\n            this.isColorsShowen = false\n        },\n        addNewTask() {\n            const newTask = boardService.getEmptyTask()\n            this.groupCopy.tasks.push(newTask)\n            this.$emit('updateGroup', this.groupCopy)\n        },\n        focusGroupName() {\n            this.$refs.groupName.focus()\n            this.isActionsShowen = false\n        },\n        getStyleStr(colorStr) {\n            return `backgroundColor:${colorStr}`\n        },\n        duplicateGroup() {\n            this.$emit('duplicateGroup', this.groupCopy)\n        },\n        emitForceRender() {\n            this.$emit('emitForceRender')\n        },\n        toggleColorsMenu() {\n            this.isColorsShowen = !this.isColorsShowen\n        },\n        toggleGroupActions() {\n            this.isActionsShowen = !this.isActionsShowen\n        },\n        emitDelete(groupId) {\n            this.$emit('deleteGroup', groupId)\n            this.isExpanded = false\n        },\n        toggleGroup() {\n            this.isExpanded = !this.isExpanded\n            this.isActionsShowen = false\n        },\n        expandGroup() {\n            this.isExpanded = true\n            this.isActionsShowen = false\n        },\n        setGroupColor(color) {\n            this.isActionsShowen = false\n            this.groupCopy.color = color\n            this.isColorsShowen = false\n            this.$emit('updateGroup', this.groupCopy)\n        },\n        updateGroupName(ev) {\n            ev.target.blur()\n            if (ev.target.innerText === this.groupCopy.name) return\n            else {\n                this.groupCopy.name = ev.target.innerText\n                this.$emit('updateGroup', this.groupCopy)\n            }\n        },\n    },\n    computed: {\n        progressBarData() {\n            let statusPercentageMap = this.group.tasks.reduce((acc, task) => {\n                if (!acc[task.status.txt])\n                    acc[task.status.txt] = {\n                        count: 0,\n                        statusColor: task.status.color,\n                    }\n                acc[task.status.txt].count++\n                return acc\n            }, {})\n            const totalSum = this.group.tasks.length\n            for (let key in statusPercentageMap) {\n                statusPercentageMap[\n                    key\n                ].fraction = `${statusPercentageMap[key].count} / ${totalSum}`\n                statusPercentageMap[key].percentage =\n                    (statusPercentageMap[key].count / totalSum) * 100\n                statusPercentageMap[key].name = key\n            }\n            return statusPercentageMap\n        },\n        progressBarPrio() {\n            let priorityPercentageMap = this.group.tasks.reduce((acc, task) => {\n                if (!acc[task.priority.txt])\n                    acc[task.priority.txt] = {\n                        count: 0,\n                        statusColor: task.priority.color,\n                    }\n                acc[task.priority.txt].count++\n                return acc\n            }, {})\n            const totalSum = this.group.tasks.length\n            for (let key in priorityPercentageMap) {\n                priorityPercentageMap[\n                    key\n                ].fraction = `${priorityPercentageMap[key].count} / ${totalSum}`\n                priorityPercentageMap[key].percentage =\n                    (priorityPercentageMap[key].count / totalSum) * 100\n                priorityPercentageMap[key].name = key\n            }\n            return priorityPercentageMap\n        },\n        tasksCount() {\n            return `${this.groupCopy.tasks.length} items`\n        },\n        expanded() {\n            return this.isExpanded ? true : false\n        },\n        groupColor() {\n            return { color: this.groupCopy.color }\n        },\n        board() {\n            return this.$store.getters.board\n        },\n    },\n    created() {\n        this.groupCopy = this.group\n    },\n    components: {\n        taskList,\n        colorsMenu,\n        progressBar,\n        popupMenu,\n    },\n}\n</script>\n"]}]}