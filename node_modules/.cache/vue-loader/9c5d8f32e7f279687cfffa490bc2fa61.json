{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-preview.vue","mtime":1607175842068},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBwcm9ncmVzc0JhciBmcm9tICdAL2NtcHMvcHJvZ3Jlc3MtYmFyJwppbXBvcnQgdGFza0xpc3QgZnJvbSAnLi90YXNrLWxpc3QudnVlJwppbXBvcnQgcG9wdXBNZW51IGZyb20gJy4vcG9wdXAtbWVudScKaW1wb3J0IGNvbG9yc01lbnUgZnJvbSAnLi9jb2xvcnMtbWVudScKLy8gaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwppbXBvcnQgeyBib2FyZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9ib2FyZC5zZXJ2aWNlJwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ2dyb3VwLXByZXZpZXcnLAogICAgcHJvcHM6IHsKICAgICAgICBncm91cDogT2JqZWN0LAogICAgICAgIGRlbGV0ZUdyb3VwOiBGdW5jdGlvbiwKICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGlzR3JvdXBIb3ZlcmluZzogZmFsc2UsCiAgICAgICAgICAgIGlzRXhwYW5kZWQ6IHRydWUsCiAgICAgICAgICAgIGdyb3VwQ29weTogbnVsbCwKICAgICAgICAgICAgaXNBY3Rpb25zU2hvd2VuOiBmYWxzZSwKICAgICAgICAgICAgaXNDb2xvcnNTaG93ZW46IGZhbHNlLAogICAgICAgICAgICBwb3B1cE9wdGlvbnM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB0eHQ6ICdFeHBhbmQnLAogICAgICAgICAgICAgICAgICAgIGZ1bmM6IHRoaXMuZXhwYW5kR3JvdXAsCiAgICAgICAgICAgICAgICAgICAgaWNvblN0cjogJ2V4cGFuZC1hbHQnLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB0eHQ6ICdOZXcgVGFzaycsCiAgICAgICAgICAgICAgICAgICAgZnVuYzogdGhpcy5hZGROZXdUYXNrLAogICAgICAgICAgICAgICAgICAgIGljb25TdHI6ICdwbHVzJywKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdHh0OiAnRGVsZXRlJywKICAgICAgICAgICAgICAgICAgICBmdW5jOiB0aGlzLmVtaXREZWxldGUsCiAgICAgICAgICAgICAgICAgICAgaWNvblN0cjogJ3RyYXNoJywKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdHh0OiAnQ2hhbmdlIENvbG9yJywKICAgICAgICAgICAgICAgICAgICBmdW5jOiB0aGlzLnRvZ2dsZUNvbG9yc01lbnUsCiAgICAgICAgICAgICAgICAgICAgaWNvblN0cjogJ3BhaW50LWJydXNoJywKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdHh0OiAnRHVwbGljYXRlJywKICAgICAgICAgICAgICAgICAgICBmdW5jOiB0aGlzLmR1cGxpY2F0ZUdyb3VwLAogICAgICAgICAgICAgICAgICAgIGljb25TdHI6ICdjb3B5JywKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF0sCiAgICAgICAgfQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBzaG93RHJhZ0J0bigpIHsKICAgICAgICAgICAgdGhpcy5pc0dyb3VwSG92ZXJpbmcgPSB0cnVlCiAgICAgICAgfSwKICAgICAgICBoaWRlRHJhZ0J0bigpIHsKICAgICAgICAgICAgdGhpcy5pc0dyb3VwSG92ZXJpbmcgPSBmYWxzZQogICAgICAgIH0sCiAgICAgICAgY2xvc2VQb3BVcHMoKSB7CiAgICAgICAgICAgIHRoaXMuaXNBY3Rpb25zU2hvd2VuID0gZmFsc2UKICAgICAgICAgICAgdGhpcy5pc0NvbG9yc1Nob3dlbiA9IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBhZGROZXdUYXNrKCkgewogICAgICAgICAgICBjb25zdCBuZXdUYXNrID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5VGFzaygpCiAgICAgICAgICAgIHRoaXMuZ3JvdXBDb3B5LnRhc2tzLnB1c2gobmV3VGFzaykKICAgICAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlR3JvdXAnLCB0aGlzLmdyb3VwQ29weSkKICAgICAgICB9LAogICAgICAgIGZvY3VzR3JvdXBOYW1lKCkgewogICAgICAgICAgICB0aGlzLiRyZWZzLmdyb3VwTmFtZS5mb2N1cygpCiAgICAgICAgICAgIHRoaXMuaXNBY3Rpb25zU2hvd2VuID0gZmFsc2UKICAgICAgICB9LAogICAgICAgIGdldFN0eWxlU3RyKGNvbG9yU3RyKSB7CiAgICAgICAgICAgIHJldHVybiBgYmFja2dyb3VuZENvbG9yOiR7Y29sb3JTdHJ9YAogICAgICAgIH0sCiAgICAgICAgZHVwbGljYXRlR3JvdXAoKSB7CiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2R1cGxpY2F0ZUdyb3VwJywgdGhpcy5ncm91cENvcHkpCiAgICAgICAgfSwKICAgICAgICBlbWl0Rm9yY2VSZW5kZXIoKSB7CiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2VtaXRGb3JjZVJlbmRlcicpCiAgICAgICAgfSwKICAgICAgICB0b2dnbGVDb2xvcnNNZW51KCkgewogICAgICAgICAgICB0aGlzLmlzQ29sb3JzU2hvd2VuID0gIXRoaXMuaXNDb2xvcnNTaG93ZW4KICAgICAgICB9LAogICAgICAgIHRvZ2dsZUdyb3VwQWN0aW9ucygpIHsKICAgICAgICAgICAgdGhpcy5pc0FjdGlvbnNTaG93ZW4gPSAhdGhpcy5pc0FjdGlvbnNTaG93ZW4KICAgICAgICB9LAogICAgICAgIGVtaXREZWxldGUoKSB7CiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0ZUdyb3VwJywgdGhpcy5ncm91cENvcHkuaWQpCiAgICAgICAgICAgIHRoaXMuaXNFeHBhbmRlZCA9IGZhbHNlCiAgICAgICAgfSwKICAgICAgICB0b2dnbGVHcm91cCgpIHsKICAgICAgICAgICAgdGhpcy5pc0V4cGFuZGVkID0gIXRoaXMuaXNFeHBhbmRlZAogICAgICAgICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBleHBhbmRHcm91cCgpIHsKICAgICAgICAgICAgdGhpcy5pc0V4cGFuZGVkID0gdHJ1ZQogICAgICAgICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBzZXRHcm91cENvbG9yKGNvbG9yKSB7CiAgICAgICAgICAgIHRoaXMuaXNBY3Rpb25zU2hvd2VuID0gZmFsc2UKICAgICAgICAgICAgdGhpcy5ncm91cENvcHkuY29sb3IgPSBjb2xvcgogICAgICAgICAgICB0aGlzLmlzQ29sb3JzU2hvd2VuID0gZmFsc2UKICAgICAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlR3JvdXAnLCB0aGlzLmdyb3VwQ29weSkKICAgICAgICB9LAogICAgICAgIHVwZGF0ZUdyb3VwTmFtZShldikgewogICAgICAgICAgICBldi50YXJnZXQuYmx1cigpCiAgICAgICAgICAgIGlmIChldi50YXJnZXQuaW5uZXJUZXh0ID09PSB0aGlzLmdyb3VwQ29weS5uYW1lKSByZXR1cm4KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwQ29weS5uYW1lID0gZXYudGFyZ2V0LmlubmVyVGV4dAogICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlR3JvdXAnLCB0aGlzLmdyb3VwQ29weSkKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICB9LAogICAgY29tcHV0ZWQ6IHsKICAgICAgICBwcm9ncmVzc0JhckRhdGEoKSB7CiAgICAgICAgICAgIGxldCBzdGF0dXNQZXJjZW50YWdlTWFwID0gdGhpcy5ncm91cC50YXNrcy5yZWR1Y2UoKGFjYywgdGFzaykgPT4gewogICAgICAgICAgICAgICAgaWYgKCFhY2NbdGFzay5zdGF0dXMudHh0XSkKICAgICAgICAgICAgICAgICAgICBhY2NbdGFzay5zdGF0dXMudHh0XSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvbG9yOiB0YXNrLnN0YXR1cy5jb2xvciwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhY2NbdGFzay5zdGF0dXMudHh0XS5jb3VudCsrCiAgICAgICAgICAgICAgICByZXR1cm4gYWNjCiAgICAgICAgICAgIH0sIHt9KQogICAgICAgICAgICBjb25zdCB0b3RhbFN1bSA9IHRoaXMuZ3JvdXAudGFza3MubGVuZ3RoCiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBzdGF0dXNQZXJjZW50YWdlTWFwKSB7CiAgICAgICAgICAgICAgICBzdGF0dXNQZXJjZW50YWdlTWFwWwogICAgICAgICAgICAgICAgICAgIGtleQogICAgICAgICAgICAgICAgXS5mcmFjdGlvbiA9IGAke3N0YXR1c1BlcmNlbnRhZ2VNYXBba2V5XS5jb3VudH0gLyAke3RvdGFsU3VtfWAKICAgICAgICAgICAgICAgIHN0YXR1c1BlcmNlbnRhZ2VNYXBba2V5XS5wZXJjZW50YWdlID0KICAgICAgICAgICAgICAgICAgICAoc3RhdHVzUGVyY2VudGFnZU1hcFtrZXldLmNvdW50IC8gdG90YWxTdW0pICogMTAwCiAgICAgICAgICAgICAgICBzdGF0dXNQZXJjZW50YWdlTWFwW2tleV0ubmFtZSA9IGtleQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzdGF0dXNQZXJjZW50YWdlTWFwCiAgICAgICAgfSwKICAgICAgICBwcm9ncmVzc0JhclByaW8oKSB7CiAgICAgICAgICAgIGxldCBwcmlvcml0eVBlcmNlbnRhZ2VNYXAgPSB0aGlzLmdyb3VwLnRhc2tzLnJlZHVjZSgoYWNjLCB0YXNrKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoIWFjY1t0YXNrLnByaW9yaXR5LnR4dF0pCiAgICAgICAgICAgICAgICAgICAgYWNjW3Rhc2sucHJpb3JpdHkudHh0XSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvbG9yOiB0YXNrLnByaW9yaXR5LmNvbG9yLAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGFjY1t0YXNrLnByaW9yaXR5LnR4dF0uY291bnQrKwogICAgICAgICAgICAgICAgcmV0dXJuIGFjYwogICAgICAgICAgICB9LCB7fSkKICAgICAgICAgICAgY29uc3QgdG90YWxTdW0gPSB0aGlzLmdyb3VwLnRhc2tzLmxlbmd0aAogICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gcHJpb3JpdHlQZXJjZW50YWdlTWFwKSB7CiAgICAgICAgICAgICAgICBwcmlvcml0eVBlcmNlbnRhZ2VNYXBbCiAgICAgICAgICAgICAgICAgICAga2V5CiAgICAgICAgICAgICAgICBdLmZyYWN0aW9uID0gYCR7cHJpb3JpdHlQZXJjZW50YWdlTWFwW2tleV0uY291bnR9IC8gJHt0b3RhbFN1bX1gCiAgICAgICAgICAgICAgICBwcmlvcml0eVBlcmNlbnRhZ2VNYXBba2V5XS5wZXJjZW50YWdlID0KICAgICAgICAgICAgICAgICAgICAocHJpb3JpdHlQZXJjZW50YWdlTWFwW2tleV0uY291bnQgLyB0b3RhbFN1bSkgKiAxMDAKICAgICAgICAgICAgICAgIHByaW9yaXR5UGVyY2VudGFnZU1hcFtrZXldLm5hbWUgPSBrZXkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcHJpb3JpdHlQZXJjZW50YWdlTWFwCiAgICAgICAgfSwKICAgICAgICB0YXNrc0NvdW50KCkgewogICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5ncm91cENvcHkudGFza3MubGVuZ3RofSBpdGVtc2AKICAgICAgICB9LAogICAgICAgIGV4cGFuZGVkKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5pc0V4cGFuZGVkID8gdHJ1ZSA6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBncm91cENvbG9yKCkgewogICAgICAgICAgICByZXR1cm4geyBjb2xvcjogdGhpcy5ncm91cENvcHkuY29sb3IgfQogICAgICAgIH0sCiAgICAgICAgYm9hcmQoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvYXJkCiAgICAgICAgfSwKICAgIH0sCiAgICBjcmVhdGVkKCkgewogICAgICAgIHRoaXMuZ3JvdXBDb3B5ID0gdGhpcy5ncm91cAogICAgfSwKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICB0YXNrTGlzdCwKICAgICAgICBjb2xvcnNNZW51LAogICAgICAgIHByb2dyZXNzQmFyLAogICAgICAgIHBvcHVwTWVudSwKICAgIH0sCn0K"},{"version":3,"sources":["group-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"group-preview.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n    <section class=\"group-preview-container relative\">\n        <div\n            @mouseover=\"showDragBtn\"\n            @mouseleave=\"hideDragBtn\"\n            class=\"group-control\"\n        >\n            <div class=\"expand-btn-container\">\n                <button\n                    :style=\"getStyleStr(group.color)\"\n                    class=\"expand-btn\"\n                    @click.stop=\"toggleGroupActions\"\n                >\n                    <i\n                        class=\"expand-arrow fas fa-arrow-down\"\n                        v-tooltip.right=\"'Actions'\"\n                    ></i>\n                </button>\n            </div>\n            <button v-show=\"isGroupHovering\" class=\"drag-btn\">\n                <i\n                    class=\"fas fa-arrows-alt drag-icon\"\n                    v-tooltip.right=\"'Drag group'\"\n                ></i>\n            </button>\n        </div>\n        <li\n            :class=\"{\n                'group-preview width100 flex space-between align-center ': true,\n                expanded: expanded,\n            }\"\n            @click=\"expandGroup\"\n        >\n            <h4\n                :class=\"{\n                    'group-headers group-name editable': true,\n                    hovering: isGroupHovering,\n                }\"\n                spellcheck=\"false\"\n                ref=\"groupName\"\n                :style=\"groupColor\"\n                @mouseover=\"showDragBtn\"\n                @mouseleave=\"hideDragBtn\"\n                @blur=\"updateGroupName\"\n                @keydown.enter=\"updateGroupName\"\n                contenteditable\n            >\n                {{ groupCopy.name }}\n            </h4>\n\n            <popup-menu\n                v-if=\"isActionsShowen\"\n                @closePopup=\"toggleGroupActions\"\n                :menuItems=\"popupOptions\"\n            />\n            <colors-menu v-if=\"isColorsShowen\" @setColor=\"setGroupColor\" />\n            <span v-if=\"!isExpanded\">{{ tasksCount }}</span>\n            <div v-if=\"isExpanded\" class=\"flex space-between align-center\">\n                <div class=\"group-headers headers flex\">\n                    <h4 class=\"list-title\">Members</h4>\n                    <h4 class=\"list-title\">Status</h4>\n                    <h4 class=\"list-title\">Priority</h4>\n                    <h4 class=\"list-title date\">Due Date</h4>\n                </div>\n            </div>\n            <task-list\n                :taskColor=\"group.color\"\n                v-if=\"isExpanded && groupCopy.tasks && groupCopy.id\"\n                :tasks=\"groupCopy.tasks\"\n                :groupId=\"groupCopy.id\"\n                @forceRender=\"emitForceRender\"\n            />\n            <div class=\"progress-bar-section flex\">\n                <progress-bar :progressBarData=\"progressBarData\" />\n\n                <progress-bar :progressBarData=\"progressBarPrio\" />\n            </div>\n        </li>\n        <div\n            class=\"back-drop-layer\"\n            v-if=\"isActionsShowen || isColorsShowen\"\n            @click.stop=\"closePopUps\"\n        ></div>\n    </section>\n</template>\n\n<script>\nimport progressBar from '@/cmps/progress-bar'\nimport taskList from './task-list.vue'\nimport popupMenu from './popup-menu'\nimport colorsMenu from './colors-menu'\n// import { eventBus } from '@/services/event-bus.service'\nimport { boardService } from '../services/board.service'\n\nexport default {\n    name: 'group-preview',\n    props: {\n        group: Object,\n        deleteGroup: Function,\n    },\n    data() {\n        return {\n            isGroupHovering: false,\n            isExpanded: true,\n            groupCopy: null,\n            isActionsShowen: false,\n            isColorsShowen: false,\n            popupOptions: [\n                {\n                    txt: 'Expand',\n                    func: this.expandGroup,\n                    iconStr: 'expand-alt',\n                },\n                {\n                    txt: 'New Task',\n                    func: this.addNewTask,\n                    iconStr: 'plus',\n                },\n                {\n                    txt: 'Delete',\n                    func: this.emitDelete,\n                    iconStr: 'trash',\n                },\n                {\n                    txt: 'Change Color',\n                    func: this.toggleColorsMenu,\n                    iconStr: 'paint-brush',\n                },\n                {\n                    txt: 'Duplicate',\n                    func: this.duplicateGroup,\n                    iconStr: 'copy',\n                },\n            ],\n        }\n    },\n    methods: {\n        showDragBtn() {\n            this.isGroupHovering = true\n        },\n        hideDragBtn() {\n            this.isGroupHovering = false\n        },\n        closePopUps() {\n            this.isActionsShowen = false\n            this.isColorsShowen = false\n        },\n        addNewTask() {\n            const newTask = boardService.getEmptyTask()\n            this.groupCopy.tasks.push(newTask)\n            this.$emit('updateGroup', this.groupCopy)\n        },\n        focusGroupName() {\n            this.$refs.groupName.focus()\n            this.isActionsShowen = false\n        },\n        getStyleStr(colorStr) {\n            return `backgroundColor:${colorStr}`\n        },\n        duplicateGroup() {\n            this.$emit('duplicateGroup', this.groupCopy)\n        },\n        emitForceRender() {\n            this.$emit('emitForceRender')\n        },\n        toggleColorsMenu() {\n            this.isColorsShowen = !this.isColorsShowen\n        },\n        toggleGroupActions() {\n            this.isActionsShowen = !this.isActionsShowen\n        },\n        emitDelete() {\n            this.$emit('deleteGroup', this.groupCopy.id)\n            this.isExpanded = false\n        },\n        toggleGroup() {\n            this.isExpanded = !this.isExpanded\n            this.isActionsShowen = false\n        },\n        expandGroup() {\n            this.isExpanded = true\n            this.isActionsShowen = false\n        },\n        setGroupColor(color) {\n            this.isActionsShowen = false\n            this.groupCopy.color = color\n            this.isColorsShowen = false\n            this.$emit('updateGroup', this.groupCopy)\n        },\n        updateGroupName(ev) {\n            ev.target.blur()\n            if (ev.target.innerText === this.groupCopy.name) return\n            else {\n                this.groupCopy.name = ev.target.innerText\n                this.$emit('updateGroup', this.groupCopy)\n            }\n        },\n    },\n    computed: {\n        progressBarData() {\n            let statusPercentageMap = this.group.tasks.reduce((acc, task) => {\n                if (!acc[task.status.txt])\n                    acc[task.status.txt] = {\n                        count: 0,\n                        statusColor: task.status.color,\n                    }\n                acc[task.status.txt].count++\n                return acc\n            }, {})\n            const totalSum = this.group.tasks.length\n            for (let key in statusPercentageMap) {\n                statusPercentageMap[\n                    key\n                ].fraction = `${statusPercentageMap[key].count} / ${totalSum}`\n                statusPercentageMap[key].percentage =\n                    (statusPercentageMap[key].count / totalSum) * 100\n                statusPercentageMap[key].name = key\n            }\n            return statusPercentageMap\n        },\n        progressBarPrio() {\n            let priorityPercentageMap = this.group.tasks.reduce((acc, task) => {\n                if (!acc[task.priority.txt])\n                    acc[task.priority.txt] = {\n                        count: 0,\n                        statusColor: task.priority.color,\n                    }\n                acc[task.priority.txt].count++\n                return acc\n            }, {})\n            const totalSum = this.group.tasks.length\n            for (let key in priorityPercentageMap) {\n                priorityPercentageMap[\n                    key\n                ].fraction = `${priorityPercentageMap[key].count} / ${totalSum}`\n                priorityPercentageMap[key].percentage =\n                    (priorityPercentageMap[key].count / totalSum) * 100\n                priorityPercentageMap[key].name = key\n            }\n            return priorityPercentageMap\n        },\n        tasksCount() {\n            return `${this.groupCopy.tasks.length} items`\n        },\n        expanded() {\n            return this.isExpanded ? true : false\n        },\n        groupColor() {\n            return { color: this.groupCopy.color }\n        },\n        board() {\n            return this.$store.getters.board\n        },\n    },\n    created() {\n        this.groupCopy = this.group\n    },\n    components: {\n        taskList,\n        colorsMenu,\n        progressBar,\n        popupMenu,\n    },\n}\n</script>\n"]}]}