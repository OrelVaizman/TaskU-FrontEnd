{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue","mtime":1606595400643},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhZGRNZW1iZXJzIGZyb20gJ0AvY21wcy9hZGQtbWVtYmVycycKaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwppbXBvcnQgbGFiZWxQaWNrZXIgZnJvbSAnLi9sYWJlbC1waWNrZXInCmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvYm9hcmQuc2VydmljZScKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7IGxhYmVsUGlja2VyLCBhZGRNZW1iZXJzIH0sCiAgbmFtZTogJ3Rhc2stcHJldmlldycsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRhc2tDb3B5OiBudWxsLAogICAgICBpc1N0YXR1c2VzU2hvd2VuOiBmYWxzZSwKICAgICAgaXNQcmlvcnNTaG93ZW46IGZhbHNlLAogICAgICBpc1Rhc2tNZW1iZXJzU2hvd2VuOiBmYWxzZQogICAgfQogIH0sCiAgcHJvcHM6IHsKICAgIHRhc2tDb2xvcjogU3RyaW5nLAogICAgdGFzazogT2JqZWN0LAogICAgc3RhdHVzZXM6IEFycmF5LAogICAgcHJpb3JpdGllczogQXJyYXksCiAgICBncm91cElkOiBTdHJpbmcsCiAgICBib2FyZE1lbWJlcnM6IFtBcnJheSwgT2JqZWN0XSwKICAgIGFjdGl2aXR5OiBPYmplY3QsCiAgICB1c2VyOiBPYmplY3QKICB9LAogIGNvbXB1dGVkOiB7CiAgICB0YXNrQmdjKCkgewogICAgICByZXR1cm4geyBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMudGFza0NvbG9yIH0KICAgIH0sCiAgICBmaWx0ZXJlZEJvYXJkTWVtYmVycygpIHsKICAgICAgY29uc3QgYm9hcmRNZW1iZXJzID0gdGhpcy5ib2FyZE1lbWJlcnMKICAgICAgY29uc3QgdGFza01lbWJlcnMgPSB0aGlzLnRhc2tDb3B5Lm1lbWJlcnMKICAgICAgaWYgKHRhc2tNZW1iZXJzKSB7CiAgICAgICAgY29uc3QgZmlsdGVyZWRCb2FyZE1lbWJlcnMgPSBib2FyZE1lbWJlcnMuZmlsdGVyKGJNZW1iZXIgPT4gewogICAgICAgICAgcmV0dXJuIHRhc2tNZW1iZXJzLmV2ZXJ5KHRNZW1iZXIgPT4gewogICAgICAgICAgICByZXR1cm4gdE1lbWJlci5faWQgIT09IGJNZW1iZXIuX2lkCiAgICAgICAgICB9KQogICAgICAgIH0pCiAgICAgICAgcmV0dXJuIGZpbHRlcmVkQm9hcmRNZW1iZXJzCiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGJvYXJkTWVtYmVycwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICB0b2dnbGVNZW1iZXIoKSB7CiAgICAgIHRoaXMuaXNUYXNrTWVtYmVyc1Nob3dlbiA9ICF0aGlzLmlzVGFza01lbWJlcnNTaG93ZW4KICAgIH0sCiAgICBhZGRUYXNrTWVtYmVyKG1lbWJlcikgewogICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSgpCiAgICAgIGNvbnNvbGUubG9nKCdtZW1iZXI6JywgbWVtYmVyKQogICAgICB0aGlzLnRhc2tDb3B5Lm1lbWJlcnMudW5zaGlmdChtZW1iZXIpCiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9IGBNZW1iZXIgJHttZW1iZXIuZnVsbE5hbWV9IHdhcyBhZGRlZCB0byB0YXNrYAogICAgICBuZXdBY3Rpdml0eS5ieVVzZXIgPSB0aGlzLnVzZXIKICAgICAgdGhpcy50YXNrQ29weS5hY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpCiAgICAgIHRoaXMudXBkYXRlVGFzaygpCiAgICB9LAogICAgcmVtb3ZlVGFza01lbWJlcihtZW1iZXIpIHsKICAgICAgY29uc3QgaWR4ID0gdGhpcy50YXNrQ29weS5tZW1iZXJzLmZpbmRJbmRleCgKICAgICAgICB0TWVtYmVyID0+IHRNZW1iZXIuX2lkID09PSBtZW1iZXIuX2lkCiAgICAgICkKICAgICAgbGV0IG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkoKQogICAgICB0aGlzLnRhc2tDb3B5Lm1lbWJlcnMuc3BsaWNlKGlkeCwgMSkKICAgICAgbmV3QWN0aXZpdHkudHh0ID0gYE1lbWJlciAke21lbWJlci5mdWxsTmFtZX0gd2FzIHJlbW92ZWQgZnJvbSB0YXNrYAogICAgICBuZXdBY3Rpdml0eS5ieVVzZXIgPSB0aGlzLnVzZXIKICAgICAgdGhpcy50YXNrQ29weS5hY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpCiAgICAgIHRoaXMudXBkYXRlVGFzaygpCiAgICB9LAogICAgZ2V0U3R5bGVTdHIoY29sb3JTdHIpIHsKICAgICAgcmV0dXJuIGBiYWNrZ3JvdW5kQ29sb3I6JHtjb2xvclN0cn1gCiAgICB9LAogICAgdG9nZ2xlU3RhdHVzZXMoKSB7CiAgICAgIHRoaXMuaXNTdGF0dXNlc1Nob3dlbiA9ICF0aGlzLmlzU3RhdHVzZXNTaG93ZW4KICAgIH0sCiAgICB0b2dnbGVQcmlvcnMoKSB7CiAgICAgIHRoaXMuaXNQcmlvcnNTaG93ZW4gPSAhdGhpcy5pc1ByaW9yc1Nob3dlbgogICAgfSwKICAgIGRlbGV0ZVRhc2soKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0ZVRhc2snLCB0aGlzLnRhc2tDb3B5LmlkKQogICAgfSwKICAgIHVwZGF0ZVRhc2tUeHQoZXYpIHsKICAgICAgY29uc29sZS5sb2coZXYudGFyZ2V0LmlubmVyVGV4dCkKICAgICAgbGV0IG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkoKQogICAgICBjb25zdCBwcmV2VHh0ID0gdGhpcy50YXNrQ29weS50eHQKICAgICAgdGhpcy50YXNrQ29weS50eHQgPSBldi50YXJnZXQuaW5uZXJUZXh0CiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9IGBUYXNrICcke3ByZXZUeHR9JyB3YXMgY2hhbmdlZCB0byAnJHtldi50YXJnZXQuaW5uZXJUZXh0fSdgCiAgICAgIG5ld0FjdGl2aXR5LmJ5VXNlciA9IHRoaXMudXNlcgogICAgICB0aGlzLnRhc2tDb3B5LmFjdGl2aXRpZXMucHVzaChuZXdBY3Rpdml0eSkKICAgICAgdGhpcy51cGRhdGVUYXNrKCkKICAgIH0sCiAgICB1cGRhdGVUYXNrKCkgewogICAgICB0aGlzLiRlbWl0KCd1cGRhdGVUYXNrJywgdGhpcy50YXNrQ29weSkKICAgIH0sCiAgICBzZW5kVG9UYXNrRGV0YWlscygpIHsKICAgICAgaWYgKAogICAgICAgIHRoaXMuJHJvdXRlLnBhcmFtcy50YXNrSWQgJiYKICAgICAgICB0aGlzLiRyb3V0ZS5wYXJhbXMudGFza0lkID09PSB0aGlzLnRhc2suaWQKICAgICAgKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgCiAgICAgIGV2ZW50QnVzLiRlbWl0KCd0YXNrRGV0YWlscycsIHt0YXNrOiB0aGlzLnRhc2tDb3B5LCBncm91cElkOiB0aGlzLmdyb3VwSWR9KQogICAgICB0aGlzLiRyb3V0ZXIucHVzaChgL2JvYXJkLyR7dGhpcy4kcm91dGUucGFyYW1zLmJvYXJkSWR9L3Rhc2svJHt0aGlzLnRhc2suaWR9YCkKICAgIH0sCiAgICB1cGRhdGVUYXNrUHJpb3JpdHkob3B0KSB7CiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KCkKICAgICAgY29uc3QgcHJldlByaW9yID0gdGhpcy50YXNrQ29weS5wcmlvcml0eQogICAgICB0aGlzLnRhc2tDb3B5LnByaW9yaXR5ID0gb3B0CiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9IGBUYXNrIHByaW9yaXR5IHdhcyB1cGRhdGVkIGZyb20gJyR7cHJldlByaW9yfScgdG8gJyR7b3B0fWAKICAgICAgbmV3QWN0aXZpdHkuYnlVc2VyID0gdGhpcy51c2VyCiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KQogICAgICB0aGlzLnVwZGF0ZVRhc2soKQogICAgICB0aGlzLmlzU3RhdHVzZXNTaG93ZW4gPSBmYWxzZQogICAgfSwKICAgIHVwZGF0ZVRhc2tTdGF0dXMob3B0KSB7CiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KCkKICAgICAgY29uc3QgcHJldlN0YXR1cyA9IHRoaXMudGFza0NvcHkuc3RhdHVzCiAgICAgIHRoaXMudGFza0NvcHkuc3RhdHVzID0gb3B0CiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9IGBUYXNrIHN0YXR1cyB3YXMgdXBkYXRlZCBmcm9tICcke3ByZXZTdGF0dXN9JyB0byAnJHtvcHR9YAogICAgICBuZXdBY3Rpdml0eS5ieVVzZXIgPSB0aGlzLnVzZXIKICAgICAgY29uc29sZS5sb2coJ25ld0FjdGl2aXR5OicsIG5ld0FjdGl2aXR5KQogICAgICB0aGlzLnRhc2tDb3B5LmFjdGl2aXRpZXMucHVzaChuZXdBY3Rpdml0eSkKICAgICAgdGhpcy51cGRhdGVUYXNrKCkKICAgICAgdGhpcy5pc1ByaW9yc1Nob3dlbiA9IGZhbHNlCiAgICB9CiAgfSwKICBjcmVhdGVkKCkgewogICAgY29uc29sZS5sb2coJ2hlcmVlZWVlZWVlZWVlJykKICAgIHRoaXMudGFza0NvcHkgPSB0aGlzLnRhc2sKICAgIGNvbnNvbGUubG9nKCd0YXNrQ29weSBpbiB0YXNrIHByZXZpZXc6JywgdGhpcy50YXNrQ29weSkKICB9Cn0K"},{"version":3,"sources":["task-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"task-preview.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n    <li\n        @click=\"isTaskMembersShowen = false\"\n        v-if=\"taskCopy\"\n        class=\"task-preview flex space-between align-center width100\"\n    >\n        <div class=\"flex space-between width100\">\n            <span class=\"task-color\" :style=\"taskBgc\"></span>\n                  <button @click=\"deleteTask\">X</button>\n\n            <div class=\"task-txt\">\n                <span\n                    @blur=\"updateTaskTxt\"\n                    @keyup.enter=\"updateTaskTxt\"\n                    contenteditable\n                    >{{ taskCopy.txt }}</span\n                >\n            </div>\n            <span @click=\"sendToTaskDetails\"\n                ><i class=\"far fa-comment fa-icon\"></i\n            ></span>\n        </div>\n        <div class=\"task-details flex\">\n            <div class=\"headers flex\">\n                <span\n                    ><i\n                        @click.stop=\"toggleMember\"\n                        class=\"far fa-user-circle fa-icon\"\n                    ></i\n                ></span>\n                <add-members\n                    v-if=\"isTaskMembersShowen\"\n                    firstTitle=\"Task Members\"\n                    secondTitle=\"Board Members\"\n                    :members=\"taskCopy.members\"\n                    :allMembers=\"filteredBoardMembers\"\n                    @addMember=\"addTaskMember\"\n                    @removeMember=\"removeTaskMember\"\n                />\n                <span\n                    @click=\"toggleStatuses\"\n                    class=\"status relative\"\n                    :style=\"getStyleStr(taskCopy.status.color)\"\n                    >{{ taskCopy.status.txt }}\n                    <label-picker\n                        v-if=\"isStatusesShowen\"\n                        :opts=\"statuses\"\n                        type=\"status\"\n                        @updateTaskStatus=\"updateTaskStatus\"\n                /></span>\n                <span\n                    @click=\"togglePriors\"\n                    class=\"priority relative\"\n                    :style=\"getStyleStr(taskCopy.priority.color)\"\n                    >{{ taskCopy.priority.txt }}\n                    <label-picker\n                        v-if=\"isPriorsShowen\"\n                        :opts=\"priorities\"\n                        type=\"priority\"\n                        @updateTaskPriority=\"updateTaskPriority\"\n                /></span>\n                <span class=\"date-picker\">\n                    <el-date-picker\n                        class=\"date-input\"\n                        @change=\"updateTask\"\n                        v-model=\"taskCopy.dueDate\"\n                        type=\"date\"\n                        placeholder=\"Pick a date\"\n                    >\n                    </el-date-picker>\n                </span>\n            </div>\n        </div>\n    </li>\n</template>\n<script>\nimport addMembers from '@/cmps/add-members'\nimport { eventBus } from '@/services/event-bus.service'\nimport labelPicker from './label-picker'\nimport { boardService } from '@/services/board.service'\n\nexport default {\n  components: { labelPicker, addMembers },\n  name: 'task-preview',\n  data() {\n    return {\n      taskCopy: null,\n      isStatusesShowen: false,\n      isPriorsShowen: false,\n      isTaskMembersShowen: false\n    }\n  },\n  props: {\n    taskColor: String,\n    task: Object,\n    statuses: Array,\n    priorities: Array,\n    groupId: String,\n    boardMembers: [Array, Object],\n    activity: Object,\n    user: Object\n  },\n  computed: {\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    filteredBoardMembers() {\n      const boardMembers = this.boardMembers\n      const taskMembers = this.taskCopy.members\n      if (taskMembers) {\n        const filteredBoardMembers = boardMembers.filter(bMember => {\n          return taskMembers.every(tMember => {\n            return tMember._id !== bMember._id\n          })\n        })\n        return filteredBoardMembers\n      } else {\n        return boardMembers\n      }\n    }\n  },\n  methods: {\n    toggleMember() {\n      this.isTaskMembersShowen = !this.isTaskMembersShowen\n    },\n    addTaskMember(member) {\n      let newActivity = boardService.getEmptyActivity()\n      console.log('member:', member)\n      this.taskCopy.members.unshift(member)\n      newActivity.txt = `Member ${member.fullName} was added to task`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    removeTaskMember(member) {\n      const idx = this.taskCopy.members.findIndex(\n        tMember => tMember._id === member._id\n      )\n      let newActivity = boardService.getEmptyActivity()\n      this.taskCopy.members.splice(idx, 1)\n      newActivity.txt = `Member ${member.fullName} was removed from task`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    getStyleStr(colorStr) {\n      return `backgroundColor:${colorStr}`\n    },\n    toggleStatuses() {\n      this.isStatusesShowen = !this.isStatusesShowen\n    },\n    togglePriors() {\n      this.isPriorsShowen = !this.isPriorsShowen\n    },\n    deleteTask() {\n      this.$emit('deleteTask', this.taskCopy.id)\n    },\n    updateTaskTxt(ev) {\n      console.log(ev.target.innerText)\n      let newActivity = boardService.getEmptyActivity()\n      const prevTxt = this.taskCopy.txt\n      this.taskCopy.txt = ev.target.innerText\n      newActivity.txt = `Task '${prevTxt}' was changed to '${ev.target.innerText}'`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    updateTask() {\n      this.$emit('updateTask', this.taskCopy)\n    },\n    sendToTaskDetails() {\n      if (\n        this.$route.params.taskId &&\n        this.$route.params.taskId === this.task.id\n      ) {\n        return\n      }\n      \n      eventBus.$emit('taskDetails', {task: this.taskCopy, groupId: this.groupId})\n      this.$router.push(`/board/${this.$route.params.boardId}/task/${this.task.id}`)\n    },\n    updateTaskPriority(opt) {\n      let newActivity = boardService.getEmptyActivity()\n      const prevPrior = this.taskCopy.priority\n      this.taskCopy.priority = opt\n      newActivity.txt = `Task priority was updated from '${prevPrior}' to '${opt}`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n      this.isStatusesShowen = false\n    },\n    updateTaskStatus(opt) {\n      let newActivity = boardService.getEmptyActivity()\n      const prevStatus = this.taskCopy.status\n      this.taskCopy.status = opt\n      newActivity.txt = `Task status was updated from '${prevStatus}' to '${opt}`\n      newActivity.byUser = this.user\n      console.log('newActivity:', newActivity)\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n      this.isPriorsShowen = false\n    }\n  },\n  created() {\n    console.log('hereeeeeeeeeee')\n    this.taskCopy = this.task\n    console.log('taskCopy in task preview:', this.taskCopy)\n  }\n}\n</script>\n"]}]}