{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue","mtime":1606750301947},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhZGRNZW1iZXJzIGZyb20gJ0AvY21wcy9hZGQtbWVtYmVycycKaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwppbXBvcnQgbGFiZWxQaWNrZXIgZnJvbSAnLi9sYWJlbC1waWNrZXInCmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvYm9hcmQuc2VydmljZScKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnCgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogeyBsYWJlbFBpY2tlciwgYWRkTWVtYmVycyB9LAogIG5hbWU6ICd0YXNrLXByZXZpZXcnLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0YXNrQ29weTogbnVsbCwKICAgICAgaXNTdGF0dXNlc1Nob3dlbjogZmFsc2UsCiAgICAgIGlzUHJpb3JzU2hvd2VuOiBmYWxzZSwKICAgICAgaXNUYXNrTWVtYmVyc1Nob3dlbjogZmFsc2UsCiAgICB9CiAgfSwKICBwcm9wczogewogICAgdGFza0NvbG9yOiBTdHJpbmcsCiAgICB0YXNrOiBPYmplY3QsCiAgICBzdGF0dXNlczogQXJyYXksCiAgICBwcmlvcml0aWVzOiBBcnJheSwKICAgIGdyb3VwSWQ6IFN0cmluZywKICAgIGJvYXJkTWVtYmVyczogW0FycmF5LCBPYmplY3RdLAogICAgYWN0aXZpdHk6IE9iamVjdCwKICAgIHVzZXI6IE9iamVjdCwKICB9LAogIGNvbXB1dGVkOiB7CiAgICBwb3N0c0xlZ250aCgpIHsKICAgICAgcmV0dXJuIHRoaXMudGFzay5wb3N0cy5sZW5ndGggPiAwID8gZmFsc2UgOiB0cnVlCiAgICB9LAogICAgcG9zdG9zQ29sb3JCdG4oKXsKICAgIHJldHVybiB0aGlzLnRhc2sucG9zdHMubGVuZ3RoID4gMCA/ICdjb2xvcjogIzAwODVmZjsnOiAnJwogICAgfSwKICAgIG1lbWJlcnNMZWdudGgoKSB7CiAgICAgIHJldHVybiB0aGlzLnRhc2subWVtYmVycy5sZW5ndGggPiAwID8gZmFsc2UgOiB0cnVlCiAgICB9LAogICAgdGFza0JnYygpIHsKICAgICAgcmV0dXJuIHsgYmFja2dyb3VuZENvbG9yOiB0aGlzLnRhc2tDb2xvciB9CiAgICB9LAogICAgZmlsdGVyZWRCb2FyZE1lbWJlcnMoKSB7CiAgICAgIGNvbnN0IGJvYXJkTWVtYmVycyA9IHRoaXMuYm9hcmRNZW1iZXJzCiAgICAgIGNvbnN0IHRhc2tNZW1iZXJzID0gdGhpcy50YXNrQ29weS5tZW1iZXJzCiAgICAgIGlmICh0YXNrTWVtYmVycykgewogICAgICAgIGNvbnN0IGZpbHRlcmVkQm9hcmRNZW1iZXJzID0gYm9hcmRNZW1iZXJzLmZpbHRlcigoYk1lbWJlcikgPT4gewogICAgICAgICAgcmV0dXJuIHRhc2tNZW1iZXJzLmV2ZXJ5KCh0TWVtYmVyKSA9PiB7CiAgICAgICAgICAgIHJldHVybiB0TWVtYmVyLl9pZCAhPT0gYk1lbWJlci5faWQKICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgICAgICByZXR1cm4gZmlsdGVyZWRCb2FyZE1lbWJlcnMKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gYm9hcmRNZW1iZXJzCiAgICAgIH0KICAgIH0sCiAgfSwKICBtZXRob2RzOiB7CiAgICB1cGRhdGVUYXNrRGF0ZSgpIHsKICAgICAgY29uc3QgZGF0ZSA9IG1vbWVudCh0aGlzLnRhc2tDb3B5LmR1ZURhdGUpLmZvcm1hdCgnbGwnKQogICAgICBjb25zdCB0eHQgPSBgVGFzayBkdWUgZGF0ZSB3YXMgY2hhbmdlZCB0byAke2RhdGV9YAogICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMudXNlcikKICAgICAgdGhpcy50YXNrQ29weS5hY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpCiAgICAgIHRoaXMudXBkYXRlVGFzaygpCiAgICB9LAogICAgdG9nZ2xlTWVtYmVyKCkgewogICAgICB0aGlzLmlzVGFza01lbWJlcnNTaG93ZW4gPSAhdGhpcy5pc1Rhc2tNZW1iZXJzU2hvd2VuCiAgICB9LAogICAgYWRkVGFza01lbWJlcihtZW1iZXIpIHsKICAgICAgY29uc3QgdHh0ID0gYE1lbWJlciAke21lbWJlci5mdWxsTmFtZX0gd2FzIGFkZGVkIHRvIHRhc2tgCiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KHR4dCwgdGhpcy51c2VyKQogICAgICB0aGlzLnRhc2tDb3B5Lm1lbWJlcnMudW5zaGlmdChtZW1iZXIpCiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KQogICAgICB0aGlzLnVwZGF0ZVRhc2soKQogICAgfSwKICAgIHJlbW92ZVRhc2tNZW1iZXIobWVtYmVyKSB7CiAgICAgIGNvbnN0IGlkeCA9IHRoaXMudGFza0NvcHkubWVtYmVycy5maW5kSW5kZXgoCiAgICAgICAgKHRNZW1iZXIpID0+IHRNZW1iZXIuX2lkID09PSBtZW1iZXIuX2lkCiAgICAgICkKICAgICAgY29uc3QgdHh0ID0gYE1lbWJlciAke21lbWJlci5mdWxsTmFtZX0gd2FzIHJlbW92ZWQgZnJvbSB0YXNrYAogICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMudXNlcikKICAgICAgdGhpcy50YXNrQ29weS5tZW1iZXJzLnNwbGljZShpZHgsIDEpCiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KQogICAgICB0aGlzLnVwZGF0ZVRhc2soKQogICAgfSwKICAgIGdldFN0eWxlU3RyKGNvbG9yU3RyKSB7CiAgICAgIHJldHVybiBgYmFja2dyb3VuZENvbG9yOiR7Y29sb3JTdHJ9YAogICAgfSwKICAgIHRvZ2dsZVN0YXR1c2VzKCkgewogICAgICB0aGlzLmlzU3RhdHVzZXNTaG93ZW4gPSAhdGhpcy5pc1N0YXR1c2VzU2hvd2VuCiAgICB9LAogICAgdG9nZ2xlUHJpb3JzKCkgewogICAgICB0aGlzLmlzUHJpb3JzU2hvd2VuID0gIXRoaXMuaXNQcmlvcnNTaG93ZW4KICAgIH0sCiAgICBkZWxldGVUYXNrKCkgewogICAgICB0aGlzLiRlbWl0KCdkZWxldGVUYXNrJywgdGhpcy50YXNrQ29weS5pZCkKICAgIH0sCiAgICB1cGRhdGVUYXNrVHh0KGV2KSB7CiAgICAgIGNvbnN0IHByZXZUeHQgPSB0aGlzLnRhc2tDb3B5LnR4dAogICAgICB0aGlzLnRhc2tDb3B5LnR4dCA9IGV2LnRhcmdldC5pbm5lclRleHQKICAgICAgY29uc3QgdHh0ID0gYFRhc2sgJyR7cHJldlR4dH0nIHdhcyBjaGFuZ2VkIHRvICcke2V2LnRhcmdldC5pbm5lclRleHR9J2AKICAgICAgbGV0IG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkodHh0LCB0aGlzLnVzZXIpCiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KQogICAgICB0aGlzLnVwZGF0ZVRhc2soKQogICAgfSwKICAgIHVwZGF0ZVRhc2soKSB7CiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZVRhc2snLCB0aGlzLnRhc2tDb3B5KQogICAgfSwKICAgIHNlbmRUb1Rhc2tEZXRhaWxzKCkgewogICAgICBpZiAodGhpcy4kcm91dGUucGFyYW1zLnRhc2tJZCA9PT0gdGhpcy50YXNrLmlkKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgdGhpcy4kcm91dGVyLnB1c2goCiAgICAgICAgYC9ib2FyZC8ke3RoaXMuJHJvdXRlLnBhcmFtcy5ib2FyZElkfS90YXNrLyR7dGhpcy50YXNrLmlkfWAKICAgICAgKQogICAgfSwKICAgIHVwZGF0ZUNvbXBvbmVudFRhc2sodGFzaykgewogICAgICBpZiAodGhpcy50YXNrQ29weS5pZCA9PT0gdGhpcy4kcm91dGUucGFyYW1zLnRhc2tJZCkgewogICAgICAgIHRoaXMudGFza0NvcHkgPSB0YXNrCiAgICAgIH0KICAgIH0sCiAgICB1cGRhdGVUYXNrUHJpb3JpdHkob3B0KSB7CiAgICAgIGNvbnN0IHR4dCA9IGBUYXNrIHByaW9yaXR5IHdhcyB1cGRhdGVkIHRvICR7b3B0LnR4dH1gCiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KHR4dCwgdGhpcy51c2VyKQogICAgICAvLyBjb25zdCBwcmV2UHJpb3IgPSB0aGlzLnRhc2tDb3B5LnByaW9yaXR5LnR4dAogICAgICB0aGlzLnRhc2tDb3B5LnByaW9yaXR5LnR4dCA9IG9wdC50eHQKICAgICAgdGhpcy50YXNrQ29weS5wcmlvcml0eS5jb2xvciA9IG9wdC5jb2xvcgogICAgICB0aGlzLnRhc2tDb3B5LmFjdGl2aXRpZXMucHVzaChuZXdBY3Rpdml0eSkKICAgICAgdGhpcy51cGRhdGVUYXNrKCkKICAgICAgdGhpcy5pc1ByaW9yc1Nob3dlbiA9IGZhbHNlCiAgICB9LAogICAgdXBkYXRlVGFza1N0YXR1cyhvcHQpIHsKICAgICAgY29uc3QgdHh0ID0gYFRhc2sgc3RhdHVzIHdhcyB1cGRhdGVkIHRvICR7b3B0LnR4dH1gCiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KHR4dCwgdGhpcy51c2VyKQogICAgICAvLyBjb25zdCBwcmV2U3RhdHVzID0gdGhpcy50YXNrQ29weS5zdGF0dXMudHh0CiAgICAgIHRoaXMudGFza0NvcHkuc3RhdHVzLnR4dCA9IG9wdC50eHQKICAgICAgdGhpcy50YXNrQ29weS5zdGF0dXMuY29sb3IgPSBvcHQuY29sb3IKICAgICAgdGhpcy50YXNrQ29weS5hY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpCiAgICAgIHRoaXMudXBkYXRlVGFzaygpCiAgICAgIHRoaXMuaXNQcmlvcnNTaG93ZW4gPSBmYWxzZQogICAgfSwKICAgIGNsb3NlUG9wdXBzKCkgewogICAgICB0aGlzLmlzVGFza01lbWJlcnNTaG93ZW4gPSBmYWxzZQogICAgICB0aGlzLmlzU3RhdHVzZXNTaG93ZW4gPSBmYWxzZQogICAgICB0aGlzLmlzUHJpb3JzU2hvd2VuID0gZmFsc2UKICAgIH0sCiAgfSwKICBjcmVhdGVkKCkgewogICAgZXZlbnRCdXMuJG9uKCd1cGRhdGVUYXNrUHJldmlldycsIHRoaXMudXBkYXRlQ29tcG9uZW50VGFzaykKICAgIHRoaXMudGFza0NvcHkgPSB0aGlzLnRhc2sKICB9LAp9Cg=="},{"version":3,"sources":["task-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"task-preview.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <li\n    v-if=\"taskCopy\"\n    class=\"task-preview flex space-between align-center width100\"\n  >\n    <div class=\"flex space-between align-center width100\">\n      <span class=\"task-color\" :style=\"taskBgc\"></span>\n      <button class=\"btn-close\" @click=\"deleteTask\">\n        <i v-tooltip.top=\"'Delete Task'\" class=\"task-icon btn-trash fa-icon far fa-trash-alt\"></i>\n      </button>\n\n      <div class=\"task-txt\">\n        <span\n          class=\"editable\"\n          @blur=\"updateTaskTxt\"\n          @keydown.enter=\"updateTaskTxt\"\n          contenteditable\n          >{{ taskCopy.txt }}</span\n        >\n      </div>\n      <el-badge\n        :hidden=\"postsLegnth\"\n        :value=\"task.posts.length\"\n        class=\"item\"\n        type=\"primary\"\n      >\n        <i\n          @click=\"sendToTaskDetails\"\n          v-tooltip.top=\"'Task Details'\"\n          :style=\"postosColorBtn\" class=\"task-icon far fa-comment fa-icon\"\n        ></i>\n      </el-badge>\n    </div>\n    <div class=\"task-details flex\">\n      <div class=\"headers flex\">\n        <span>\n          <el-badge\n            :hidden=\"membersLegnth\"\n            :value=\"task.members.length\"\n            class=\"item\"\n            type=\"primary\"\n          >\n            <i\n              @click.stop=\"toggleMember\"\n              v-tooltip.top=\"'Task Members'\"\n              class=\"task-icon far fa-user-circle fa-icon\"\n            ></i>\n          </el-badge>\n        </span>\n\n        <add-members\n          v-if=\"isTaskMembersShowen\"\n          firstTitle=\"Task Members\"\n          secondTitle=\"Board Members\"\n          :members=\"taskCopy.members\"\n          :allMembers=\"filteredBoardMembers\"\n          @addMember=\"addTaskMember\"\n          @removeMember=\"removeTaskMember\"\n        />\n        <span\n          @click=\"toggleStatuses\"\n          class=\"status relative\"\n          :style=\"getStyleStr(taskCopy.status.color)\"\n          >{{ taskCopy.status.txt }}\n          <label-picker\n            v-if=\"isStatusesShowen\"\n            :opts=\"statuses\"\n            type=\"status\"\n            @updateTaskStatus=\"updateTaskStatus\"\n        /></span>\n\n        <span\n          @click=\"togglePriors\"\n          class=\"priority relative\"\n          :style=\"getStyleStr(taskCopy.priority.color)\"\n          >{{ taskCopy.priority.txt }}\n          <label-picker\n            v-if=\"isPriorsShowen\"\n            :opts=\"priorities\"\n            type=\"priority\"\n            @updateTaskPriority=\"updateTaskPriority\"\n        /></span>\n\n        <span class=\"date-picker\">\n          <el-date-picker v-tooltip.top=\"'Due Date'\"\n            class=\"date-input\"\n            @change=\"updateTaskDate\"\n            v-model=\"taskCopy.dueDate\"\n            type=\"date\"\n            placeholder=\"Pick a date\"\n          >\n          </el-date-picker>\n        </span>\n      </div>\n    </div>\n    <div\n      class=\"back-drop-layer\"\n      v-if=\"isTaskMembersShowen || isStatusesShowen || isPriorsShowen\"\n      @click.stop=\"closePopups\"\n    ></div>\n  </li>\n</template>\n<script>\nimport addMembers from '@/cmps/add-members'\nimport { eventBus } from '@/services/event-bus.service'\nimport labelPicker from './label-picker'\nimport { boardService } from '@/services/board.service'\nimport moment from 'moment'\n\nexport default {\n  components: { labelPicker, addMembers },\n  name: 'task-preview',\n  data() {\n    return {\n      taskCopy: null,\n      isStatusesShowen: false,\n      isPriorsShowen: false,\n      isTaskMembersShowen: false,\n    }\n  },\n  props: {\n    taskColor: String,\n    task: Object,\n    statuses: Array,\n    priorities: Array,\n    groupId: String,\n    boardMembers: [Array, Object],\n    activity: Object,\n    user: Object,\n  },\n  computed: {\n    postsLegnth() {\n      return this.task.posts.length > 0 ? false : true\n    },\n    postosColorBtn(){\n    return this.task.posts.length > 0 ? 'color: #0085ff;': ''\n    },\n    membersLegnth() {\n      return this.task.members.length > 0 ? false : true\n    },\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    filteredBoardMembers() {\n      const boardMembers = this.boardMembers\n      const taskMembers = this.taskCopy.members\n      if (taskMembers) {\n        const filteredBoardMembers = boardMembers.filter((bMember) => {\n          return taskMembers.every((tMember) => {\n            return tMember._id !== bMember._id\n          })\n        })\n        return filteredBoardMembers\n      } else {\n        return boardMembers\n      }\n    },\n  },\n  methods: {\n    updateTaskDate() {\n      const date = moment(this.taskCopy.dueDate).format('ll')\n      const txt = `Task due date was changed to ${date}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    toggleMember() {\n      this.isTaskMembersShowen = !this.isTaskMembersShowen\n    },\n    addTaskMember(member) {\n      const txt = `Member ${member.fullName} was added to task`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      this.taskCopy.members.unshift(member)\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    removeTaskMember(member) {\n      const idx = this.taskCopy.members.findIndex(\n        (tMember) => tMember._id === member._id\n      )\n      const txt = `Member ${member.fullName} was removed from task`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      this.taskCopy.members.splice(idx, 1)\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    getStyleStr(colorStr) {\n      return `backgroundColor:${colorStr}`\n    },\n    toggleStatuses() {\n      this.isStatusesShowen = !this.isStatusesShowen\n    },\n    togglePriors() {\n      this.isPriorsShowen = !this.isPriorsShowen\n    },\n    deleteTask() {\n      this.$emit('deleteTask', this.taskCopy.id)\n    },\n    updateTaskTxt(ev) {\n      const prevTxt = this.taskCopy.txt\n      this.taskCopy.txt = ev.target.innerText\n      const txt = `Task '${prevTxt}' was changed to '${ev.target.innerText}'`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    updateTask() {\n      this.$emit('updateTask', this.taskCopy)\n    },\n    sendToTaskDetails() {\n      if (this.$route.params.taskId === this.task.id) {\n        return\n      }\n      this.$router.push(\n        `/board/${this.$route.params.boardId}/task/${this.task.id}`\n      )\n    },\n    updateComponentTask(task) {\n      if (this.taskCopy.id === this.$route.params.taskId) {\n        this.taskCopy = task\n      }\n    },\n    updateTaskPriority(opt) {\n      const txt = `Task priority was updated to ${opt.txt}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      // const prevPrior = this.taskCopy.priority.txt\n      this.taskCopy.priority.txt = opt.txt\n      this.taskCopy.priority.color = opt.color\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n      this.isPriorsShowen = false\n    },\n    updateTaskStatus(opt) {\n      const txt = `Task status was updated to ${opt.txt}`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      // const prevStatus = this.taskCopy.status.txt\n      this.taskCopy.status.txt = opt.txt\n      this.taskCopy.status.color = opt.color\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n      this.isPriorsShowen = false\n    },\n    closePopups() {\n      this.isTaskMembersShowen = false\n      this.isStatusesShowen = false\n      this.isPriorsShowen = false\n    },\n  },\n  created() {\n    eventBus.$on('updateTaskPreview', this.updateComponentTask)\n    this.taskCopy = this.task\n  },\n}\n</script>\n"]}]}