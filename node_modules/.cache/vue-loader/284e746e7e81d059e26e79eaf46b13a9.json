{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue","mtime":1606808749395},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB0YXNrUHJldmlldyBmcm9tICcuL3Rhc2stcHJldmlldycKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9ib2FyZC5zZXJ2aWNlJwppbXBvcnQgZHJhZ2dhYmxlIGZyb20gJ3Z1ZWRyYWdnYWJsZScKLy8gaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICd0YXNrLWxpc3QnLAogIHByb3BzOiB7CiAgICB0YXNrczogQXJyYXksCiAgICBncm91cElkOiBTdHJpbmcsCiAgICB0YXNrQ29sb3I6IFN0cmluZwogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHR4dDogJycsCiAgICAgIGlzQWRkQnRuU2hvd2VuOiBmYWxzZSwKICAgICAgY2xvbmVkVGFza3M6IG51bGwKICAgIH0KICB9LAoKICBjb21wdXRlZDogewogICAgYm9hcmQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvYXJkCiAgICB9LAogICAgdXNlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMudXNlcgogICAgfSwKICAgIHRhc2tCZ2MoKSB7CiAgICAgIHJldHVybiB7IGJhY2tncm91bmRDb2xvcjogdGhpcy50YXNrQ29sb3IgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgYWRkRW1wdHlUYXNrKGdyb3VwSWQpIHsKICAgICAgY29uc29sZS5sb2coZ3JvdXBJZCwgdGhpcy5ncm91cElkKTsKICAgICAgaWYgKHRoaXMuZ3JvdXBJZCAhPT0gZ3JvdXBJZCkgewogICAgICAgIGNvbnNvbGUubG9nKCdhZGQgZW1wdHkgdGFzayByZXR1cm5ubm4nKTsKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICBjb25zdCBuZXdUYXNrID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5VGFzaygpCiAgICAgIGNvbnNvbGUubG9nKCduZXcgdGFzazonLCBuZXdUYXNrKQoKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdldEdyb3VwQnlJZCgpCiAgICAgIGdyb3VwLnRhc2tzLnB1c2gobmV3VGFzaykKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgIHR5cGU6ICdzYXZlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pCiAgICAgICAgICAgICAgICBjb25zdCB0eHQgPSBgJHt0aGlzLnVzZXIuZnVsbE5hbWV9IGFkZCBuZXcgdGFza2AKICAgICAgICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMudXNlcikKICAgICAgdGhpcy5ib2FyZC5hY3Rpdml0aWVzLnVuc2hpZnQobmV3QWN0aXZpdHkpCiAgICAgIHRoaXMuJG5vdGlmeSh7CiAgICAgICAgICBtZXNzYWdlOiAnQWRkZWQgbmV3IHRhc2sgJywKICAgICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgICAgZHVyYXRpb246MjAwMCwKICAgICAgICB9KTsKICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgfSwKICAgIHNob3dBZGRCdG4oKSB7CiAgICAgIHRoaXMuaXNBZGRCdG5TaG93ZW4gPSB0cnVlCiAgICB9LAogICAgZ2V0R3JvdXBCeUlkKCkgewogICAgICBjb25zdCBpZHggPSB0aGlzLmJvYXJkLmdyb3Vwcy5maW5kSW5kZXgoCiAgICAgICAgZ3JvdXAgPT4gZ3JvdXAuaWQgPT09IHRoaXMuZ3JvdXBJZAogICAgICApCiAgICAgIHJldHVybiB0aGlzLmJvYXJkLmdyb3Vwc1tpZHhdCiAgICB9LAogICAgYWRkVGFzaygpIHsKICAgICAgY29uc3QgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKQogICAgICBuZXdUYXNrLnR4dCA9IHRoaXMudHh0CiAgICAgIGNvbnN0IHR4dCA9IGBUYXNrICcke25ld1Rhc2sudHh0fScgYWRkZWRgCiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KHR4dCwgdGhpcy51c2VyKQogICAgICBuZXdUYXNrLmFjdGl2aXRpZXMucHVzaChuZXdBY3Rpdml0eSkKICAgICAgIHRoaXMuYm9hcmQuYWN0aXZpdGllcy51bnNoaWZ0KG5ld0FjdGl2aXR5KQogICAgICBjb25zdCBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCkKICAgICAgZ3JvdXAudGFza3MucHVzaChuZXdUYXNrKQogICAgICBjb25zb2xlLmxvZygnbmV3IHRhc2s6JywgbmV3VGFzaykKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgIHR5cGU6ICdzYXZlQm9hcmQnLAogICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkCiAgICAgIH0pCiAgICAgIHRoaXMudHh0ID0gJycKICAgICAgdGhpcy5pc0FkZEJ0blNob3dlbiA9IGZhbHNlCiAgICAgICAgICB0aGlzLiRub3RpZnkoewogICAgICAgICAgbWVzc2FnZTogJ0FkZCBuZXcgdGFzaycsCiAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbS1sZWZ0JywKICAgICAgICAgIGR1cmF0aW9uOjIwMDAsCiAgICAgICAgfSk7CiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0sCiAgICBkZWxldGVUYXNrKHRhc2tJZCkgewogICAgICBjb25zdCBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCkKICAgICAgY29uc3QgdGFza0lkeCA9IGdyb3VwLnRhc2tzLmZpbmRJbmRleCh0YXNrID0+IHRhc2suaWQgPT09IHRhc2tJZCkKICAgICAgZ3JvdXAudGFza3Muc3BsaWNlKHRhc2tJZHgsIDEpCiAgICAgIGNvbnN0IHR4dCA9IGAke3RoaXMudXNlci5mdWxsTmFtZX0gcmVtb3ZlIGEgdGFza2AKICAgICAgbGV0IG5ld0FjdGl2aXR5ID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5QWN0aXZpdHkodHh0LCB0aGlzLnVzZXIpCiAgICAgIHRoaXMuYm9hcmQuYWN0aXZpdGllcy51bnNoaWZ0KG5ld0FjdGl2aXR5KQogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1JlbW92ZSB0YXNrJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20tbGVmdCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOjIwMDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgfSwKICAgIHVwZGF0ZVRhc2sobmV3VGFzaykgewogICAgICBjb25zdCBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCkKICAgICAgY29uc3QgdGFza0lkeCA9IGdyb3VwLnRhc2tzLmZpbmRJbmRleCh0YXNrID0+IHRhc2suaWQgPT09IG5ld1Rhc2suaWQpCiAgICAgIGdyb3VwLnRhc2tzLnNwbGljZSh0YXNrSWR4LCAxLCBuZXdUYXNrKQogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSkKICAgICAgCiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0sCiAgICB1cGRhdGVUYXNrcygpIHsKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdldEdyb3VwQnlJZCgpCiAgICAgIGdyb3VwLnRhc2tzID0gdGhpcy5jbG9uZWRUYXNrcwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgYm9hcmQ6IHRoaXMuYm9hcmQKICAgICAgfSkKCiAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgIH0KICB9LAogIGNvbXBvbmVudHM6IHsKICAgIHRhc2tQcmV2aWV3LAogICAgZHJhZ2dhYmxlCiAgfSwKICBjcmVhdGVkKCkgewogICAgY29uc29sZS5sb2coJ3Rhc2sgbGlzdCBjcmVhdGVkJyk7CiAgICB0aGlzLmNsb25lZFRhc2tzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnRhc2tzKSkKICAgIC8vIGV2ZW50QnVzLiRvbignYWRkRW1wdHlUYXNrJywgY29uc29sZS5sb2cpCiAgfQp9Cg=="},{"version":3,"sources":["task-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"task-list.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <section v-if=\"clonedTasks\" class=\"task-list width100\">\n    <ul class=\"clean-list flex wrap align-center justify-center gap\">\n      <draggable class=\"width100\" v-model=\"clonedTasks\" @end=\"updateTasks\">\n        <task-preview\n          v-for=\"task in clonedTasks\"\n          :user=\"user\"\n          :taskColor=\"taskColor\"\n          :key=\"task.id\"\n          :task=\"task\"\n          :statuses=\"board.statuses\"\n          :priorities=\"board.priorities\"\n          :groupId=\"groupId\"\n          @deleteTask=\"deleteTask\"\n          @updateTask=\"updateTask\"\n          :boardMembers=\"board.members\"\n        />\n      </draggable>\n    </ul>\n    <form class=\"flex\" @submit.prevent=\"addTask\">\n      <span class=\"task-color\" :style=\"taskBgc\"></span>\n      <input\n        class=\"add-task-input \"\n        @focus=\"showAddBtn\"\n        v-model=\"txt\"\n        type=\"text\"\n        placeholder=\"+ Add Task\"\n      />\n      <button v-show=\"isAddBtnShowen\" type=\"submit\">Add</button>\n    </form>\n  </section>\n</template>\n\n<script>\nimport taskPreview from './task-preview'\nimport { boardService } from '@/services/board.service'\nimport draggable from 'vuedraggable'\n// import { eventBus } from '@/services/event-bus.service'\n\nexport default {\n  name: 'task-list',\n  props: {\n    tasks: Array,\n    groupId: String,\n    taskColor: String\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShowen: false,\n      clonedTasks: null\n    }\n  },\n\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    user() {\n      return this.$store.getters.user\n    },\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    }\n  },\n  methods: {\n    addEmptyTask(groupId) {\n      console.log(groupId, this.groupId);\n      if (this.groupId !== groupId) {\n        console.log('add empty task returnnnn');\n        return\n      }\n      const newTask = boardService.getEmptyTask()\n      console.log('new task:', newTask)\n\n      const group = this.getGroupById()\n      group.tasks.push(newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n                const txt = `${this.user.fullName} add new task`\n           let newActivity = boardService.getEmptyActivity(txt, this.user)\n      this.board.activities.unshift(newActivity)\n      this.$notify({\n          message: 'Added new task ',\n          position: 'bottom-left',\n          duration:2000,\n        });\n      this.$emit('forceRender')\n    },\n    showAddBtn() {\n      this.isAddBtnShowen = true\n    },\n    getGroupById() {\n      const idx = this.board.groups.findIndex(\n        group => group.id === this.groupId\n      )\n      return this.board.groups[idx]\n    },\n    addTask() {\n      const newTask = boardService.getEmptyTask()\n      newTask.txt = this.txt\n      const txt = `Task '${newTask.txt}' added`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      newTask.activities.push(newActivity)\n       this.board.activities.unshift(newActivity)\n      const group = this.getGroupById()\n      group.tasks.push(newTask)\n      console.log('new task:', newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      this.txt = ''\n      this.isAddBtnShowen = false\n          this.$notify({\n          message: 'Add new task',\n          position: 'bottom-left',\n          duration:2000,\n        });\n      this.$emit('forceRender')\n    },\n    deleteTask(taskId) {\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === taskId)\n      group.tasks.splice(taskIdx, 1)\n      const txt = `${this.user.fullName} remove a task`\n      let newActivity = boardService.getEmptyActivity(txt, this.user)\n      this.board.activities.unshift(newActivity)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n                                    this.$notify({\n                                    message: 'Remove task',\n                                    position: 'bottom-left',\n                                    duration:2000,\n                                  });\n      this.$emit('forceRender')\n    },\n    updateTask(newTask) {\n      const group = this.getGroupById()\n      const taskIdx = group.tasks.findIndex(task => task.id === newTask.id)\n      group.tasks.splice(taskIdx, 1, newTask)\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n      \n      this.$emit('forceRender')\n    },\n    updateTasks() {\n      const group = this.getGroupById()\n      group.tasks = this.clonedTasks\n      this.$store.dispatch({\n        type: 'saveBoard',\n        board: this.board\n      })\n\n      this.$emit('forceRender')\n    }\n  },\n  components: {\n    taskPreview,\n    draggable\n  },\n  created() {\n    console.log('task list created');\n    this.clonedTasks = JSON.parse(JSON.stringify(this.tasks))\n    // eventBus.$on('addEmptyTask', console.log)\n  }\n}\n</script>\n"]}]}