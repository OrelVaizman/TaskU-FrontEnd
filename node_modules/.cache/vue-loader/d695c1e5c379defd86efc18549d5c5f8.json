{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue","mtime":1609778254056},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["task-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"task-preview.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <li\n    v-if=\"taskCopy\"\n    class=\"task-preview flex space-between align-center width100\"\n  >\n    <div class=\"flex space-between align-center width100\">\n      <!-- <div class=\"flex\"> -->\n      <span class=\"task-color\" :style=\"taskBgc\"></span>\n      <button class=\"btn-close\" @click.stop=\"deleteTask\">\n        <i class=\"task-icon btn-trash fa-icon far fa-trash-alt\"></i>\n      </button>\n      <div class=\"task-txt\">\n        <span\n          class=\"editable\"\n          spellcheck=\"false\"\n          @blur=\"updateTaskTxt\"\n          @keydown.enter=\"updateTaskTxt\"\n          contenteditable\n          >{{ taskCopy.txt }}</span\n        >\n      </div>\n      <!-- </div> -->\n      <el-badge\n        :hidden=\"postsLegnth\"\n        :value=\"task.posts.length\"\n        class=\"item\"\n        type=\"primary\"\n      >\n        <i\n          @click.stop=\"sendToTaskDetails\"\n          v-tooltip.top=\"'Task Details'\"\n          :style=\"postosColorBtn\"\n          class=\"task-icon far fa-comment fa-icon\"\n        ></i>\n      </el-badge>\n    </div>\n    <div class=\"task-details flex\">\n      <div class=\"headers flex\">\n        <span class=\"members-preview relative task-item\">\n          <members\n            className=\"img-profile-preview\"\n            :hiddenBadge=\"membersLegnth\"\n            toolTipTxt=\"Task Members\"\n            classIcon=\"task-icon\"\n            :members=\"taskCopy.members\"\n          >\n            <add-members\n              class=\"top-left\"\n              slot=\"add-members\"\n              firstTitle=\"Task members\"\n              secondTitle=\"Board members\"\n              :members=\"taskCopy.members\"\n              :allMembers=\"filteredBoardMembers\"\n              @addMember=\"addTaskMember\"\n              @removeMember=\"removeTaskMember\"\n            />\n          </members>\n        </span>\n\n        <span\n          @click.stop=\"toggleStatuses\"\n          class=\"status relative task-item\"\n          :style=\"getStyleStr(taskCopy.status.color)\"\n          >{{ taskCopy.status.txt }}\n          <label-picker\n            v-if=\"isStatusesShowen\"\n            :opts=\"statuses\"\n            type=\"status\"\n            @updateTaskStatus=\"updateTaskStatus\"\n        /></span>\n\n        <span\n          @click.stop=\"togglePriors\"\n          class=\"priority relative task-item\"\n          :style=\"getStyleStr(taskCopy.priority.color)\"\n          >{{ taskCopy.priority.txt }}\n          <label-picker\n            v-if=\"isPriorsShowen\"\n            :opts=\"priorities\"\n            type=\"priority\"\n            @updateTaskPriority=\"updateTaskPriority\"\n        /></span>\n\n        <span class=\"date-picker task-item\">\n          <el-date-picker\n            v-tooltip.top=\"'Due Date'\"\n            class=\"date-input\"\n            @change=\"updateTaskDate\"\n            v-model=\"taskCopy.dueDate\"\n            type=\"date\"\n            placeholder=\"Pick a date\"\n          >\n          </el-date-picker>\n        </span>\n\n        <!-- <span\n          class=\"task-details-preview task-item\"\n          v-tooltip.top=\"'Details'\"\n          @change=\"openTaskDetails\"\n        >Details\n        </span> -->\n      </div>\n    </div>\n    <div\n      class=\"back-drop-layer\"\n      v-if=\"isStatusesShowen || isPriorsShowen\"\n      @click.stop=\"closePopups\"\n    ></div>\n  </li>\n</template>\n<script>\nimport { boardService } from '@/services/board.service'\nimport { userService } from '../services/user.service'\nimport { eventBus } from '@/services/event-bus.service'\nimport members from '@/cmps/members'\nimport addMembers from '@/cmps/add-members'\nimport labelPicker from './label-picker'\nimport moment from 'moment'\nexport default {\n  components: { labelPicker, addMembers, members },\n  name: 'task-preview',\n  data() {\n    return {\n      taskCopy: null,\n      isStatusesShowen: false,\n      isPriorsShowen: false,\n      activity: null\n    }\n  },\n  props: {\n    taskColor: String,\n    task: Object,\n    statuses: Array,\n    priorities: Array,\n    groupId: String,\n    boardMembers: [Array, Object],\n    user: Object\n  },\n\n  computed: {\n    miniUser() {\n      return this.$store.getters.miniUser\n    },\n    postsLegnth() {\n      return this.task.posts.length > 0 ? false : true\n    },\n    postosColorBtn() {\n      return this.task.posts.length > 0 ? 'color: #0085ff;' : ''\n    },\n    membersLegnth() {\n      return this.task.members.length > 3 ? false : true\n    },\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    filteredBoardMembers() {\n      const boardMembers = this.boardMembers\n      const taskMembers = this.taskCopy.members\n      if (taskMembers) {\n        const filteredBoardMembers = boardMembers.filter(bMember => {\n          return taskMembers.every(tMember => {\n            return tMember._id !== bMember._id\n          })\n        })\n        return filteredBoardMembers\n      } else {\n        return boardMembers\n      }\n    }\n  },\n\n  methods: {\n    openTaskDetails() {\n      return\n    },\n    updateTaskDate() {\n      console.log('this.taskCopy.dueDate:', this.taskCopy.dueDate)\n      const date = moment(this.taskCopy.dueDate).format('ll')\n      if (date === 'Invalid date') return\n      this.taskCopy.members.forEach(member => {\n        let newNotif = userService.getEmptyNotif()\n        newNotif.txt = `Upadte task due date to \"${date}\"`\n        newNotif.type = 'all'\n        newNotif.byUser = {\n          mail: this.user.email,\n          imgUrl: this.user.imgUrl\n        }\n        newNotif.toUserId = member._id\n        this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n      })\n      const txt = `Task due ${this.taskCopy.txt} date was changed to ${date}`\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.taskId = this.taskCopy.id\n      this.activity = newActivity\n      this.$notify({\n        message: 'Task due date updated',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.updateTask()\n    },\n\n    addTaskMember(member) {\n      const txt = `Member ${member.fullName} was added to task`\n      let newNotif = userService.getEmptyNotif()\n      newNotif.txt = `assigned you to \"${this.taskCopy.txt}\"`\n      newNotif.type = 'assigned'\n      newNotif.byUser = {\n        mail: this.user.email,\n        imgUrl: this.user.imgUrl\n      }\n      newNotif.toUserId = member._id\n      this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.taskId = this.taskCopy.id\n      this.taskCopy.members.unshift(member)\n      this.activity = newActivity\n      this.$notify({\n        message: 'Member assinged to task',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.updateTask()\n    },\n    removeTaskMember(member) {\n      let newNotif = userService.getEmptyNotif()\n      newNotif.txt = `${this.user.fullName} took you off from task \"${this.taskCopy.txt}\"`\n      newNotif.type = 'all'\n      newNotif.byUser = {\n        mail: this.user.email,\n        imgUrl: this.user.imgUrl\n      }\n      newNotif.toUserId = member._id\n      this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n      const idx = this.taskCopy.members.findIndex(\n        tMember => tMember._id === member._id\n      )\n      const txt = `Member ${member.fullName} was removed from task`\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.taskId = this.taskCopy.id\n      this.taskCopy.members.splice(idx, 1)\n      this.activity = newActivity\n      this.$notify({\n        message: 'Member removed from task',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.updateTask()\n    },\n    getStyleStr(colorStr) {\n      return `backgroundColor:${colorStr}`\n    },\n    toggleStatuses() {\n      this.isStatusesShowen = !this.isStatusesShowen\n    },\n    togglePriors() {\n      this.isPriorsShowen = !this.isPriorsShowen\n    },\n    deleteTask() {\n      this.$emit('deleteTask', this.taskCopy.id)\n    },\n    updateTaskTxt(ev) {\n      ev.target.blur()\n      if (ev.target.innerText === this.taskCopy.txt) return\n      else {\n        this.taskCopy.members.forEach(member => {\n          let newNotif = userService.getEmptyNotif()\n          newNotif.txt = `Upadte task content to \"${ev.target.innerText}\"`\n          newNotif.type = 'all'\n          newNotif.byUser = {\n            mail: this.user.email,\n            imgUrl: this.user.imgUrl\n          }\n          newNotif.toUserId = member._id\n          this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n        })\n        const prevTxt = this.taskCopy.txt\n        this.taskCopy.txt = ev.target.innerText\n        const txt = `Task '${prevTxt}' was changed to '${ev.target.innerText}'`\n        let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n        newActivity.taskId = this.taskCopy.id\n        this.activity = newActivity\n\n        this.$notify({\n          message: 'Task txt updated',\n          position: 'bottom-left',\n          duration: 2000\n        })\n        this.updateTask()\n      }\n    },\n    updateTask() {\n      this.$emit('updateTask', this.taskCopy, this.activity)\n    },\n    sendToTaskDetails() {\n      if (this.$route.params.taskId === this.task.id) {\n        return\n      }\n      this.$router.push(\n        `/board/${this.$route.params.boardId}/task/${this.task.id}`\n      )\n    },\n    updateComponentTask(task) {\n      if (this.taskCopy.id === this.$route.params.taskId) {\n        this.taskCopy = task\n      }\n    },\n    updateTaskPriority(opt) {\n      this.taskCopy.members.forEach(member => {\n        let newNotif = userService.getEmptyNotif()\n        newNotif.txt = `Upadte task priority to \"${opt.txt}\"`\n        newNotif.type = 'all'\n        newNotif.byUser = {\n          mail: this.user.email,\n          imgUrl: this.user.imgUrl\n        }\n        newNotif.toUserId = member._id\n        this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n      })\n      const txt = `Task priority was updated to ${opt.txt}`\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.taskId = this.taskCopy.id\n      this.activity = newActivity\n      this.taskCopy.priority.txt = opt.txt\n      this.taskCopy.priority.color = opt.color\n      this.$notify({\n        message: 'Task priority updated',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.updateTask()\n      this.isPriorsShowen = false\n    },\n    updateTaskStatus(opt) {\n      this.taskCopy.members.forEach(member => {\n        let newNotif = userService.getEmptyNotif()\n        newNotif.txt = `Upadte task status to \"${opt.txt}\"`\n        newNotif.type = 'all'\n        newNotif.byUser = {\n          mail: this.user.email,\n          imgUrl: this.user.imgUrl\n        }\n        newNotif.toUserId = member._id\n        this.$store.dispatch({ type: 'sendNotif', notif: newNotif })\n      })\n      const txt = `Task status was updated to ${opt.txt}`\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.taskId = this.taskCopy.id\n      this.activity = newActivity\n\n      this.taskCopy.status.txt = opt.txt\n      this.taskCopy.status.color = opt.color\n      this.$notify({\n        message: 'Task status updated',\n        position: 'bottom-left',\n        duration: 2000\n      })\n      this.updateTask()\n      this.isPriorsShowen = false\n    },\n    closePopups() {\n      this.isStatusesShowen = false\n      this.isPriorsShowen = false\n    }\n  },\n  created() {\n    eventBus.$on('updateTaskPreview', this.updateComponentTask)\n    eventBus.$on('updateTaskPreviewDestory', task => {\n      this.taskCopy = task\n      this.activity = null\n      this.updateTask()\n    })\n    this.taskCopy = this.task\n  }\n}\n</script>\n"]}]}