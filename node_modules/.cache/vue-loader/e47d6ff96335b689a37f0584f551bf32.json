{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/status-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/status-preview.vue","mtime":1607329724843},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB0YXNrUHJldmlldyBmcm9tICcuL3Rhc2stcHJldmlldy52dWUnCmltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnQC9zZXJ2aWNlcy9ldmVudC1idXMuc2VydmljZScKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYm9hcmQuc2VydmljZScKaW1wb3J0IGRyYWdnYWJsZSBmcm9tICd2dWVkcmFnZ2FibGUnCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ3N0YXR1ZXMtcHJldmlldycsCiAgcHJvcHM6IHsKICAgIHN0YXR1czogT2JqZWN0LAogICAgZ3JvdXA6IE9iamVjdAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHR4dDogJycsCiAgICAgIGlzQWRkQnRuU2hvd246IGZhbHNlLAogICAgICBjbG9uZVRhc2tzOm51bGwKICAgICAgCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgYm9hcmQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvYXJkCiAgICB9LAogICAgb25Gb2NvdXNCZ2MoKXsKICAgICAgcmV0dXJuIHRoaXMuaXNBZGRCdG5TaG93biA/ICdiYWNrZ3JvdW5kLWNvbG9yOndoaXRlOycgOiAnJwogICAgfQogIH0sCiAgbWV0aG9kczogewogCiAgICB1cGRhdGVUYXNrU3RhdHVzKHthZGRlZH0pewogICAgICBpZihhZGRlZCl7CiAgICAgIGNvbnN0IHtuZXdJbmRleH0gPSBhZGRlZAogICAgICBjb25zdCBpZHggPSBuZXdJbmRleAogICAgICBjb25zdCB0YXNrID0gdGhpcy5zdGF0dXMudGFza3NbaWR4XQogICAgICB0YXNrLnN0YXR1cy5jb2xvciA9IHRoaXMuc3RhdHVzLmNvbG9yCiAgICAgIHRhc2suc3RhdHVzLnR4dCA9IHRoaXMuc3RhdHVzLnR4dAogICAgICB0aGlzLnVwZGF0ZVRhc2sodGFzaykKICAgICAgfQoKICAgIH0sCiAgICBkZWxldGVUYXNrKHRhc2spIHsKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmJvYXJkLmdyb3Vwcy5maW5kKGdyb3VwID0+IGdyb3VwLmlkID09PSB0YXNrLmdyb3VwSWQpCiAgICAgIGNvbnN0IHRhc2tJZHggPSBncm91cC50YXNrcy5maW5kSW5kZXgoY3VyclRhc2sgPT4gY3VyclRhc2suaWQgPT09IHRhc2suaWQpCiAgICAgIGdyb3VwLnRhc2tzLnNwbGljZSh0YXNrSWR4LCAxKQogICAgICBldmVudEJ1cy4kZW1pdCgndXBkYXRlR3JvdXAnLCBncm91cCkKICAgIH0sCiAgICB1cGRhdGVUYXNrKHVwZGF0ZWRUYXNrKSB7CiAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5ib2FyZC5ncm91cHMuZmluZCgKICAgICAgICBncm91cCA9PiBncm91cC5pZCA9PT0gdXBkYXRlZFRhc2suZ3JvdXBJZAogICAgICApCiAgICAgIGNvbnN0IHRhc2tJZHggPSBncm91cC50YXNrcy5maW5kSW5kZXgoCiAgICAgICAgY3VyclRhc2sgPT4gY3VyclRhc2suaWQgPT09IHVwZGF0ZWRUYXNrLmlkCiAgICAgICkKICAgICAgZ3JvdXAudGFza3Muc3BsaWNlKHRhc2tJZHgsIDEsIHVwZGF0ZWRUYXNrKQogICAgICBldmVudEJ1cy4kZW1pdCgndXBkYXRlR3JvdXAnLCBncm91cCkKICAgIH0sCiAgICBmb2N1c0lucHV0KCkgewogICAgICB0aGlzLmlzQWRkQnRuU2hvd24gPSB0cnVlCiAgICB9LAogICAgdW5Gb2N1c0lucHV0KCkgewogICAgICB0aGlzLmlzQWRkQnRuU2hvd24gPSBmYWxzZQogICAgfSwKICAgIGFkZFRhc2soKSB7CiAgICAgIGNvbnN0IG5ld1Rhc2sgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlUYXNrKCkKICAgICAgbmV3VGFzay5zdGF0dXMuY29sb3IgPSB0aGlzLnN0YXR1cy5jb2xvcgogICAgICBuZXdUYXNrLnN0YXR1cy50eHQgPSB0aGlzLnN0YXR1cy50eHQKICAgICAgbmV3VGFzay50eHQgPSB0aGlzLnR4dAogICAgICB0aGlzLmdyb3VwLnRhc2tzLnVuc2hpZnQobmV3VGFzaykKICAgICAgZXZlbnRCdXMuJGVtaXQoJ3VwZGF0ZUdyb3VwJywgdGhpcy5ncm91cCkKICAgICAgdGhpcy5pc0FkZEJ0blNob3duID0gZmFsc2UKICAgICAgdGhpcy50eHQgPSAnJwogICAgfQogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuZ3JvdXBDb3B5ID0gdGhpcy5ncm91cAogICAgdGhpcy5jbG9uZVRhc2tzID0gdGhpcy5zdGF0dXMudGFza3MKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIHRhc2tQcmV2aWV3LAogICAgZHJhZ2dhYmxlCiAgfQp9Cg=="},{"version":3,"sources":["status-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"status-preview.vue","sourceRoot":"src/cmps/Trello","sourcesContent":["<template>\n  <ul \n    :style=\"`background-color:${status.color}`\"\n    class=\"status-preview flex align-center clean-list status-list\"\n  >\n    <span class=\"status-title\"\n      >{{ status.txt || 'Need to review' }} \n      <span v-if=\"status.tasks\">/ {{ status.tasks.length }}</span></span\n    >\n<div class=\"tasks-preview-container align-center\">\n   <draggable class=\"width100 drag-canvan\" :list=\"cloneTasks\" group=\"tasks\"  @change=\"updateTaskStatus\" >\n    <task-preview\n      v-for=\"task in cloneTasks\"\n      :key=\"task.id\"\n      :task=\"task\"\n      :group=\"group\"\n      @updateTask=\"updateTask\"\n      @deleteTask=\"deleteTask\"\n    />\n    </draggable>\n    </div>\n    <div :style=\"onFocousBgc\" class=\"input-container\">\n\n    <div  class=\"add-task-form flex align-center space-between\" >\n      <input\n        class=\"add-task-input\"\n        v-model=\"txt\"\n        type=\"text\"\n        placeholder=\"+ Add Task\"\n        @click=\"focusInput\"\n        @blur=\"unFocusInput\"\n        @keypress.enter=\"addTask\"\n      />\n      <button @click=\"addTask\" :style=\"`background-color:${status.color}`\" class=\"add-btn\" v-if=\"isAddBtnShown\">\n        + Add\n      </button>\n    </div>\n    </div>\n  </ul>\n</template>\n\n<script>\nimport taskPreview from './task-preview.vue'\nimport { eventBus } from '@/services/event-bus.service'\nimport { boardService } from '../../services/board.service'\nimport draggable from 'vuedraggable'\n\nexport default {\n  name: 'statues-preview',\n  props: {\n    status: Object,\n    group: Object\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShown: false,\n      cloneTasks:null\n      \n    }\n  },\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    onFocousBgc(){\n      return this.isAddBtnShown ? 'background-color:white;' : ''\n    }\n  },\n  methods: {\n \n    updateTaskStatus({added}){\n      if(added){\n      const {newIndex} = added\n      const idx = newIndex\n      const task = this.status.tasks[idx]\n      task.status.color = this.status.color\n      task.status.txt = this.status.txt\n      this.updateTask(task)\n      }\n\n    },\n    deleteTask(task) {\n      const group = this.board.groups.find(group => group.id === task.groupId)\n      const taskIdx = group.tasks.findIndex(currTask => currTask.id === task.id)\n      group.tasks.splice(taskIdx, 1)\n      eventBus.$emit('updateGroup', group)\n    },\n    updateTask(updatedTask) {\n      const group = this.board.groups.find(\n        group => group.id === updatedTask.groupId\n      )\n      const taskIdx = group.tasks.findIndex(\n        currTask => currTask.id === updatedTask.id\n      )\n      group.tasks.splice(taskIdx, 1, updatedTask)\n      eventBus.$emit('updateGroup', group)\n    },\n    focusInput() {\n      this.isAddBtnShown = true\n    },\n    unFocusInput() {\n      this.isAddBtnShown = false\n    },\n    addTask() {\n      const newTask = boardService.getEmptyTask()\n      newTask.status.color = this.status.color\n      newTask.status.txt = this.status.txt\n      newTask.txt = this.txt\n      this.group.tasks.unshift(newTask)\n      eventBus.$emit('updateGroup', this.group)\n      this.isAddBtnShown = false\n      this.txt = ''\n    }\n  },\n  created() {\n    this.groupCopy = this.group\n    this.cloneTasks = this.status.tasks\n  },\n  components: {\n    taskPreview,\n    draggable\n  }\n}\n</script>\n"]}]}