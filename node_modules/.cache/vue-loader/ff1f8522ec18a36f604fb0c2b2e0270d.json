{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue","mtime":1606571938671},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2JvYXJkLnNlcnZpY2UnCmltcG9ydCBBdmF0YXIgZnJvbSAndnVlLWF2YXRhcicKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICd0YXNrLXBvc3RzJywKICAgIHByb3BzOiB7CiAgICAgICAgcG9zdHM6IHsKICAgICAgICAgICAgdHlwZTogQXJyYXksCiAgICAgICAgfSwKICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICAgIGxvZ2dlZEluVXNlcigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMubG9nZ2VkSW5Vc2VyCiAgICAgICAgfSwKICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIG5ld1Bvc3Q6IG51bGwsCiAgICAgICAgICAgIGNvcGllZFBvc3RzOiBudWxsLAogICAgICAgIH0KICAgIH0sCiAgICBjcmVhdGVkKCkgewogICAgICAgIHRoaXMuY29waWVkUG9zdHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucG9zdHMpKQogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBhZGRQb3N0KCkgewogICAgICAgICAgICBpZiAoIXRoaXMubmV3UG9zdCkgewogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgcG9zdCA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVBvc3QoKQogICAgICAgICAgICBwb3N0LnR4dCA9IHRoaXMubmV3UG9zdAogICAgICAgICAgICBwb3N0LmJ5VXNlciA9IHRoaXMubG9nZ2VkSW5Vc2VyCiAgICAgICAgICAgIHRoaXMuY29waWVkUG9zdHMudW5zaGlmdChwb3N0KQogICAgICAgICAgICB0aGlzLiRlbWl0KCd1cGRhdGVQb3N0cycsIHRoaXMuY29waWVkUG9zdHMpCiAgICAgICAgICAgIHRoaXMubmV3UG9zdCA9ICcnCiAgICAgICAgfSwKICAgIH0sCiAgICBjb21wb25lbnRzOiB7CiAgICAgICAgQXZhdGFyLAogICAgfSwKfQo="},{"version":3,"sources":["task-posts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"task-posts.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n    <section class=\"task-posts\">\n        <form @submit.prevent=\"addPost\">\n            <el-input type=\"textarea\" v-model=\"newPost\" />\n            <button>Post</button>\n        </form>\n        <!-- <el-divider /> -->\n        <div class=\"posts-list flex column align-center\">\n            <div\n                class=\"task-post-card\"\n                v-for=\"post in copiedPosts\"\n                :key=\"post.id\"\n            >\n                <div class=\"user-info-container flex space-between\">\n                    <avatar\n                        class=\"profile-img\"\n                        v-if=\"post.byUser\"\n                        :username=\"post.byUser.fullName\"\n                    ></avatar>\n                    <h2 v-if=\"post.byUser\">{{post.byUser.fullName}}</h2>\n                </div>\n                    <el-divider/>\n                <span class=\"task-post-txt\">{{post.txt}}</span>\n            </div>\n        </div>\n    </section>\n</template>\n\n<script>\nimport { boardService } from '../services/board.service'\nimport Avatar from 'vue-avatar'\n\nexport default {\n    name: 'task-posts',\n    props: {\n        posts: {\n            type: Array,\n        },\n    },\n    computed: {\n        loggedInUser() {\n            return this.$store.getters.loggedInUser\n        },\n    },\n    data() {\n        return {\n            newPost: null,\n            copiedPosts: null,\n        }\n    },\n    created() {\n        this.copiedPosts = JSON.parse(JSON.stringify(this.posts))\n    },\n    methods: {\n        addPost() {\n            if (!this.newPost) {\n                return\n            }\n            const post = boardService.getEmptyPost()\n            post.txt = this.newPost\n            post.byUser = this.loggedInUser\n            this.copiedPosts.unshift(post)\n            this.$emit('updatePosts', this.copiedPosts)\n            this.newPost = ''\n        },\n    },\n    components: {\n        Avatar,\n    },\n}\n</script>\n\n<style>\n</style>"]}]}