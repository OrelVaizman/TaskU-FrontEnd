{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/task-details.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/task-details.vue","mtime":1607418824545},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JwpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIHRhc2s6IE9iamVjdCwKICAgIGlzVGFza0RldGFpbHNTaG93bjogQm9vbGVhbiwKICAgIGdyb3VwOiBPYmplY3QKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpc1Nob3duOiBmYWxzZQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHN0YXR1c0NvbG9yKCkgewogICAgICByZXR1cm4gYGJhY2tncm91bmRDb2xvcjogJHt0aGlzLnRhc2suc3RhdHVzLmNvbG9yfTtgCiAgICB9LAogICAgZ3JvdXBDb2xvcigpIHsKICAgICAgcmV0dXJuIGBjb2xvcjogJHt0aGlzLmdyb3VwLmNvbG9yfTtgCiAgICB9LAogICAgYm9hcmQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvYXJkCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRUaW1lKHRpbWUpIHsKICAgICAgcmV0dXJuIG1vbWVudCh0aW1lKS5mb3JtYXQoJ0xMJykKICAgIH0sCiAgICBjbG9zZVRhc2tEZXRhaWxzKCkgewogICAgICB0aGlzLmlzU2hvd24gPSBmYWxzZQogICAgfQogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuaXNTaG93biA9IHRoaXMuaXNUYXNrRGV0YWlsc1Nob3duCiAgfQp9Cg=="},{"version":3,"sources":["task-details.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"task-details.vue","sourceRoot":"src/cmps/Trello","sourcesContent":["<template>\n  <section class=\"task-details-container\">\n    <section class=\"task-details flex column\" v-if=\"isShown\">\n      <div class=\"details-header\">\n        <h4>{{ task.txt }}</h4>\n        <span>In <i class=\"fal fa-arrow-right\"></i> {{ board.name }}</span>\n      </div>\n      <div class=\"detail-container\">\n        <span><i class=\"fas fa-circle point-icon detail-icon\"></i>Group</span>\n        <span :style=\"groupColor\" class=\"content group\"\n          ><i\n            class=\"fas fa-circle point-icon detail-icon\"\n            :style=\"groupColor\"\n          ></i\n          >{{ group.name }}</span\n        >\n      </div>\n\n      <div class=\"detail-container\">\n        <span><i class=\"far fa-user-circle  detail-icon\"></i> Person</span>\n        <span class=\"content\"><i class=\"fal fa-users\"></i></span>\n      </div>\n\n      <div class=\"detail-container\">\n        <span><i class=\"fas fa-stream detail-icon\"></i> Status</span>\n        <span class=\"content\" :style=\"statusColor\">{{ task.status.txt }}</span>\n      </div>\n\n      <div class=\"detail-container\" v-if=\"task.dueDate\">\n        <span><i class=\"fal fa-calendar-day detail-icon\"></i> Date</span>\n        <span class=\"content\">{{ getTime(task.dueDate) }}</span>\n      </div>\n      <button class=\"cls-btn\" @click.stop=\"closeTaskDetails\">X</button>\n    </section>\n    <div\n      class=\"back-drop-layer-details\"\n      v-if=\"isShown\"\n      @click=\"isShown = false\"\n    ></div>\n  </section>\n</template>\n\n<script>\nimport moment from 'moment'\nexport default {\n  props: {\n    task: Object,\n    isTaskDetailsShown: Boolean,\n    group: Object\n  },\n  data() {\n    return {\n      isShown: false\n    }\n  },\n  computed: {\n    statusColor() {\n      return `backgroundColor: ${this.task.status.color};`\n    },\n    groupColor() {\n      return `color: ${this.group.color};`\n    },\n    board() {\n      return this.$store.getters.board\n    }\n  },\n  methods: {\n    getTime(time) {\n      return moment(time).format('LL')\n    },\n    closeTaskDetails() {\n      this.isShown = false\n    }\n  },\n  created() {\n    this.isShown = this.isTaskDetailsShown\n  }\n}\n</script>\n"]}]}