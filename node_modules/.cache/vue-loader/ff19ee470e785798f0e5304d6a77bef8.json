{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-list.vue","mtime":1607209483110},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBncm91cFByZXZpZXcgZnJvbSAnQC9jbXBzL2dyb3VwLXByZXZpZXcudnVlJwppbXBvcnQgZHJhZ2dhYmxlIGZyb20gJ3Z1ZWRyYWdnYWJsZScKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICdncm91cC1saXN0JywKICAgIHByb3BzOiB7CiAgICAgICAgZ3JvdXBzOiBBcnJheSwKICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGNsb25lZEdyb3VwczogbnVsbCwKICAgICAgICB9CiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICB0aGlzLmNsb25lZEdyb3VwcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5ncm91cHMpKQogICAgfSwKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBncm91cFByZXZpZXcsCiAgICAgICAgZHJhZ2dhYmxlLAogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBkdXBsaWNhdGVHcm91cChncm91cCkgewogICAgICAgICAgICB0aGlzLiRlbWl0KCdkdXBsaWNhdGVHcm91cCcsIGdyb3VwKQogICAgICAgIH0sCiAgICAgICAgZW1pdERlbGV0ZShncm91cElkKSB7CiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0ZUdyb3VwJywgZ3JvdXBJZCkKICAgICAgICB9LAogICAgICAgIGVtaXRGb3JjZVJlbmRlcigpIHsKICAgICAgICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgICAgIH0sCiAgICAgICAgdXBkYXRlR3JvdXAoZ3JvdXApIHsKICAgICAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlR3JvdXAnLCBncm91cCkKICAgICAgICB9LAogICAgICAgIGVtaXRVcGRhdGVHcm91cHMoKSB7CiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZUdyb3VwcycsIHRoaXMuY2xvbmVkR3JvdXBzKQogICAgICAgIH0sCiAgICB9LAp9Cg=="},{"version":3,"sources":["group-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"group-list.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n    <section v-if=\"clonedGroups.length\" class=\"group-container\">\n        <ul\n            class=\"clean-list flex column align-center justify-center gap width100\"\n        >\n            <draggable\n                :list=\"clonedGroups\"\n                @end=\"emitUpdateGroups\"\n                animation=\"200\"\n                handle=\".drag-btn\"\n            >\n                <group-preview\n                    v-for=\"group in clonedGroups\"\n                    :key=\"group._id\"\n                    :group=\"group\"\n                    @deleteGroup=\"emitDelete\"\n                    @updateGroup=\"updateGroup\"\n                    @emitForceRender=\"emitForceRender\"\n                    @duplicateGroup=\"duplicateGroup\"\n                />\n            </draggable>\n        </ul>\n    </section>\n</template>\n<script>\nimport groupPreview from '@/cmps/group-preview.vue'\nimport draggable from 'vuedraggable'\n\nexport default {\n    name: 'group-list',\n    props: {\n        groups: Array,\n    },\n    data() {\n        return {\n            clonedGroups: null,\n        }\n    },\n    created() {\n        this.clonedGroups = JSON.parse(JSON.stringify(this.groups))\n    },\n    components: {\n        groupPreview,\n        draggable,\n    },\n    methods: {\n        duplicateGroup(group) {\n            this.$emit('duplicateGroup', group)\n        },\n        emitDelete(groupId) {\n            this.$emit('deleteGroup', groupId)\n        },\n        emitForceRender() {\n            this.$emit('forceRender')\n        },\n        updateGroup(group) {\n            this.$emit('updateGroup', group)\n        },\n        emitUpdateGroups() {\n            this.$emit('updateGroups', this.clonedGroups)\n        },\n    },\n}\n</script>\n"]}]}