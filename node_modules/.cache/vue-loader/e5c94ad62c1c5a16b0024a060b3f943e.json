{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-preview.vue","mtime":1606657046629},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhZGRNZW1iZXJzIGZyb20gJ0AvY21wcy9hZGQtbWVtYmVycycKaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwppbXBvcnQgbGFiZWxQaWNrZXIgZnJvbSAnLi9sYWJlbC1waWNrZXInCmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvYm9hcmQuc2VydmljZScKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsgbGFiZWxQaWNrZXIsIGFkZE1lbWJlcnMgfSwKICBuYW1lOiAndGFzay1wcmV2aWV3JywKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGFza0NvcHk6IG51bGwsCiAgICAgIGlzU3RhdHVzZXNTaG93ZW46IGZhbHNlLAogICAgICBpc1ByaW9yc1Nob3dlbjogZmFsc2UsCiAgICAgIGlzVGFza01lbWJlcnNTaG93ZW46IGZhbHNlLAogICAgfQogIH0sCiAgcHJvcHM6IHsKICAgIHRhc2tDb2xvcjogU3RyaW5nLAogICAgdGFzazogT2JqZWN0LAogICAgc3RhdHVzZXM6IEFycmF5LAogICAgcHJpb3JpdGllczogQXJyYXksCiAgICBncm91cElkOiBTdHJpbmcsCiAgICBib2FyZE1lbWJlcnM6IFtBcnJheSwgT2JqZWN0XSwKICAgIGFjdGl2aXR5OiBPYmplY3QsCiAgICB1c2VyOiBPYmplY3QsCiAgfSwKICBjb21wdXRlZDogewogICAgdGFza0JnYygpIHsKICAgICAgcmV0dXJuIHsgYmFja2dyb3VuZENvbG9yOiB0aGlzLnRhc2tDb2xvciB9CiAgICB9LAogICAgZmlsdGVyZWRCb2FyZE1lbWJlcnMoKSB7CiAgICAgIGNvbnN0IGJvYXJkTWVtYmVycyA9IHRoaXMuYm9hcmRNZW1iZXJzCiAgICAgIGNvbnN0IHRhc2tNZW1iZXJzID0gdGhpcy50YXNrQ29weS5tZW1iZXJzCiAgICAgIGlmICh0YXNrTWVtYmVycykgewogICAgICAgIGNvbnN0IGZpbHRlcmVkQm9hcmRNZW1iZXJzID0gYm9hcmRNZW1iZXJzLmZpbHRlcigoYk1lbWJlcikgPT4gewogICAgICAgICAgcmV0dXJuIHRhc2tNZW1iZXJzLmV2ZXJ5KCh0TWVtYmVyKSA9PiB7CiAgICAgICAgICAgIHJldHVybiB0TWVtYmVyLl9pZCAhPT0gYk1lbWJlci5faWQKICAgICAgICAgIH0pCiAgICAgICAgfSkKICAgICAgICByZXR1cm4gZmlsdGVyZWRCb2FyZE1lbWJlcnMKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gYm9hcmRNZW1iZXJzCiAgICAgIH0KICAgIH0sCiAgfSwKICBtZXRob2RzOiB7CiAgICBvcGVuTWVtYmVyUG9wdXAoKSB7CiAgICAgIHRoaXMuaXNUYXNrTWVtYmVyc1Nob3dlbiA9IHRydWUKICAgIH0sCiAgICB0b2dnbGVNZW1iZXIoKSB7CiAgICAgIHRoaXMuaXNUYXNrTWVtYmVyc1Nob3dlbiA9ICF0aGlzLmlzVGFza01lbWJlcnNTaG93ZW4KICAgIH0sCiAgICBhZGRUYXNrTWVtYmVyKG1lbWJlcikgewogICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSgpCiAgICAgIHRoaXMudGFza0NvcHkubWVtYmVycy51bnNoaWZ0KG1lbWJlcikKICAgICAgbmV3QWN0aXZpdHkudHh0ID0gYE1lbWJlciAke21lbWJlci5mdWxsTmFtZX0gd2FzIGFkZGVkIHRvIHRhc2tgCiAgICAgIG5ld0FjdGl2aXR5LmJ5VXNlciA9IHRoaXMudXNlcgogICAgICB0aGlzLnRhc2tDb3B5LmFjdGl2aXRpZXMucHVzaChuZXdBY3Rpdml0eSkKICAgICAgdGhpcy51cGRhdGVUYXNrKCkKICAgIH0sCiAgICByZW1vdmVUYXNrTWVtYmVyKG1lbWJlcikgewogICAgICBjb25zdCBpZHggPSB0aGlzLnRhc2tDb3B5Lm1lbWJlcnMuZmluZEluZGV4KAogICAgICAgICh0TWVtYmVyKSA9PiB0TWVtYmVyLl9pZCA9PT0gbWVtYmVyLl9pZAogICAgICApCiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KCkKICAgICAgdGhpcy50YXNrQ29weS5tZW1iZXJzLnNwbGljZShpZHgsIDEpCiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9IGBNZW1iZXIgJHttZW1iZXIuZnVsbE5hbWV9IHdhcyByZW1vdmVkIGZyb20gdGFza2AKICAgICAgbmV3QWN0aXZpdHkuYnlVc2VyID0gdGhpcy51c2VyCiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KQogICAgICB0aGlzLnVwZGF0ZVRhc2soKQogICAgfSwKICAgIGdldFN0eWxlU3RyKGNvbG9yU3RyKSB7CiAgICAgIHJldHVybiBgYmFja2dyb3VuZENvbG9yOiR7Y29sb3JTdHJ9YAogICAgfSwKICAgIHRvZ2dsZVN0YXR1c2VzKCkgewogICAgICB0aGlzLmlzU3RhdHVzZXNTaG93ZW4gPSAhdGhpcy5pc1N0YXR1c2VzU2hvd2VuCiAgICB9LAogICAgdG9nZ2xlUHJpb3JzKCkgewogICAgICB0aGlzLmlzUHJpb3JzU2hvd2VuID0gIXRoaXMuaXNQcmlvcnNTaG93ZW4KICAgIH0sCiAgICBkZWxldGVUYXNrKCkgewogICAgICB0aGlzLiRlbWl0KCdkZWxldGVUYXNrJywgdGhpcy50YXNrQ29weS5pZCkKICAgIH0sCiAgICB1cGRhdGVUYXNrVHh0KGV2KSB7CiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KCkKICAgICAgY29uc3QgcHJldlR4dCA9IHRoaXMudGFza0NvcHkudHh0CiAgICAgIHRoaXMudGFza0NvcHkudHh0ID0gZXYudGFyZ2V0LmlubmVyVGV4dAogICAgICBuZXdBY3Rpdml0eS50eHQgPSBgVGFzayAnJHtwcmV2VHh0fScgd2FzIGNoYW5nZWQgdG8gJyR7ZXYudGFyZ2V0LmlubmVyVGV4dH0nYAogICAgICBuZXdBY3Rpdml0eS5ieVVzZXIgPSB0aGlzLnVzZXIKICAgICAgdGhpcy50YXNrQ29weS5hY3Rpdml0aWVzLnB1c2gobmV3QWN0aXZpdHkpCiAgICAgIHRoaXMudXBkYXRlVGFzaygpCiAgICB9LAogICAgdXBkYXRlVGFzaygpIHsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlVGFzaycsIHRoaXMudGFza0NvcHkpCiAgICB9LAogICAgc2VuZFRvVGFza0RldGFpbHMoKSB7CiAgICAgIGlmICh0aGlzLiRyb3V0ZS5wYXJhbXMudGFza0lkID09PSB0aGlzLnRhc2suaWQpIHsKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICB0aGlzLiRyb3V0ZXIucHVzaCgKICAgICAgICBgL2JvYXJkLyR7dGhpcy4kcm91dGUucGFyYW1zLmJvYXJkSWR9L3Rhc2svJHt0aGlzLnRhc2suaWR9YAogICAgICApCiAgICB9LAogICAgdXBkYXRlQ29tcG9uZW50VGFzayh0YXNrKSB7CiAgICAgIGlmICh0aGlzLnRhc2tDb3B5LmlkID09PSB0aGlzLiRyb3V0ZS5wYXJhbXMudGFza0lkKSB7CiAgICAgICAgdGhpcy50YXNrQ29weSA9IHRhc2sKICAgICAgfQogICAgfSwKICAgIHVwZGF0ZVRhc2tQcmlvcml0eShvcHQpIHsKICAgICAgY29uc29sZS5sb2coJ29wdDonLCBvcHQpCiAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KCkKICAgICAgY29uc3QgcHJldlByaW9yID0gdGhpcy50YXNrQ29weS5wcmlvcml0eS50eHQKICAgICAgdGhpcy50YXNrQ29weS5wcmlvcml0eS50eHQgPSBvcHQudHh0CiAgICAgIHRoaXMudGFza0NvcHkucHJpb3JpdHkuY29sb3IgPSBvcHQuY29sb3IKICAgICAgY29uc29sZS5sb2coJ3ByZXZQcmlvcjonLCBwcmV2UHJpb3IpCiAgICAgIG5ld0FjdGl2aXR5LnR4dCA9IGBUYXNrIHByaW9yaXR5IHdhcyB1cGRhdGVkIGZyb20gJHtwcmV2UHJpb3J9IHRvICcke29wdC50eHR9J2AKICAgICAgbmV3QWN0aXZpdHkuYnlVc2VyID0gdGhpcy51c2VyCiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KQogICAgICB0aGlzLnVwZGF0ZVRhc2soKQogICAgICB0aGlzLmlzUHJpb3JzU2hvd2VuID0gZmFsc2UKICAgIH0sCiAgICB1cGRhdGVUYXNrU3RhdHVzKG9wdCkgewogICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSgpCiAgICAgIGNvbnN0IHByZXZTdGF0dXMgPSB0aGlzLnRhc2tDb3B5LnN0YXR1cy50eHQKICAgICAgdGhpcy50YXNrQ29weS5zdGF0dXMudHh0ID0gb3B0LnR4dAogICAgICB0aGlzLnRhc2tDb3B5LnN0YXR1cy5jb2xvciA9IG9wdC5jb2xvcgogICAgICBuZXdBY3Rpdml0eS50eHQgPSBgVGFzayBzdGF0dXMgd2FzIHVwZGF0ZWQgZnJvbSAke3ByZXZTdGF0dXN9IHRvICcke29wdC50eHR9J2AKICAgICAgbmV3QWN0aXZpdHkuYnlVc2VyID0gdGhpcy51c2VyCiAgICAgIHRoaXMudGFza0NvcHkuYWN0aXZpdGllcy5wdXNoKG5ld0FjdGl2aXR5KQogICAgICB0aGlzLnVwZGF0ZVRhc2soKQogICAgICB0aGlzLmlzUHJpb3JzU2hvd2VuID0gZmFsc2UKICAgIH0sCiAgICBjbG9zZVBvcHVwcygpIHsKICAgICAgdGhpcy5pc1Rhc2tNZW1iZXJzU2hvd2VuID0gZmFsc2UKICAgICAgdGhpcy5pc1N0YXR1c2VzU2hvd2VuID0gZmFsc2UKICAgICAgdGhpcy5pc1ByaW9yc1Nob3dlbiA9IGZhbHNlCiAgICB9LAogIH0sCiAgY3JlYXRlZCgpIHsKICAgIGV2ZW50QnVzLiRvbigndXBkYXRlVGFza1ByZXZpZXcnLCB0aGlzLnVwZGF0ZUNvbXBvbmVudFRhc2spCiAgICB0aGlzLnRhc2tDb3B5ID0gdGhpcy50YXNrCiAgfSwKfQo="},{"version":3,"sources":["task-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"task-preview.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <li\n    v-if=\"taskCopy\"\n    class=\"task-preview flex space-between align-center width100\"\n  >\n    <div class=\"flex space-between align-center width100\">\n      <span class=\"task-color\" :style=\"taskBgc\"></span>\n      <button class=\"btn-close\" @click=\"deleteTask\">X</button>\n\n      <div class=\"task-txt\">\n        <span\n          @blur=\"updateTaskTxt\"\n          @keyup.enter=\"updateTaskTxt\"\n          contenteditable\n          >{{ taskCopy.txt }}</span\n        >\n      </div>\n\n      <i @click=\"sendToTaskDetails\" class=\"far fa-comment fa-icon\"></i>\n    </div>\n    <div class=\"task-details flex\">\n      <div class=\"headers flex\">\n        <span\n          ><i\n            @click.stop=\"openMemberPopup\"\n            class=\"far fa-user-circle fa-icon\"\n          ></i\n        ></span>\n\n        <add-members\n          v-if=\"isTaskMembersShowen\"\n          firstTitle=\"Task Members\"\n          secondTitle=\"Board Members\"\n          :members=\"taskCopy.members\"\n          :allMembers=\"filteredBoardMembers\"\n          @addMember=\"addTaskMember\"\n          @removeMember=\"removeTaskMember\"\n        />\n        <span\n          @click=\"toggleStatuses\"\n          class=\"status relative\"\n          :style=\"getStyleStr(taskCopy.status.color)\"\n          >{{ taskCopy.status.txt }}\n          <label-picker\n            v-if=\"isStatusesShowen\"\n            :opts=\"statuses\"\n            type=\"status\"\n            @updateTaskStatus=\"updateTaskStatus\"\n        /></span>\n\n        <span\n          @click=\"togglePriors\"\n          class=\"priority relative\"\n          :style=\"getStyleStr(taskCopy.priority.color)\"\n          >{{ taskCopy.priority.txt }}\n          <label-picker\n            v-if=\"isPriorsShowen\"\n            :opts=\"priorities\"\n            type=\"priority\"\n            @updateTaskPriority=\"updateTaskPriority\"\n        /></span>\n\n        <span class=\"date-picker\">\n          <el-date-picker\n            class=\"date-input\"\n            @change=\"updateTask\"\n            v-model=\"taskCopy.dueDate\"\n            type=\"date\"\n            placeholder=\"Pick a date\"\n          >\n          </el-date-picker>\n        </span>\n      </div>\n    </div>\n    <div\n      class=\"back-drop-layer\"\n      v-if=\"isTaskMembersShowen || isStatusesShowen || isPriorsShowen\"\n      @click.stop=\"closePopups\"\n    ></div>\n  </li>\n</template>\n<script>\nimport addMembers from '@/cmps/add-members'\nimport { eventBus } from '@/services/event-bus.service'\nimport labelPicker from './label-picker'\nimport { boardService } from '@/services/board.service'\nexport default {\n  components: { labelPicker, addMembers },\n  name: 'task-preview',\n  data() {\n    return {\n      taskCopy: null,\n      isStatusesShowen: false,\n      isPriorsShowen: false,\n      isTaskMembersShowen: false,\n    }\n  },\n  props: {\n    taskColor: String,\n    task: Object,\n    statuses: Array,\n    priorities: Array,\n    groupId: String,\n    boardMembers: [Array, Object],\n    activity: Object,\n    user: Object,\n  },\n  computed: {\n    taskBgc() {\n      return { backgroundColor: this.taskColor }\n    },\n    filteredBoardMembers() {\n      const boardMembers = this.boardMembers\n      const taskMembers = this.taskCopy.members\n      if (taskMembers) {\n        const filteredBoardMembers = boardMembers.filter((bMember) => {\n          return taskMembers.every((tMember) => {\n            return tMember._id !== bMember._id\n          })\n        })\n        return filteredBoardMembers\n      } else {\n        return boardMembers\n      }\n    },\n  },\n  methods: {\n    openMemberPopup() {\n      this.isTaskMembersShowen = true\n    },\n    toggleMember() {\n      this.isTaskMembersShowen = !this.isTaskMembersShowen\n    },\n    addTaskMember(member) {\n      let newActivity = boardService.getEmptyActivity()\n      this.taskCopy.members.unshift(member)\n      newActivity.txt = `Member ${member.fullName} was added to task`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    removeTaskMember(member) {\n      const idx = this.taskCopy.members.findIndex(\n        (tMember) => tMember._id === member._id\n      )\n      let newActivity = boardService.getEmptyActivity()\n      this.taskCopy.members.splice(idx, 1)\n      newActivity.txt = `Member ${member.fullName} was removed from task`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    getStyleStr(colorStr) {\n      return `backgroundColor:${colorStr}`\n    },\n    toggleStatuses() {\n      this.isStatusesShowen = !this.isStatusesShowen\n    },\n    togglePriors() {\n      this.isPriorsShowen = !this.isPriorsShowen\n    },\n    deleteTask() {\n      this.$emit('deleteTask', this.taskCopy.id)\n    },\n    updateTaskTxt(ev) {\n      let newActivity = boardService.getEmptyActivity()\n      const prevTxt = this.taskCopy.txt\n      this.taskCopy.txt = ev.target.innerText\n      newActivity.txt = `Task '${prevTxt}' was changed to '${ev.target.innerText}'`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n    },\n    updateTask() {\n      this.$emit('updateTask', this.taskCopy)\n    },\n    sendToTaskDetails() {\n      if (this.$route.params.taskId === this.task.id) {\n        return\n      }\n      this.$router.push(\n        `/board/${this.$route.params.boardId}/task/${this.task.id}`\n      )\n    },\n    updateComponentTask(task) {\n      if (this.taskCopy.id === this.$route.params.taskId) {\n        this.taskCopy = task\n      }\n    },\n    updateTaskPriority(opt) {\n      console.log('opt:', opt)\n      let newActivity = boardService.getEmptyActivity()\n      const prevPrior = this.taskCopy.priority.txt\n      this.taskCopy.priority.txt = opt.txt\n      this.taskCopy.priority.color = opt.color\n      console.log('prevPrior:', prevPrior)\n      newActivity.txt = `Task priority was updated from ${prevPrior} to '${opt.txt}'`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n      this.isPriorsShowen = false\n    },\n    updateTaskStatus(opt) {\n      let newActivity = boardService.getEmptyActivity()\n      const prevStatus = this.taskCopy.status.txt\n      this.taskCopy.status.txt = opt.txt\n      this.taskCopy.status.color = opt.color\n      newActivity.txt = `Task status was updated from ${prevStatus} to '${opt.txt}'`\n      newActivity.byUser = this.user\n      this.taskCopy.activities.push(newActivity)\n      this.updateTask()\n      this.isPriorsShowen = false\n    },\n    closePopups() {\n      this.isTaskMembersShowen = false\n      this.isStatusesShowen = false\n      this.isPriorsShowen = false\n    },\n  },\n  created() {\n    eventBus.$on('updateTaskPreview', this.updateComponentTask)\n    this.taskCopy = this.task\n  },\n}\n</script>"]}]}