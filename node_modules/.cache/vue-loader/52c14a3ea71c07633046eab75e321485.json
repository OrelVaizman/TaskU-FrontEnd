{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/group-preview.vue","mtime":1606808749393},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBwcm9ncmVzc0JhciBmcm9tICdAL2NtcHMvcHJvZ3Jlc3MtYmFyJwppbXBvcnQgdGFza0xpc3QgZnJvbSAnLi90YXNrLWxpc3QudnVlJwppbXBvcnQgcG9wdXBNZW51IGZyb20gJy4vcG9wdXAtbWVudScKaW1wb3J0IGNvbG9yc01lbnUgZnJvbSAnLi9jb2xvcnMtbWVudScKLy8gaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwppbXBvcnQgeyBib2FyZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9ib2FyZC5zZXJ2aWNlJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdncm91cC1wcmV2aWV3JywKICBwcm9wczogewogICAgZ3JvdXA6IE9iamVjdCwKICAgIGRlbGV0ZUdyb3VwOiBGdW5jdGlvbgogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGlzRXhwYW5kZWQ6IHRydWUsCiAgICAgIGdyb3VwQ29weTogbnVsbCwKICAgICAgaXNBY3Rpb25zU2hvd2VuOiBmYWxzZSwKICAgICAgaXNDb2xvcnNTaG93ZW46IGZhbHNlLAogICAgICBwb3B1cE9wdGlvbnM6IFsKICAgICAgICB7CiAgICAgICAgICB0eHQ6ICdFeHBhbmQnLAogICAgICAgICAgZnVuYzogdGhpcy5leHBhbmRHcm91cCwKICAgICAgICAgIGljb25TdHI6ICdleHBhbmQtYWx0JwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdHh0OiAnTmV3IFRhc2snLAogICAgICAgICAgZnVuYzogdGhpcy5hZGROZXdUYXNrLAogICAgICAgICAgaWNvblN0cjogJ3BsdXMnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB0eHQ6ICdEZWxldGUnLAogICAgICAgICAgZnVuYzogdGhpcy5kZWxldGVHcm91cCwKICAgICAgICAgIGljb25TdHI6ICd0cmFzaCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHR4dDogJ0NoYW5nZSBDb2xvcicsCiAgICAgICAgICBmdW5jOiB0aGlzLnRvZ2dsZUNvbG9yc01lbnUsCiAgICAgICAgICBpY29uU3RyOiAncGFpbnQtYnJ1c2gnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB0eHQ6ICdEdXBsaWNhdGUnLAogICAgICAgICAgZnVuYzogdGhpcy5kdXBsaWNhdGVHcm91cCwKICAgICAgICAgIGljb25TdHI6ICdjb3B5JwogICAgICAgIH0KICAgICAgXQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgY2xvc2VQb3BVcHMoKSB7CiAgICAgIHRoaXMuaXNBY3Rpb25zU2hvd2VuID0gZmFsc2UKICAgICAgdGhpcy5pc0NvbG9yc1Nob3dlbiA9IGZhbHNlCiAgICB9LAogICAgYWRkTmV3VGFzaygpIHsKICAgICAgY29uc3QgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKQogICAgICB0aGlzLmdyb3VwQ29weS50YXNrcy5wdXNoKG5ld1Rhc2spCiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZUdyb3VwJywgdGhpcy5ncm91cENvcHkpCiAgICB9LAogICAgZm9jdXNHcm91cE5hbWUoKSB7CiAgICAgIHRoaXMuJHJlZnMuZ3JvdXBOYW1lLmZvY3VzKCkKICAgICAgdGhpcy5pc0FjdGlvbnNTaG93ZW4gPSBmYWxzZQogICAgfSwKICAgIGdldFN0eWxlU3RyKGNvbG9yU3RyKSB7CiAgICAgIHJldHVybiBgYmFja2dyb3VuZENvbG9yOiR7Y29sb3JTdHJ9YAogICAgfSwKICAgIGR1cGxpY2F0ZUdyb3VwKCkgewogICAgICB0aGlzLiRlbWl0KCdkdXBsaWNhdGVHcm91cCcsIHRoaXMuZ3JvdXBDb3B5KQogICAgfSwKICAgIGVtaXRGb3JjZVJlbmRlcigpIHsKICAgICAgdGhpcy4kZW1pdCgnZW1pdEZvcmNlUmVuZGVyJykKICAgIH0sCiAgICB0b2dnbGVDb2xvcnNNZW51KCkgewogICAgICB0aGlzLmlzQ29sb3JzU2hvd2VuID0gIXRoaXMuaXNDb2xvcnNTaG93ZW4KICAgIH0sCiAgICB0b2dnbGVHcm91cEFjdGlvbnMoKSB7CiAgICAgIHRoaXMuaXNBY3Rpb25zU2hvd2VuID0gIXRoaXMuaXNBY3Rpb25zU2hvd2VuCiAgICB9LAogICAgZW1pdERlbGV0ZShncm91cElkKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0ZUdyb3VwJywgZ3JvdXBJZCkKICAgICAgdGhpcy5pc0V4cGFuZGVkID0gZmFsc2UKICAgIH0sCiAgICB0b2dnbGVHcm91cCgpIHsKICAgICAgdGhpcy5pc0V4cGFuZGVkID0gIXRoaXMuaXNFeHBhbmRlZAogICAgICB0aGlzLmlzQWN0aW9uc1Nob3dlbiA9IGZhbHNlCiAgICB9LAogICAgZXhwYW5kR3JvdXAoKSB7CiAgICAgIHRoaXMuaXNFeHBhbmRlZCA9IHRydWUKICAgICAgdGhpcy5pc0FjdGlvbnNTaG93ZW4gPSBmYWxzZQogICAgfSwKICAgIHNldEdyb3VwQ29sb3IoY29sb3IpIHsKICAgICAgdGhpcy5pc0FjdGlvbnNTaG93ZW4gPSBmYWxzZQogICAgICB0aGlzLmdyb3VwQ29weS5jb2xvciA9IGNvbG9yCiAgICAgIHRoaXMuaXNDb2xvcnNTaG93ZW4gPSBmYWxzZQogICAgICB0aGlzLiRlbWl0KCd1cGRhdGVHcm91cCcsIHRoaXMuZ3JvdXBDb3B5KQogICAgfSwKICAgIHVwZGF0ZUdyb3VwTmFtZShldikgewogICAgICB0aGlzLmdyb3VwQ29weS5uYW1lID0gZXYudGFyZ2V0LmlubmVyVGV4dAogICAgICB0aGlzLiRlbWl0KCd1cGRhdGVHcm91cCcsIHRoaXMuZ3JvdXBDb3B5KQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHByb2dyZXNzQmFyRGF0YSgpIHsKICAgICAgbGV0IHN0YXR1c1BlcmNlbnRhZ2VNYXAgPSB0aGlzLmdyb3VwLnRhc2tzLnJlZHVjZSgoYWNjLCB0YXNrKSA9PiB7CiAgICAgICAgaWYgKCFhY2NbdGFzay5zdGF0dXMudHh0XSkKICAgICAgICAgIGFjY1t0YXNrLnN0YXR1cy50eHRdID0geyBjb3VudDogMCwgc3RhdHVzQ29sb3I6IHRhc2suc3RhdHVzLmNvbG9yIH0KICAgICAgICBhY2NbdGFzay5zdGF0dXMudHh0XS5jb3VudCsrCiAgICAgICAgcmV0dXJuIGFjYwogICAgICB9LCB7fSkKICAgICAgY29uc3QgdG90YWxTdW0gPSB0aGlzLmdyb3VwLnRhc2tzLmxlbmd0aAogICAgICBmb3IgKGxldCBrZXkgaW4gc3RhdHVzUGVyY2VudGFnZU1hcCkgewogICAgICAgIHN0YXR1c1BlcmNlbnRhZ2VNYXBbCiAgICAgICAgICBrZXkKICAgICAgICBdLmZyYWN0aW9uID0gYCR7c3RhdHVzUGVyY2VudGFnZU1hcFtrZXldLmNvdW50fSAvICR7dG90YWxTdW19YAogICAgICAgIHN0YXR1c1BlcmNlbnRhZ2VNYXBba2V5XS5wZXJjZW50YWdlID0KICAgICAgICAgIChzdGF0dXNQZXJjZW50YWdlTWFwW2tleV0uY291bnQgLyB0b3RhbFN1bSkgKiAxMDAKICAgICAgICBzdGF0dXNQZXJjZW50YWdlTWFwW2tleV0ubmFtZSA9IGtleQogICAgICB9CiAgICAgIHJldHVybiBzdGF0dXNQZXJjZW50YWdlTWFwCiAgICB9LAogICAgcHJvZ3Jlc3NCYXJQcmlvKCkgewogICAgICBsZXQgcHJpb3JpdHlQZXJjZW50YWdlTWFwID0gdGhpcy5ncm91cC50YXNrcy5yZWR1Y2UoKGFjYywgdGFzaykgPT4gewogICAgICAgIGlmICghYWNjW3Rhc2sucHJpb3JpdHkudHh0XSkKICAgICAgICAgIGFjY1t0YXNrLnByaW9yaXR5LnR4dF0gPSB7CiAgICAgICAgICAgIGNvdW50OiAwLAogICAgICAgICAgICBzdGF0dXNDb2xvcjogdGFzay5wcmlvcml0eS5jb2xvcgogICAgICAgICAgfQogICAgICAgIGFjY1t0YXNrLnByaW9yaXR5LnR4dF0uY291bnQrKwogICAgICAgIHJldHVybiBhY2MKICAgICAgfSwge30pCiAgICAgIGNvbnN0IHRvdGFsU3VtID0gdGhpcy5ncm91cC50YXNrcy5sZW5ndGgKICAgICAgZm9yIChsZXQga2V5IGluIHByaW9yaXR5UGVyY2VudGFnZU1hcCkgewogICAgICAgIHByaW9yaXR5UGVyY2VudGFnZU1hcFsKICAgICAgICAgIGtleQogICAgICAgIF0uZnJhY3Rpb24gPSBgJHtwcmlvcml0eVBlcmNlbnRhZ2VNYXBba2V5XS5jb3VudH0gLyAke3RvdGFsU3VtfWAKICAgICAgICBwcmlvcml0eVBlcmNlbnRhZ2VNYXBba2V5XS5wZXJjZW50YWdlID0KICAgICAgICAgIChwcmlvcml0eVBlcmNlbnRhZ2VNYXBba2V5XS5jb3VudCAvIHRvdGFsU3VtKSAqIDEwMAogICAgICAgIHByaW9yaXR5UGVyY2VudGFnZU1hcFtrZXldLm5hbWUgPSBrZXkKICAgICAgfQogICAgICByZXR1cm4gcHJpb3JpdHlQZXJjZW50YWdlTWFwCiAgICB9LAogICAgdGFza3NDb3VudCgpIHsKICAgICAgcmV0dXJuIGAke3RoaXMuZ3JvdXBDb3B5LnRhc2tzLmxlbmd0aH0gaXRlbXNgCiAgICB9LAogICAgZXhwYW5kZWQoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzRXhwYW5kZWQgPyB0cnVlIDogZmFsc2UKICAgIH0sCiAgICBncm91cENvbG9yKCkgewogICAgICByZXR1cm4geyBjb2xvcjogdGhpcy5ncm91cENvcHkuY29sb3IgfQogICAgfSwKICAgIGJvYXJkKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5ib2FyZAogICAgfQogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuZ3JvdXBDb3B5ID0gdGhpcy5ncm91cAogIH0sCiAgY29tcG9uZW50czogewogICAgdGFza0xpc3QsCiAgICBjb2xvcnNNZW51LAogICAgcHJvZ3Jlc3NCYXIsCiAgICBwb3B1cE1lbnUKICB9Cn0K"},{"version":3,"sources":["group-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"group-preview.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <section class=\"group-preview-container relative\">\n    <div class=\"expand-btn-container\">\n      <button\n        :style=\"getStyleStr(group.color)\"\n        class=\"expand-btn\"\n        @click.stop=\"toggleGroupActions\"\n      >\n        <i class=\"expand-arrow fas fa-arrow-down\"></i>\n      </button>\n    </div>\n    <li\n      :class=\"{\n        'group-preview width100 flex space-between align-center ': true,\n        expanded: expanded\n      }\"\n      @click=\"expandGroup\"\n    >\n      <h4\n        class=\"group-headers group-name editable\"\n        ref=\"groupName\"\n        :style=\"groupColor\"\n        @blur=\"updateGroupName\"\n        @keydown.enter=\"updateGroupName\"\n        contenteditable\n      >\n        {{ groupCopy.name }}\n      </h4>\n\n      <popup-menu\n        v-if=\"isActionsShowen\"\n        @closePopup=\"toggleGroupActions\"\n        :menuItems=\"popupOptions\"\n      />\n      <colors-menu v-if=\"isColorsShowen\" @setColor=\"setGroupColor\" />\n      <span v-if=\"!isExpanded\">{{ tasksCount }}</span>\n      <div v-if=\"isExpanded\" class=\"flex space-between align-center\">\n        <div class=\"group-headers headers flex\">\n          <h4 class=\"list-title\">Members</h4>\n          <h4 class=\"list-title\">Status</h4>\n          <h4 class=\"list-title\">Priority</h4>\n          <h4 class=\"list-title date\">Due Date</h4>\n        </div>\n      </div>\n      <task-list\n        :taskColor=\"group.color\"\n        v-if=\"isExpanded\"\n        :tasks=\"groupCopy.tasks\"\n        :groupId=\"groupCopy.id\"\n        @forceRender=\"emitForceRender\"\n      />\n      <div class=\"progress-bar-section flex\">\n        <!-- <h2> -->\n        <!-- {{progressBarPrio}} -->\n\n        <!-- </h2>  -->\n        <progress-bar :progressBarData=\"progressBarData\" />\n\n        <progress-bar :progressBarData=\"progressBarPrio\" />\n      </div>\n    </li>\n    <div\n      class=\"back-drop-layer\"\n      v-if=\"isActionsShowen || isColorsShowen\"\n      @click.stop=\"closePopUps\"\n    ></div>\n  </section>\n</template>\n\n<script>\nimport progressBar from '@/cmps/progress-bar'\nimport taskList from './task-list.vue'\nimport popupMenu from './popup-menu'\nimport colorsMenu from './colors-menu'\n// import { eventBus } from '@/services/event-bus.service'\nimport { boardService } from '../services/board.service'\n\nexport default {\n  name: 'group-preview',\n  props: {\n    group: Object,\n    deleteGroup: Function\n  },\n  data() {\n    return {\n      isExpanded: true,\n      groupCopy: null,\n      isActionsShowen: false,\n      isColorsShowen: false,\n      popupOptions: [\n        {\n          txt: 'Expand',\n          func: this.expandGroup,\n          iconStr: 'expand-alt'\n        },\n        {\n          txt: 'New Task',\n          func: this.addNewTask,\n          iconStr: 'plus'\n        },\n        {\n          txt: 'Delete',\n          func: this.deleteGroup,\n          iconStr: 'trash'\n        },\n        {\n          txt: 'Change Color',\n          func: this.toggleColorsMenu,\n          iconStr: 'paint-brush'\n        },\n        {\n          txt: 'Duplicate',\n          func: this.duplicateGroup,\n          iconStr: 'copy'\n        }\n      ]\n    }\n  },\n  methods: {\n    closePopUps() {\n      this.isActionsShowen = false\n      this.isColorsShowen = false\n    },\n    addNewTask() {\n      const newTask = boardService.getEmptyTask()\n      this.groupCopy.tasks.push(newTask)\n      this.$emit('updateGroup', this.groupCopy)\n    },\n    focusGroupName() {\n      this.$refs.groupName.focus()\n      this.isActionsShowen = false\n    },\n    getStyleStr(colorStr) {\n      return `backgroundColor:${colorStr}`\n    },\n    duplicateGroup() {\n      this.$emit('duplicateGroup', this.groupCopy)\n    },\n    emitForceRender() {\n      this.$emit('emitForceRender')\n    },\n    toggleColorsMenu() {\n      this.isColorsShowen = !this.isColorsShowen\n    },\n    toggleGroupActions() {\n      this.isActionsShowen = !this.isActionsShowen\n    },\n    emitDelete(groupId) {\n      this.$emit('deleteGroup', groupId)\n      this.isExpanded = false\n    },\n    toggleGroup() {\n      this.isExpanded = !this.isExpanded\n      this.isActionsShowen = false\n    },\n    expandGroup() {\n      this.isExpanded = true\n      this.isActionsShowen = false\n    },\n    setGroupColor(color) {\n      this.isActionsShowen = false\n      this.groupCopy.color = color\n      this.isColorsShowen = false\n      this.$emit('updateGroup', this.groupCopy)\n    },\n    updateGroupName(ev) {\n      this.groupCopy.name = ev.target.innerText\n      this.$emit('updateGroup', this.groupCopy)\n    }\n  },\n  computed: {\n    progressBarData() {\n      let statusPercentageMap = this.group.tasks.reduce((acc, task) => {\n        if (!acc[task.status.txt])\n          acc[task.status.txt] = { count: 0, statusColor: task.status.color }\n        acc[task.status.txt].count++\n        return acc\n      }, {})\n      const totalSum = this.group.tasks.length\n      for (let key in statusPercentageMap) {\n        statusPercentageMap[\n          key\n        ].fraction = `${statusPercentageMap[key].count} / ${totalSum}`\n        statusPercentageMap[key].percentage =\n          (statusPercentageMap[key].count / totalSum) * 100\n        statusPercentageMap[key].name = key\n      }\n      return statusPercentageMap\n    },\n    progressBarPrio() {\n      let priorityPercentageMap = this.group.tasks.reduce((acc, task) => {\n        if (!acc[task.priority.txt])\n          acc[task.priority.txt] = {\n            count: 0,\n            statusColor: task.priority.color\n          }\n        acc[task.priority.txt].count++\n        return acc\n      }, {})\n      const totalSum = this.group.tasks.length\n      for (let key in priorityPercentageMap) {\n        priorityPercentageMap[\n          key\n        ].fraction = `${priorityPercentageMap[key].count} / ${totalSum}`\n        priorityPercentageMap[key].percentage =\n          (priorityPercentageMap[key].count / totalSum) * 100\n        priorityPercentageMap[key].name = key\n      }\n      return priorityPercentageMap\n    },\n    tasksCount() {\n      return `${this.groupCopy.tasks.length} items`\n    },\n    expanded() {\n      return this.isExpanded ? true : false\n    },\n    groupColor() {\n      return { color: this.groupCopy.color }\n    },\n    board() {\n      return this.$store.getters.board\n    }\n  },\n  created() {\n    this.groupCopy = this.group\n  },\n  components: {\n    taskList,\n    colorsMenu,\n    progressBar,\n    popupMenu\n  }\n}\n</script>\n"]}]}