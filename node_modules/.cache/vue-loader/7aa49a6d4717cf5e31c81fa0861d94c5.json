{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/status-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/Trello/status-preview.vue","mtime":1609778254042},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB0YXNrUHJldmlldyBmcm9tICcuL3Rhc2stcHJldmlldy52dWUnCmltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnQC9zZXJ2aWNlcy9ldmVudC1idXMuc2VydmljZScKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYm9hcmQuc2VydmljZScKaW1wb3J0IGRyYWdnYWJsZSBmcm9tICd2dWVkcmFnZ2FibGUnCmltcG9ydCBfIGZyb20gJ2xvZGFzaCcKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdzdGF0dWVzLXByZXZpZXcnLAogIHByb3BzOiB7CiAgICBzdGF0dXM6IE9iamVjdCwKICAgIGdyb3VwOiBPYmplY3QsCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdHh0OiAnJywKICAgICAgaXNBZGRCdG5TaG93bjogZmFsc2UsCiAgICAgIGNsb25lVGFza3M6IG51bGwsCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgYm9hcmQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvYXJkCiAgICB9LAogICAgb25Gb2NvdXNCZ2MoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzQWRkQnRuU2hvd24gPyAnYmFja2dyb3VuZC1jb2xvcjp3aGl0ZTsnIDogJycKICAgIH0sCiAgfSwKICBtZXRob2RzOiB7CiAgICB1cGRhdGVUYXNrU3RhdHVzKHsgYWRkZWQgfSkgewogICAgICBpZiAoYWRkZWQpIHsKICAgICAgICBjb25zdCB7IG5ld0luZGV4IH0gPSBhZGRlZAogICAgICAgIGNvbnN0IGlkeCA9IG5ld0luZGV4CiAgICAgICAgY29uc3QgdGFzayA9IF8uY2xvbmUodGhpcy5zdGF0dXMudGFza3NbaWR4XSkKICAgICAgICB0YXNrLnN0YXR1cy5jb2xvciA9IHRoaXMuc3RhdHVzLmNvbG9yCiAgICAgICAgdGFzay5zdGF0dXMudHh0ID0gdGhpcy5zdGF0dXMudHh0CiAgICAgICAgdGhpcy51cGRhdGVUYXNrKHRhc2spCiAgICAgIH0KICAgIH0sCiAgICBkZWxldGVUYXNrKHRhc2spIHsKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmJvYXJkLmdyb3Vwcy5maW5kKChncm91cCkgPT4gZ3JvdXAuaWQgPT09IHRhc2suZ3JvdXBJZCkKICAgICAgY29uc3QgdGFza0lkeCA9IGdyb3VwLnRhc2tzLmZpbmRJbmRleCgKICAgICAgICAoY3VyclRhc2spID0+IGN1cnJUYXNrLmlkID09PSB0YXNrLmlkCiAgICAgICkKICAgICAgZ3JvdXAudGFza3Muc3BsaWNlKHRhc2tJZHgsIDEpCiAgICAgIGV2ZW50QnVzLiRlbWl0KCd1cGRhdGVHcm91cCcsIGdyb3VwKQogICAgfSwKICAgIHVwZGF0ZVRhc2sodXBkYXRlZFRhc2spIHsKICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmJvYXJkLmdyb3Vwcy5maW5kKAogICAgICAgIChncm91cCkgPT4gZ3JvdXAuaWQgPT09IHVwZGF0ZWRUYXNrLmdyb3VwSWQKICAgICAgKQogICAgICBjb25zdCB0YXNrSWR4ID0gZ3JvdXAudGFza3MuZmluZEluZGV4KAogICAgICAgIChjdXJyVGFzaykgPT4gY3VyclRhc2suaWQgPT09IHVwZGF0ZWRUYXNrLmlkCiAgICAgICkKICAgICAgY29uc3QgY2xlYW5UYXNrID0gXy5vbWl0KHVwZGF0ZWRUYXNrLCBbJ2dyb3VwSWQnLCAnZ3JvdXBOYW1lJ10pCiAgICAgIGdyb3VwLnRhc2tzLnNwbGljZSh0YXNrSWR4LCAxLCBjbGVhblRhc2spCiAgICAgIGV2ZW50QnVzLiRlbWl0KCd1cGRhdGVHcm91cCcsIGdyb3VwKQogICAgfSwKICAgIGZvY3VzSW5wdXQoKSB7CiAgICAgIHRoaXMuaXNBZGRCdG5TaG93biA9IHRydWUKICAgIH0sCiAgICB1bkZvY3VzSW5wdXQoKSB7CiAgICAgIHRoaXMuaXNBZGRCdG5TaG93biA9IGZhbHNlCiAgICB9LAogICAgYWRkVGFzaygpIHsKICAgICAgY29uc3QgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKQogICAgICBuZXdUYXNrLnN0YXR1cy5jb2xvciA9IHRoaXMuc3RhdHVzLmNvbG9yCiAgICAgIG5ld1Rhc2suc3RhdHVzLnR4dCA9IHRoaXMuc3RhdHVzLnR4dAogICAgICBuZXdUYXNrLnR4dCA9IHRoaXMudHh0CiAgICAgIHRoaXMuZ3JvdXAudGFza3MudW5zaGlmdChuZXdUYXNrKQogICAgICBldmVudEJ1cy4kZW1pdCgndXBkYXRlR3JvdXAnLCB0aGlzLmdyb3VwKQogICAgICB0aGlzLmlzQWRkQnRuU2hvd24gPSBmYWxzZQogICAgICB0aGlzLnR4dCA9ICcnCiAgICB9LAogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuZ3JvdXBDb3B5ID0gdGhpcy5ncm91cAogICAgdGhpcy5jbG9uZVRhc2tzID0gdGhpcy5zdGF0dXMudGFza3MKICB9LAogIGNvbXBvbmVudHM6IHsKICAgIHRhc2tQcmV2aWV3LAogICAgZHJhZ2dhYmxlLAogIH0sCn0K"},{"version":3,"sources":["status-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"status-preview.vue","sourceRoot":"src/cmps/Trello","sourcesContent":["<template>\n  <ul\n    :style=\"`background-color:${status.color}`\"\n    class=\"status-preview flex align-center clean-list status-list\"\n  >\n    <span class=\"status-title\"\n      >{{ status.txt || 'Need to review' }}\n      <span v-if=\"status.tasks\">/ {{ status.tasks.length }}</span></span\n    >\n    <div class=\"tasks-preview-container align-center\">\n      <draggable\n        class=\"width100 drag-canvan\"\n        :list=\"cloneTasks\"\n        group=\"tasks\"\n        @change=\"updateTaskStatus\"\n      >\n        <task-preview\n          v-for=\"task in cloneTasks\"\n          :key=\"task.id\"\n          :task=\"task\"\n          :group=\"group\"\n          @updateTask=\"updateTask\"\n          @deleteTask=\"deleteTask\"\n        />\n      </draggable>\n    </div>\n    <div :style=\"onFocousBgc\" class=\"input-container\">\n      <div class=\"add-task-form flex align-center space-between\">\n        <input\n          class=\"add-task-input\"\n          v-model=\"txt\"\n          type=\"text\"\n          placeholder=\"+ Add Task\"\n          @click=\"focusInput\"\n          @blur=\"unFocusInput\"\n          @keypress.enter=\"addTask\"\n        />\n        <button\n          @click=\"addTask\"\n          :style=\"`background-color:${status.color}`\"\n          class=\"add-btn\"\n          v-if=\"isAddBtnShown\"\n        >\n          + Add\n        </button>\n      </div>\n    </div>\n  </ul>\n</template>\n\n<script>\nimport taskPreview from './task-preview.vue'\nimport { eventBus } from '@/services/event-bus.service'\nimport { boardService } from '../../services/board.service'\nimport draggable from 'vuedraggable'\nimport _ from 'lodash'\nexport default {\n  name: 'statues-preview',\n  props: {\n    status: Object,\n    group: Object,\n  },\n  data() {\n    return {\n      txt: '',\n      isAddBtnShown: false,\n      cloneTasks: null,\n    }\n  },\n  computed: {\n    board() {\n      return this.$store.getters.board\n    },\n    onFocousBgc() {\n      return this.isAddBtnShown ? 'background-color:white;' : ''\n    },\n  },\n  methods: {\n    updateTaskStatus({ added }) {\n      if (added) {\n        const { newIndex } = added\n        const idx = newIndex\n        const task = _.clone(this.status.tasks[idx])\n        task.status.color = this.status.color\n        task.status.txt = this.status.txt\n        this.updateTask(task)\n      }\n    },\n    deleteTask(task) {\n      const group = this.board.groups.find((group) => group.id === task.groupId)\n      const taskIdx = group.tasks.findIndex(\n        (currTask) => currTask.id === task.id\n      )\n      group.tasks.splice(taskIdx, 1)\n      eventBus.$emit('updateGroup', group)\n    },\n    updateTask(updatedTask) {\n      const group = this.board.groups.find(\n        (group) => group.id === updatedTask.groupId\n      )\n      const taskIdx = group.tasks.findIndex(\n        (currTask) => currTask.id === updatedTask.id\n      )\n      const cleanTask = _.omit(updatedTask, ['groupId', 'groupName'])\n      group.tasks.splice(taskIdx, 1, cleanTask)\n      eventBus.$emit('updateGroup', group)\n    },\n    focusInput() {\n      this.isAddBtnShown = true\n    },\n    unFocusInput() {\n      this.isAddBtnShown = false\n    },\n    addTask() {\n      const newTask = boardService.getEmptyTask()\n      newTask.status.color = this.status.color\n      newTask.status.txt = this.status.txt\n      newTask.txt = this.txt\n      this.group.tasks.unshift(newTask)\n      eventBus.$emit('updateGroup', this.group)\n      this.isAddBtnShown = false\n      this.txt = ''\n    },\n  },\n  created() {\n    this.groupCopy = this.group\n    this.cloneTasks = this.status.tasks\n  },\n  components: {\n    taskPreview,\n    draggable,\n  },\n}\n</script>\n"]}]}