{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-posts.vue","mtime":1607418824550},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGJvYXJkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2JvYXJkLnNlcnZpY2UnCmltcG9ydCBBdmF0YXIgZnJvbSAnQC9jbXBzL3VzZXItYXZhdGFyLnZ1ZScKaW1wb3J0IHVwbG9hZEltZyBmcm9tICcuL3VwbG9hZC1pbWcnCgppbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCcKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAndGFzay1wb3N0cycsCiAgcHJvcHM6IHsKICAgIHBvc3RzOiB7CiAgICAgIHR5cGU6IEFycmF5CiAgICB9LAogICAgdGFzazogT2JqZWN0CiAgfSwKICBjb21wdXRlZDogewogICAgdXNlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMudXNlcgogICAgfSwKICAgIG1pbmlVc2VyKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVycy5taW5pVXNlcgogICAgfQogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG5ld1Bvc3Q6IG51bGwsCiAgICAgIGNvcGllZFBvc3RzOiBudWxsLAogICAgICBjb21wb25lbnRLZXk6IDAsCiAgICAgIGltZzogbnVsbCwKICAgICAgaG92ZXJlZFBvc3RJZDogbnVsbCwKICAgICAgaXNIb3ZlcmluZzogZmFsc2UKICAgIH0KICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmNvcGllZFBvc3RzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnBvc3RzKSkKICB9LAogIG1ldGhvZHM6IHsKICAgIHNldEhvdmVyZWRQb3N0KHBvc3RJZCkgewogICAgICB0aGlzLmlzSG92ZXJpbmcgPSB0cnVlCiAgICAgIHRoaXMuaG92ZXJlZFBvc3RJZCA9IHBvc3RJZAogICAgfSwKICAgIGltZ1VybCh1cmwpIHsKICAgICAgdGhpcy5pbWcgPSB1cmwKICAgIH0sCiAgICBnZXRUaW1lKHRpbWUpIHsKICAgICAgcmV0dXJuIG1vbWVudCh0aW1lKS5mcm9tTm93KCkKICAgIH0sCiAgICBkZWxldGVQb3N0KHBvc3RJZCkgewogICAgICB0aGlzLiRlbWl0KCdkZWxldGVQb3N0JywgcG9zdElkKQogICAgfSwKICAgIGFkZFBvc3QoKSB7CiAgICAgIGlmICghdGhpcy5uZXdQb3N0KSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KICAgICAgY29uc3QgcG9zdCA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVBvc3QoKQogICAgICBwb3N0LnR4dCA9IHRoaXMubmV3UG9zdAogICAgICBwb3N0LmJ5VXNlciA9IHRoaXMudXNlcgogICAgICBwb3N0LmltZ1VybCA9IHRoaXMuaW1nCiAgICAgIHRoaXMuY29waWVkUG9zdHMudW5zaGlmdChwb3N0KQogICAgICBjb25zdCB0eHQgPSBgJHt0aGlzLnVzZXIuZnVsbE5hbWV9IGFkZGVkIG5ldyBwb3N0IG9uIHRhc2s6ICR7dGhpcy50YXNrLnR4dH0gYAogICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMubWluaVVzZXIpCiAgICAgIG5ld0FjdGl2aXR5LnRhc2tJZCA9IHRoaXMudGFzay5pZAogICAgICB0aGlzLiRlbWl0KCd1cGRhdGVQb3N0cycsIHRoaXMuY29waWVkUG9zdHMsIG5ld0FjdGl2aXR5KQogICAgICB0aGlzLm5ld1Bvc3QgPSAnJwogICAgICB0aGlzLiRub3RpZnkoewogICAgICAgIG1lc3NhZ2U6ICdOZXcgcG9zdCBwdWJsaXNoZWQnLAogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgIH0pCiAgICB9CiAgfSwKICBjb21wb25lbnRzOiB7CiAgICBBdmF0YXIsCiAgICB1cGxvYWRJbWcKICB9LAogIHdhdGNoOiB7CiAgICAnJHJvdXRlLnBhcmFtcy50YXNrSWQnKCkgewogICAgICB0aGlzLmNvcGllZFBvc3RzID0gdGhpcy5wb3N0cwogICAgfQogIH0KfQo="},{"version":3,"sources":["task-posts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"task-posts.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <section class=\"task-posts relative\">\n    <form class=\"task-post-form relative\" @submit.prevent=\"addPost\">\n      <textarea\n        class=\"el-input-text-editor\"\n        @keydown.enter.exact.prevent=\"addPost\"\n        rows=\"3\"\n        placeholder=\"Write a massge...\"\n        v-model=\"newPost\"\n      />\n      <upload-img @sendImgUrl=\"imgUrl\" />\n      <button class=\"post-btn\">Post</button>\n    </form>\n    <ul class=\"posts-list clean-list flex column align-center\">\n      <li\n        class=\"task-post-card relative\"\n        v-for=\"post in copiedPosts\"\n        :key=\"post.id\"\n        @mouseover=\"setHoveredPost(post.id)\"\n        @mouseleave=\"isHovering = false\"\n      >\n        <div class=\"user-info-container flex space-between\">\n          <div class=\"flex align-center\">\n            <avatar :user=\"post.byUser\" />\n\n            <span class=\"by-user\" v-if=\"post.byUser\">{{\n              post.byUser.fullName\n            }}</span>\n          </div>\n\n          <h5>\n            <i class=\"far fa-clock\"></i>\n            {{ getTime(post.createdAt) }}\n          </h5>\n        </div>\n        <el-divider />\n        <div class=\"task-post-container flex space-between\">\n          <span>{{ post.txt }}</span>\n          <!-- <div class=\"ratio-square\"> -->\n          <img class=\"uploaded-img\" v-if=\"post.imgUrl\" :src=\"post.imgUrl\" />\n          <!-- </div> -->\n        </div>\n        <button\n          class=\"delete-post-btn\"\n          @click=\"deletePost(post.id)\"\n          v-if=\"isHovering && hoveredPostId === post.id\"\n        >\n          <i class=\"fal fa-trash\"></i>\n        </button>\n      </li>\n    </ul>\n  </section>\n</template>\n<script>\nimport { boardService } from '../services/board.service'\nimport Avatar from '@/cmps/user-avatar.vue'\nimport uploadImg from './upload-img'\n\nimport moment from 'moment'\n\nexport default {\n  name: 'task-posts',\n  props: {\n    posts: {\n      type: Array\n    },\n    task: Object\n  },\n  computed: {\n    user() {\n      return this.$store.getters.user\n    },\n    miniUser() {\n      return this.$store.getters.miniUser\n    }\n  },\n  data() {\n    return {\n      newPost: null,\n      copiedPosts: null,\n      componentKey: 0,\n      img: null,\n      hoveredPostId: null,\n      isHovering: false\n    }\n  },\n  created() {\n    this.copiedPosts = JSON.parse(JSON.stringify(this.posts))\n  },\n  methods: {\n    setHoveredPost(postId) {\n      this.isHovering = true\n      this.hoveredPostId = postId\n    },\n    imgUrl(url) {\n      this.img = url\n    },\n    getTime(time) {\n      return moment(time).fromNow()\n    },\n    deletePost(postId) {\n      this.$emit('deletePost', postId)\n    },\n    addPost() {\n      if (!this.newPost) {\n        return\n      }\n      const post = boardService.getEmptyPost()\n      post.txt = this.newPost\n      post.byUser = this.user\n      post.imgUrl = this.img\n      this.copiedPosts.unshift(post)\n      const txt = `${this.user.fullName} added new post on task: ${this.task.txt} `\n      let newActivity = boardService.getEmptyActivity(txt, this.miniUser)\n      newActivity.taskId = this.task.id\n      this.$emit('updatePosts', this.copiedPosts, newActivity)\n      this.newPost = ''\n      this.$notify({\n        message: 'New post published',\n        position: 'bottom-left',\n        duration: 2000\n      })\n    }\n  },\n  components: {\n    Avatar,\n    uploadImg\n  },\n  watch: {\n    '$route.params.taskId'() {\n      this.copiedPosts = this.posts\n    }\n  }\n}\n</script>\n\n<style></style>\n"]}]}