{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/task-list.vue","mtime":1607282046533},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB0YXNrUHJldmlldyBmcm9tICcuL3Rhc2stcHJldmlldycKaW1wb3J0IHsgYm9hcmRTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9ib2FyZC5zZXJ2aWNlJwppbXBvcnQgZHJhZ2dhYmxlIGZyb20gJ3Z1ZWRyYWdnYWJsZScKLy8gaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICdAL3NlcnZpY2VzL2V2ZW50LWJ1cy5zZXJ2aWNlJwpleHBvcnQgZGVmYXVsdCB7CiAgICBuYW1lOiAndGFzay1saXN0JywKICAgIHByb3BzOiB7CiAgICAgICAgdGFza3M6IEFycmF5LAogICAgICAgIGdyb3VwSWQ6IFN0cmluZywKICAgICAgICB0YXNrQ29sb3I6IFN0cmluZywKICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHR4dDogJycsCiAgICAgICAgICAgIGlzQWRkQnRuU2hvd2VuOiBmYWxzZSwKICAgICAgICAgICAgY2xvbmVkVGFza3M6IG51bGwsCiAgICAgICAgfQogICAgfSwKICAgIGNvbXB1dGVkOiB7CiAgICAgICAgYm9hcmQoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvYXJkCiAgICAgICAgfSwKICAgICAgICBkYXRhKCkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgdHh0OiAnJywKICAgICAgICAgICAgICAgIGlzQWRkQnRuU2hvd2VuOiBmYWxzZSwKICAgICAgICAgICAgICAgIGNsb25lZFRhc2tzOiBudWxsLAogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB0YXNrQmdjKCkgewogICAgICAgICAgICByZXR1cm4geyBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMudGFza0NvbG9yIH0KICAgICAgICB9LAogICAgICAgIHVzZXIoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLnVzZXIKICAgICAgICB9LAogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBhZGRFbXB0eVRhc2soZ3JvdXBJZCkgewogICAgICAgICAgICBpZiAodGhpcy5ncm91cElkICE9PSBncm91cElkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBuZXdUYXNrID0gYm9hcmRTZXJ2aWNlLmdldEVtcHR5VGFzaygpCiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKQogICAgICAgICAgICBjb25zdCB0eHQgPSBgJHt0aGlzLnVzZXIuZnVsbE5hbWV9IGFkZCBuZXcgdGFzayBpbiAke2dyb3VwLm5hbWV9YAogICAgICAgICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMudXNlcikKICAgICAgICAgICAgbmV3QWN0aXZpdHkuZ3JvdXBJZCA9IGdyb3VwSWQKICAgICAgICAgICAgdGhpcy5ib2FyZC5hY3Rpdml0aWVzLnVuc2hpZnQobmV3QWN0aXZpdHkpCiAgICAgICAgICAgIGdyb3VwLnRhc2tzLnB1c2gobmV3VGFzaykKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgICAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgICAgICAgICBib2FyZDogdGhpcy5ib2FyZCwKICAgICAgICAgICAgfSkKICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdOZXcgdGFzayBhZGRlZCcsCiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbS1sZWZ0JywKICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAwLAogICAgICAgICAgICB9KQogICAgICAgICAgICB0aGlzLiRlbWl0KCdmb3JjZVJlbmRlcicpCiAgICAgICAgfSwKICAgICAgICBzaG93QWRkQnRuKCkgewogICAgICAgICAgICB0aGlzLmlzQWRkQnRuU2hvd2VuID0gdHJ1ZQogICAgICAgIH0sCiAgICAgICAgZ2V0R3JvdXBCeUlkKCkgewogICAgICAgICAgICBjb25zdCBpZHggPSB0aGlzLmJvYXJkLmdyb3Vwcy5maW5kSW5kZXgoCiAgICAgICAgICAgICAgICAoZ3JvdXApID0+IGdyb3VwLmlkID09PSB0aGlzLmdyb3VwSWQKICAgICAgICAgICAgKQogICAgICAgICAgICByZXR1cm4gdGhpcy5ib2FyZC5ncm91cHNbaWR4XQogICAgICAgIH0sCiAgICAgICAgYWRkVGFzaygpIHsKICAgICAgICAgICAgY29uc3QgbmV3VGFzayA9IGJvYXJkU2VydmljZS5nZXRFbXB0eVRhc2soKQogICAgICAgICAgICBuZXdUYXNrLnR4dCA9IHRoaXMudHh0CiAgICAgICAgICAgIGNvbnN0IHR4dCA9IGBUYXNrICcke25ld1Rhc2sudHh0fScgYWRkZWRgCiAgICAgICAgICAgIGxldCBuZXdBY3Rpdml0eSA9IGJvYXJkU2VydmljZS5nZXRFbXB0eUFjdGl2aXR5KHR4dCwgdGhpcy51c2VyKQogICAgICAgICAgICBuZXdBY3Rpdml0eS5ncm91cElkID0gdGhpcy5ncm91cElkCiAgICAgICAgICAgIHRoaXMuYm9hcmQuYWN0aXZpdGllcy51bnNoaWZ0KG5ld0FjdGl2aXR5KQogICAgICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuZ2V0R3JvdXBCeUlkKCkKICAgICAgICAgICAgZ3JvdXAudGFza3MucHVzaChuZXdUYXNrKQogICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCh7CiAgICAgICAgICAgICAgICB0eXBlOiAnc2F2ZUJvYXJkJywKICAgICAgICAgICAgICAgIGJvYXJkOiB0aGlzLmJvYXJkLAogICAgICAgICAgICB9KQogICAgICAgICAgICB0aGlzLnR4dCA9ICcnCiAgICAgICAgICAgIHRoaXMuaXNBZGRCdG5TaG93ZW4gPSBmYWxzZQogICAgICAgICAgICB0aGlzLiRub3RpZnkoewogICAgICAgICAgICAgICAgbWVzc2FnZTogJ05ldyB0YXNrIGFkZGVkJywKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLWxlZnQnLAogICAgICAgICAgICAgICAgZHVyYXRpb246IDIwMDAsCiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2ZvcmNlUmVuZGVyJykKICAgICAgICB9LAogICAgICAgIGRlbGV0ZVRhc2sodGFza0lkKSB7CiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKQogICAgICAgICAgICBjb25zdCB0YXNrSWR4ID0gZ3JvdXAudGFza3MuZmluZEluZGV4KCh0YXNrKSA9PiB0YXNrLmlkID09PSB0YXNrSWQpCiAgICAgICAgICAgIGdyb3VwLnRhc2tzLnNwbGljZSh0YXNrSWR4LCAxKQogICAgICAgICAgICBjb25zdCB0eHQgPSBgJHt0aGlzLnVzZXIuZnVsbE5hbWV9IHJlbW92ZSBhIHRhc2sgZnJvbSAke2dyb3VwLm5hbWV9YAogICAgICAgICAgICBsZXQgbmV3QWN0aXZpdHkgPSBib2FyZFNlcnZpY2UuZ2V0RW1wdHlBY3Rpdml0eSh0eHQsIHRoaXMudXNlcikKICAgICAgICAgICAgbmV3QWN0aXZpdHkuZ3JvdXBJZCA9IHRoaXMuZ3JvdXBJZAogICAgICAgICAgICB0aGlzLmJvYXJkLmFjdGl2aXRpZXMudW5zaGlmdChuZXdBY3Rpdml0eSkKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgICAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgICAgICAgICBib2FyZDogdGhpcy5ib2FyZCwKICAgICAgICAgICAgfSkKICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdUYXNrIHJlbW92ZWQnLAogICAgICAgICAgICAgICAgcG9zaXRpb246ICdib3R0b20tbGVmdCcsCiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjAwMCwKICAgICAgICAgICAgfSkKICAgICAgICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgICAgIH0sCiAgICAgICAgdXBkYXRlVGFzayhuZXdUYXNrLCBhY3Rpdml0eSkgewogICAgICAgICAgICBpZiAoYWN0aXZpdHkpIHsKICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQuYWN0aXZpdGllcy51bnNoaWZ0KGFjdGl2aXR5KQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKQogICAgICAgICAgICBjb25zdCB0YXNrSWR4ID0gZ3JvdXAudGFza3MuZmluZEluZGV4KAogICAgICAgICAgICAgICAgKHRhc2spID0+IHRhc2suaWQgPT09IG5ld1Rhc2suaWQKICAgICAgICAgICAgKQogICAgICAgICAgICBncm91cC50YXNrcy5zcGxpY2UodGFza0lkeCwgMSwgbmV3VGFzaykKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgICAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgICAgICAgICBib2FyZDogdGhpcy5ib2FyZCwKICAgICAgICAgICAgfSkKICAgICAgICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgICAgIH0sCiAgICAgICAgYXN5bmMgdXBkYXRlVGFza3MoKSB7CiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5nZXRHcm91cEJ5SWQoKQogICAgICAgICAgICBncm91cC50YXNrcyA9IHRoaXMuY2xvbmVkVGFza3MKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goewogICAgICAgICAgICAgICAgdHlwZTogJ3NhdmVCb2FyZCcsCiAgICAgICAgICAgICAgICBib2FyZDogdGhpcy5ib2FyZCwKICAgICAgICAgICAgfSkKICAgICAgICAgICAgdGhpcy4kZW1pdCgnZm9yY2VSZW5kZXInKQogICAgICAgIH0sCiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICB0aGlzLmNsb25lZFRhc2tzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnRhc2tzKSkKICAgIH0sCiAgICBjb21wb25lbnRzOiB7CiAgICAgICAgdGFza1ByZXZpZXcsCiAgICAgICAgZHJhZ2dhYmxlLAogICAgfSwKfQo="},{"version":3,"sources":["task-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"task-list.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n    <section v-if=\"clonedTasks\" class=\"task-list-container width100\">\n        <ul\n            class=\"task-list clean-list flex wrap align-center justify-center gap\"\n        >\n            <draggable\n                class=\"width100\"\n                :list=\"clonedTasks\"\n                group=\"tasks\"\n                @change=\"updateTasks\"\n            >\n                <task-preview\n                    v-for=\"task in clonedTasks\"\n                    :user=\"user\"\n                    :taskColor=\"taskColor\"\n                    :key=\"task.id\"\n                    :task=\"task\"\n                    :statuses=\"board.statuses\"\n                    :priorities=\"board.priorities\"\n                    :groupId=\"groupId\"\n                    @deleteTask=\"deleteTask\"\n                    @updateTask=\"updateTask\"\n                    :boardMembers=\"board.members\"\n                />\n            </draggable>\n        </ul>\n        <form class=\"add-task-form flex\" @submit.prevent=\"addTask\">\n            <span class=\"task-color input-color\" :style=\"taskBgc\"></span>\n            <input\n                class=\"add-task-input\"\n                @focus=\"showAddBtn\"\n                v-model=\"txt\"\n                type=\"text\"\n                placeholder=\"+ Add Task\"\n            />\n            <button v-show=\"isAddBtnShowen\" type=\"submit\">Add</button>\n        </form>\n    </section>\n</template>\n<script>\nimport taskPreview from './task-preview'\nimport { boardService } from '@/services/board.service'\nimport draggable from 'vuedraggable'\n// import { eventBus } from '@/services/event-bus.service'\nexport default {\n    name: 'task-list',\n    props: {\n        tasks: Array,\n        groupId: String,\n        taskColor: String,\n    },\n    data() {\n        return {\n            txt: '',\n            isAddBtnShowen: false,\n            clonedTasks: null,\n        }\n    },\n    computed: {\n        board() {\n            return this.$store.getters.board\n        },\n        data() {\n            return {\n                txt: '',\n                isAddBtnShowen: false,\n                clonedTasks: null,\n            }\n        },\n        taskBgc() {\n            return { backgroundColor: this.taskColor }\n        },\n        user() {\n            return this.$store.getters.user\n        },\n    },\n    methods: {\n        addEmptyTask(groupId) {\n            if (this.groupId !== groupId) {\n                return\n            }\n            const newTask = boardService.getEmptyTask()\n            const group = this.getGroupById()\n            const txt = `${this.user.fullName} add new task in ${group.name}`\n            let newActivity = boardService.getEmptyActivity(txt, this.user)\n            newActivity.groupId = groupId\n            this.board.activities.unshift(newActivity)\n            group.tasks.push(newTask)\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.$notify({\n                message: 'New task added',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.$emit('forceRender')\n        },\n        showAddBtn() {\n            this.isAddBtnShowen = true\n        },\n        getGroupById() {\n            const idx = this.board.groups.findIndex(\n                (group) => group.id === this.groupId\n            )\n            return this.board.groups[idx]\n        },\n        addTask() {\n            const newTask = boardService.getEmptyTask()\n            newTask.txt = this.txt\n            const txt = `Task '${newTask.txt}' added`\n            let newActivity = boardService.getEmptyActivity(txt, this.user)\n            newActivity.groupId = this.groupId\n            this.board.activities.unshift(newActivity)\n            const group = this.getGroupById()\n            group.tasks.push(newTask)\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.txt = ''\n            this.isAddBtnShowen = false\n            this.$notify({\n                message: 'New task added',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.$emit('forceRender')\n        },\n        deleteTask(taskId) {\n            const group = this.getGroupById()\n            const taskIdx = group.tasks.findIndex((task) => task.id === taskId)\n            group.tasks.splice(taskIdx, 1)\n            const txt = `${this.user.fullName} remove a task from ${group.name}`\n            let newActivity = boardService.getEmptyActivity(txt, this.user)\n            newActivity.groupId = this.groupId\n            this.board.activities.unshift(newActivity)\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.$notify({\n                message: 'Task removed',\n                position: 'bottom-left',\n                duration: 2000,\n            })\n            this.$emit('forceRender')\n        },\n        updateTask(newTask, activity) {\n            if (activity) {\n                this.board.activities.unshift(activity)\n            }\n            const group = this.getGroupById()\n            const taskIdx = group.tasks.findIndex(\n                (task) => task.id === newTask.id\n            )\n            group.tasks.splice(taskIdx, 1, newTask)\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.$emit('forceRender')\n        },\n        async updateTasks() {\n            const group = this.getGroupById()\n            group.tasks = this.clonedTasks\n            this.$store.dispatch({\n                type: 'saveBoard',\n                board: this.board,\n            })\n            this.$emit('forceRender')\n        },\n    },\n    created() {\n        this.clonedTasks = JSON.parse(JSON.stringify(this.tasks))\n    },\n    components: {\n        taskPreview,\n        draggable,\n    },\n}\n</script>"]}]}