{"remainingRequest":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/board-chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/src/cmps/board-chat.vue","mtime":1607175842063},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orelvaizman/Desktop/dev/FinalSprint/tasku-frontend/TaskU-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIEV2ZXJ5IGxpbmUgd2l0aCBAQCBuZWVkIHRvIGJlIHdpdGhvdXQgYSBjb21tZW50CmltcG9ydCB7c29ja2V0U2VydmljZX0gZnJvbSAnQC9zZXJ2aWNlcy9zb2NrZXQuc2VydmljZS5qcycgCmltcG9ydCBBdmF0YXIgZnJvbSAnQC9jbXBzL3VzZXItYXZhdGFyLnZ1ZScKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnYm9hcmQtY2hhdCcsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG1zZ3M6IFtdLAogICAgICBtc2c6IHtmcm9tOm51bGwsdHh0OicnfSwgLy8gY2hhbmdlIHRvIGxvZ2luIHVzZXIKICAgICAgdG9waWM6bnVsbCwKICAgICAgIGlzVHlwZWluZzpmYWxzZSwKICAgICAgbXNnVHlwaW5nOicnLAogICAgfQogIH0sCmNvbXB1dGVkOnsKICB0b3BpY05hbWUoKXsKICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmJvYXJkLm5hbWUKICB9LAogIHVzZXIoKXsKICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMudXNlcgogIH0KfSwKICBtZXRob2RzOiB7CiAgICBlbWl0Q2xvc2UoKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlQ2hhdCcpCiAgICB9LAogICAgCiAgICAgdXNlclR5cGluZygpewogICAgICB2YXIgdGltZXIgPSBudWxsCiAgICAgICAgc29ja2V0U2VydmljZS5lbWl0KCd0eXBpbmcnLHRoaXMubXNnLmZyb20pIAogICAgICBjbGVhclRpbWVvdXQodGltZXIpOyAKICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKT0+ewogICAgICAgICAgc29ja2V0U2VydmljZS5lbWl0KCdyZXNldCBpcyB0eXBpbmcnKSAKICAgICAgICB9LDI1MDApCiAgICB9LAogICAgYWRkTXNnKG1zZyl7CiAgICAgIHRoaXMubXNncy5wdXNoKG1zZykKICAgICAgdmFyIGVsbWVudCA9IHRoaXMuJHJlZnMubWFzc2dlc0NvbnRhaW5lcgogICAgICBlbG1lbnQuc2Nyb2xsVG9wID0gZWxtZW50LnNjcm9sbEhlaWdodDsKCiAgICB9LAogICAgc2VuZE1zZygpIHsKICAgICAgaWYgKCF0aGlzLm1zZy50eHQpIHJldHVybjsKICAgICAgc29ja2V0U2VydmljZS5lbWl0KCdyZXNldCBpcyB0eXBpbmcnKSAgCiAgICAgIHNvY2tldFNlcnZpY2UuZW1pdCgnY2hhdCBuZXdNc2cnLCB0aGlzLm1zZykgCiAgICAgIHRoaXMubXNnLnR4dD0nJwogICAgfSwKICAgIHVwZGF0ZVRvcGljKCl7CmNvbnN0IHsgYm9hcmRJZCB9ID0gdGhpcy4kcm91dGUucGFyYW1zOwogICAgdGhpcy50b3BpYyA9IGJvYXJkSWQKICAgIH0KICB9LAogIGNyZWF0ZWQoKXsKICAgIHRoaXMubXNnLmZyb20gPSB0aGlzLiRzdG9yZS5nZXR0ZXJzLnVzZXIuZnVsbE5hbWUgCiAgICB0aGlzLnVwZGF0ZVRvcGljKCk7CiAgICBzb2NrZXRTZXJ2aWNlLmVtaXQoJ2NoYXQgdG9waWMnLCB0aGlzLnRvcGljKQogICAgc29ja2V0U2VydmljZS5vbignaGlzdG9yeSBtc2cnLG1zZ3M9PnRoaXMubXNncyA9IG1zZ3MpCiAgICBzb2NrZXRTZXJ2aWNlLm9uKCdjaGF0IGFkZE1zZycsIHRoaXMuYWRkTXNnKQogICAgc29ja2V0U2VydmljZS5vbignY2hhdCBhZGRNc2cgc2VuZGVyJywgdGhpcy5hZGRNc2cpCiAgICBzb2NrZXRTZXJ2aWNlLm9uKCdpc1R5cGluZycsKGJvb2xlbik9PnRoaXMuaXNUeXBlaW5nPWJvb2xlbikKICAgIHNvY2tldFNlcnZpY2Uub24oJ21zZycsKG1zZyk9PnsKICAgICAgdGhpcy5tc2dUeXBpbmc9bXNnCiAgICAgIH0pCiAgfSwKICAgIGRlc3Ryb3llZCgpIHsKICAgIHRoaXMubXNncyA9IFtdCiAgICBzb2NrZXRTZXJ2aWNlLm9mZignY2hhdCBhZGRNc2cnLCB0aGlzLmFkZE1zZykKICAgIC8vIHNvY2tldFNlcnZpY2UudGVybWluYXRlKCk7CiAgfSwKICB3YXRjaDp7CiAgICAgJyRyb3V0ZS5wYXJhbXMuYm9hcmRJZCcoKXsKICAgICB0aGlzLnVwZGF0ZVRvcGljKCk7CgogICAgIH0KICB9LAogIGNvbXBvbmVudHM6ewogICAgQXZhdGFyCgogIH0KfQo="},{"version":3,"sources":["board-chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA","file":"board-chat.vue","sourceRoot":"src/cmps","sourcesContent":["<template>\n  <section class=\"board-chat\">\n    <section class=\"chat-container flex column\">\n      <div class=\"header-chat flex column \">\n        <div class=\"main-header flex space-between align-center\">\n        {{topicName}} Chat\n        <button class=\"btn-close\">\n          <i @click=\"emitClose\" class=\"fas fa-times\"></i>\n        </button>\n        </div>\n        <span v-if=\"isTypeing\">{{msgTyping}}</span>\n      </div>\n      <div ref=\"massgesContainer\" class=\"msg-container grow flex column\">\n        \n        <template v-if=\"msgs\">\n          <div  class=\"chat-msg flex \" v-for=\"(msg, idx) in msgs\" :key=\"idx\">\n            <div :class=\"msg.sender || ''\">\n        <avatar :user=\"user\" />\n\n         \n            <strong class=\"from-msg\">{{ msg.from }}:</strong><span>{{ msg.txt }} </span> \n\n          </div>\n          </div>\n        </template>\n      </div>\n      <div class=\"footer-chat flex align-center\">\n        <input\n          type=\"text\" @keydown.enter=\"sendMsg\"\n          v-model=\"msg.txt\" \n          placeholder=\"Write a massage...\"\n          name=\"\"\n          id=\"\"\n        /><i v-tooltip.top=\"'Send Msg'\" @click=\"sendMsg\" class=\"send-btn fas fa-paper-plane\"></i>\n      </div>\n    </section>\n  </section>\n</template>\n<script>\n// Every line with @@ need to be without a comment\nimport {socketService} from '@/services/socket.service.js' \nimport Avatar from '@/cmps/user-avatar.vue'\n\nexport default {\n  name: 'board-chat',\n  data() {\n    return {\n      msgs: [],\n      msg: {from:null,txt:''}, // change to login user\n      topic:null,\n       isTypeing:false,\n      msgTyping:'',\n    }\n  },\ncomputed:{\n  topicName(){\n    return this.$store.getters.board.name\n  },\n  user(){\n   return this.$store.getters.user\n  }\n},\n  methods: {\n    emitClose() {\n      this.$emit('closeChat')\n    },\n    \n     userTyping(){\n      var timer = null\n        socketService.emit('typing',this.msg.from) \n      clearTimeout(timer); \n       timer = setTimeout(()=>{\n          socketService.emit('reset is typing') \n        },2500)\n    },\n    addMsg(msg){\n      this.msgs.push(msg)\n      var elment = this.$refs.massgesContainer\n      elment.scrollTop = elment.scrollHeight;\n\n    },\n    sendMsg() {\n      if (!this.msg.txt) return;\n      socketService.emit('reset is typing')  \n      socketService.emit('chat newMsg', this.msg) \n      this.msg.txt=''\n    },\n    updateTopic(){\nconst { boardId } = this.$route.params;\n    this.topic = boardId\n    }\n  },\n  created(){\n    this.msg.from = this.$store.getters.user.fullName \n    this.updateTopic();\n    socketService.emit('chat topic', this.topic)\n    socketService.on('history msg',msgs=>this.msgs = msgs)\n    socketService.on('chat addMsg', this.addMsg)\n    socketService.on('chat addMsg sender', this.addMsg)\n    socketService.on('isTyping',(boolen)=>this.isTypeing=boolen)\n    socketService.on('msg',(msg)=>{\n      this.msgTyping=msg\n      })\n  },\n    destroyed() {\n    this.msgs = []\n    socketService.off('chat addMsg', this.addMsg)\n    // socketService.terminate();\n  },\n  watch:{\n     '$route.params.boardId'(){\n     this.updateTopic();\n\n     }\n  },\n  components:{\n    Avatar\n\n  }\n}\n</script>\n "]}]}